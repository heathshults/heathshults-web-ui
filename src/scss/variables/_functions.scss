@import "../bootstrap/scss/variables";
// @import "./maps";
// @import "./colors";

@function set-color($color, $lightnessMultiplier) {
  @if (lightness($color) > $lightnessMultiplier) {
    @return $hs-gray-darker;
  } @else {
    @return $hs-white;
  }
}

// ====== PIXELS TO REM ====== //
$html-font-size: 16px;
@function stripUnit($value) {
  @return $value / ($value * 0 + 1);
}

@function rem($pxValue) {
  @return #{stripUnit($pxValue) / stripUnit($html-font-size)}rem;
}

// accessor functions
// z-index:
// usage: z-index(global, nav); z-index(dm-switcher, button)
@function z-index($hs-keys...) {
  $hs-value: $hs-z-indexes;

  @each $hs-key in $hs-keys {
    $hs-value: map-get($hs-value, $hs-key);
  }

  @return $hs-value;
}
// removes whitespace
@function str-strip-space($str) {
  @while (str-index($str, " ") != null) {
    $index: str-index($str, " ");
    $str: "#{str-slice($str, 0, $index - 1)}#{str-slice($str, $index + 1)}";
  }
  @return $str;
}

// exchange sass variable for a css variable
@function v($var, $fallback: null) {
  @if ($fallback) {
    @return var(--#{$var}, #{$fallback});
  } @else {
    @return var(--#{$var});
  }
}


// --------------------------------

// Colors

// --------------------------------

// return color with different opacity value
@function alpha($color, $opacity) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// return color with different lightness value
@function lightness($color, $lightnessMultiplier) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

// modify color HSLA values
@function adjustHSLA($color, $hueMultiplier: 1, $saturationMultiplier: 1, $lightnessMultiplier: 1, $opacity: 1) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla(calc(#{$color-h} * #{$hueMultiplier}), calc(#{$color-s} * #{$saturationMultiplier}), calc(#{$color-l} * #{$lightnessMultiplier}), $opacity);
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}



// --------------------------------
// Grid & Layout
// --------------------------------

$grid-columns: 12 !default;

// used to round width to a number with 2 decimal places - used for IE fallback
@function round-width ($i) {
  $width : floor(100% * $i * 100/ $grid-columns) / 100;
  @return $width;
}
