


// Mixins

// Bootstrap Button Variant

@mixin button-variant($hs-color, $hs-background, $hs-border) {
  color: $hs-color;
  background-color: $hs-background;
  border-color: $hs-border;

  &:focus,
  &.focus {
    color: $hs-color;
    background-color: darken($hs-background, 10%);
    /* stylelint-disable-next-line */
        border-color: darken($hs-border, 25%);
  }
  &:hover {
    color: $hs-color;
    background-color: darken($hs-background, 10%);
    /* stylelint-disable-next-line */
        border-color: darken($hs-border, 12%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $hs-color;
    background-color: darken($hs-background, 10%);
    /* stylelint-disable-next-line */
        border-color: darken($hs-border, 12%);

    &:hover,
    &:focus,
    &.focus {
      color: $hs-color;
      background-color: darken($hs-background, 17%);
      /* stylelint-disable */
          border-color: darken($hs-border, 25%);
      /* stylelint-enable */
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &.focus {
      background-color: $hs-background;
      /* stylelint-disable-next-line */
          border-color: $hs-border;
    }
  }

  .badge {
    color: $hs-background;
    background-color: $hs-color;
  }
}

// Background Cover Mixin

@mixin background-cover {
  background-size: cover;
}

// Font Mixins

@mixin serif-font {
  font-family: "Droid Serif", "Helvetica Neue", Helvetica, Arial, sans-serif;
}

@mixin script-font {
  font-family: $hs-font-cursive-Caveat;
}

@mixin body-font {
  font-family: "Roboto", sans-serif;
}

@mixin heading-font {
  font-family: "Montserrat", "Helvetica Neue", Helvetica, Arial, sans-serif;
  text-transform: uppercase;
}

@mixin box-shadow-inset-blue {
  box-shadow: $hs-shadow-inset-blue;
}

@mixin transition-ease-dot3s {
  transition: all ease 0.3s;
}

@mixin border-radius-all-md {
  border-radius: $hs-border-radius-md;
}

@mixin responsive-box {
  //@extend-elements
  %extend_responsive_box_defaults {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }


  .responsive-box {
    position: relative;
    display: block;
    height: 0;
    padding: 0;
    overflow: hidden;

    .responsive-box-item {
      @extend %extend_responsive_box_defaults;
    }

    iframe {
      @extend %extend_responsive_box_defaults;
    }

    embed {
      @extend %extend_responsive_box_defaults;
    }

    object {
      @extend %extend_responsive_box_defaults;
    }

    video {
      @extend %extend_responsive_box_defaults;
    }
  }

  .responsive-box-16by9 {
    padding-bottom: 56.25%;
  }

  .responsive-box-4by3 {
    padding-bottom: 75%;
  }
}
// functions

/*
 * CSS CUSTOM VARIABLE FUNCTION
 *
 * Get css vars from scss vars
 *
 * Use:
 * `color: v(primary);`
 * `color: v(primary, #000);`
 * `padding-left: v(x-padding, 2rem);`
 * `transform: translate3d(v(x-delta), v(y-delta), 0);`
 *
 * Parameters:
 *  $hs-Var: name of the SASS variable, without its double hyphen prefix
 *  $hs-fallback: (optional, null by default): custom property fallback value
 */

// $hs-colors: map-merge($hs-map1: $hs-grays, $hs-map2: $hs-dark-mode-colors);
// $hs-keys: map-keys($hs-colors);

// @function getV($hs-var, $hs-fallback: null) {
//   @if map-has-key($hs-colors, $hs-var) {
//     $hs-cssVarName: #{$hs-var};
//   }
//   @if($hs-fallback) {
//     @return var(--$hs-cssVarName, $hs-fallback);
//   } @else {
//     @return var(--$hs-cssVarName);
//   }
// }

// accessor functions
// z-index:
// usage: z-index(global, nav); z-index(dm-switcher, button)
@function z-index($hs-keys...) {
  $hs-value: $hs-z-indexes;

  @each $hs-key in $hs-keys {
    $hs-value: map-get($hs-value, $hs-key);
  }

  @return $hs-value;
}
@mixin card-size {
  &[card-size="--sm"] {
    width: 265px;
  }

  &[card-size="--lg"] {
    width: 400px;
  }

  &[card-size="--fluid"] {
    width: 100%;
  }
}
