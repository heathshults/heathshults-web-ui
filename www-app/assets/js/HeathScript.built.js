(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require('./js/HeathScript');

require('./js/modules/show-more-fadebar');

require('./js/jqBootstrapValidation');

require('./js/contact_me');

require('./js/swiper');

},{"./js/HeathScript":2,"./js/contact_me":3,"./js/jqBootstrapValidation":4,"./js/modules/show-more-fadebar":5,"./js/swiper":7}],2:[function(require,module,exports){
"use strict";
/*!
 * HeathShults.com - Heath Shults v1.0 (http://heathshults.com)
 * Copyright 2020-2020 Heath-Shults
 * Licensed under MIT (https://github.com/heathshults/heathshults.com/LICENSE)
 */

(function ($) {
  'use strict'; // Start of use strict
  // ====== RANKING BARS

  var theBars = document.querySelectorAll('.hs-ranking-bar');
  theBars.forEach(function (aBar) {
    // eslint-disable-next-line no-undef
    var barWidth = $(aBar).attr('aria-valuenow');
    $(aBar).attr('style', "width: ".concat(barWidth, "%"));
  }); // ====== NAV JS ====== //
  // jQuery for page scrolling feature - requires jQuery Easing plugin
  // $('a.js-page-scroll').bind('click', function (event) {
  //   var $anchor = $(this);
  //   $('html, body').stop().animate({
  //     scrollTop: ($($anchor.attr('href')).offset().top - 0) //I left the - 0 there to remind me about using it if need be
  //   }, 1250, 'easeInOutExpo');
  //   event.preventDefault();
  // });

  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
    if (location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $("[name=" + this.hash.slice(1) + "]");

      if (target.length) {
        $("html, body").animate({
          scrollTop: target.offset().top - 72
        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  }); // Closes responsive menu when a scroll trigger link is clicked

  $(".js-scroll-trigger").click(function () {
    $(".navbar-collapse").collapse("hide");
  }); // Highlight the top nav as scrolling occurs

  $('body').scrollspy({
    target: '#mainNav',
    offset: 74
  }); // Collapse Navbar

  var navbarCollapse = function navbarCollapse() {
    if ($("#mainNav").offset().top > 90) {
      $("#mainNav").addClass("navbar-shrink");
    } else {
      $("#mainNav").removeClass("navbar-shrink");
    }
  }; // Collapse now if page is not at top


  navbarCollapse(); // Collapse the navbar when page is scrolled

  $(window).scroll(navbarCollapse); // ** ====== MODE WIDHET ====== ** //

  var dm_btn = $('#mode_widget');
  var lsGetMode = localStorage.getItem('dark_mode'); // set button text

  $(document).ready(function () {
    if (lsGetMode === 'fasle') {
      setModeText(true); //dm_btn.html('<span class="which-mode">Dark Mode<span id="mode_icon" class="fa fa-moon-o mode-icon"></span></span>')
    } else {
      setModeText(false); // dm_btn.html('<span class="which-mode">Light Mode<span id="mode_icon" class="fa fa-sun-o mode-icon"></span></span>')
    }
  });

  function setModeText(mode) {
    if (mode === 'true') {
      dm_btn.html('<span class="which-mode"> Dark Mode<i id="mode_icon" class="fa fa-moon mode-icon"></i></span>');
    } else {
      dm_btn.html('<span class="which-mode"> Light Mode<i id="mode_icon" class="fa fa-sun mode-icon"></i></span>');
    }
  }

  function setMode(mode) {
    localStorage.setItem('dark_mode', "".concat(mode));
    document.querySelector('#darkmode').disabled = mode;

    if (mode === 'true') {
      document.querySelector('#darkmode').disabled = false;
      dm_btn.html('<span class="which-mode"> Dark Mode<i id="mode_icon" class="fa fa-moon mode-icon"></i></span>'); // document.querySelector('link[href="css/theme-dark-mode.css"]').disabled = false;
    } else {
      dm_btn.html('<span class="which-mode"> Light Mode<i id="mode_icon" class="fa fa-sun mode-icon"></i></span>');
    }

    return setModeText(mode);
  } // Theme switcher


  dm_btn.click(function (event) {
    event.preventDefault();

    if (localStorage.getItem('dark_mode') === 'true') {
      setMode('false'), console.log('set to false');
    } else {
      setMode('true'), console.log('set to true');
    }

    return;
  }); // ====== SHOWMORE ==== //
  // eslint-disable-next-line no-unused-vars

  var ShowMoreSettings = {
    boxHeight: '100vh',
    fbStartColor: 'rgba(0,0,0,.75)',
    fbEndColor: 'rgba(0,0,0,.75)',
    fbBottomBorder: '1px solid #2e2e2e',
    fbInitButtonText: 'Show More',
    fbOpenButtonText: 'Show Less',
    fbButtonPosition: 'center',
    fbButtonBackground: '#151515',
    fbButtonBackgroundHover: '#333333;',
    fbButtonTextColor: '#ffffff',
    fbButtonTextColorHover: '#ffffff',
    fbButtonTextColorFocus: '#FFF',
    fbButtonBorderColor: '#000000',
    fbButtonBorderColorFocus: '#333333'
  };
})(jQuery); // End of use strict

},{}],3:[function(require,module,exports){
"use strict"; // Contact Form Scripts

$(function () {
  $("#contactForm input,#contactForm textarea").jqBootstrapValidation({
    preventSubmit: true,
    submitError: function submitError($form, event, errors) {// additional error messages or events
    },
    submitSuccess: function submitSuccess($form, event) {
      event.preventDefault(); // prevent default submit behaviour
      // get values from FORM

      var name = $("input#name").val();
      var email = $("input#email").val();
      var phone = $("input#phone").val();
      var message = $("textarea#message").val();
      var firstName = name; // For Success/Failure Message
      // Check for white space in name for Success/Fail message

      if (firstName.indexOf(' ') >= 0) {
        firstName = name.split(' ').slice(0, -1).join(' ');
      }

      $.ajax({
        url: "././mail/contact_me.php",
        type: "POST",
        data: {
          name: name,
          phone: phone,
          email: email,
          message: message
        },
        cache: false,
        success: function success() {
          // Success message
          $('#success').html("<div class='alert alert-success'>");
          $('#success > .alert-success').html("<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;").append("</button>");
          $('#success > .alert-success').append("<strong>Your message has been sent. </strong>");
          $('#success > .alert-success').append('</div>'); //clear all fields

          $('#contactForm').trigger("reset");
        },
        error: function error() {
          // Fail message
          $('#success').html("<div class='alert alert-danger'>");
          $('#success > .alert-danger').html("<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;").append("</button>");
          $('#success > .alert-danger').append("<strong>Sorry " + firstName + ", it seems that my mail server is not responding. Please try again later!");
          $('#success > .alert-danger').append('</div>'); //clear all fields

          $('#contactForm').trigger("reset");
        }
      });
    },
    filter: function filter() {
      return $(this).is(":visible");
    }
  });
  $("a[data-toggle=\"tab\"]").click(function (e) {
    e.preventDefault();
    $(this).tab("show");
  });
});
/*When clicking on Full hide fail/success boxes */

$('#name').focus(function () {
  $('#success').html('');
});

},{}],4:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}
/* jqBootstrapValidation
 * A plugin for automating validation on Twitter Bootstrap formatted forms.
 *
 * v1.3.6
 *
 * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file
 *
 * http://ReactiveRaven.github.com/jqBootstrapValidation/
 */


(function ($) {
  var createdElements = [];
  var defaults = {
    options: {
      prependExistingHelpBlock: false,
      sniffHtml: true,
      // sniff for 'required', 'maxlength', etc
      preventSubmit: true,
      // stop the form submit event from firing if validation fails
      submitError: false,
      // function called if there is an error when trying to submit
      submitSuccess: false,
      // function called just before a successful submit event is sent to the server
      semanticallyStrict: false,
      // set to true to tidy up generated HTML output
      autoAdd: {
        helpBlocks: true
      },
      filter: function filter() {
        // return $(this).is(":visible"); // only validate elements you can see
        return true; // validate everything
      }
    },
    methods: {
      init: function init(options) {
        var settings = $.extend(true, {}, defaults);
        settings.options = $.extend(true, settings.options, options);
        var $siblingElements = this;
        var uniqueForms = $.unique($siblingElements.map(function () {
          return $(this).parents("form")[0];
        }).toArray());
        $(uniqueForms).bind("submit", function (e) {
          var $form = $(this);
          var warningsFound = 0;
          var $inputs = $form.find("input,textarea,select").not("[type=submit],[type=image]").filter(settings.options.filter);
          $inputs.trigger("submit.validation").trigger("validationLostFocus.validation");
          $inputs.each(function (i, el) {
            var $this = $(el),
                $controlGroup = $this.parents(".form-group").first();

            if ($controlGroup.hasClass("warning")) {
              $controlGroup.removeClass("warning").addClass("error");
              warningsFound++;
            }
          });
          $inputs.trigger("validationLostFocus.validation");

          if (warningsFound) {
            if (settings.options.preventSubmit) {
              e.preventDefault();
            }

            $form.addClass("error");

            if ($.isFunction(settings.options.submitError)) {
              settings.options.submitError($form, e, $inputs.jqBootstrapValidation("collectErrors", true));
            }
          } else {
            $form.removeClass("error");

            if ($.isFunction(settings.options.submitSuccess)) {
              settings.options.submitSuccess($form, e);
            }
          }
        });
        return this.each(function () {
          // Get references to everything we're interested in
          var $this = $(this),
              $controlGroup = $this.parents(".form-group").first(),
              $helpBlock = $controlGroup.find(".help-block").first(),
              $form = $this.parents("form").first(),
              validatorNames = []; // create message container if not exists

          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {
            $helpBlock = $('<div class="help-block" />');
            $controlGroup.find('.controls').append($helpBlock);
            createdElements.push($helpBlock[0]);
          } // =============================================================
          //                                     SNIFF HTML FOR VALIDATORS
          // =============================================================
          // *snort sniff snuffle*


          if (settings.options.sniffHtml) {
            var message = ""; // ---------------------------------------------------------
            //                                                   PATTERN
            // ---------------------------------------------------------

            if ($this.attr("pattern") !== undefined) {
              message = "Not in the expected format<!-- data-validation-pattern-message to override -->";

              if ($this.data("validationPatternMessage")) {
                message = $this.data("validationPatternMessage");
              }

              $this.data("validationPatternMessage", message);
              $this.data("validationPatternRegex", $this.attr("pattern"));
            } // ---------------------------------------------------------
            //                                                       MAX
            // ---------------------------------------------------------


            if ($this.attr("max") !== undefined || $this.attr("aria-valuemax") !== undefined) {
              var max = $this.attr("max") !== undefined ? $this.attr("max") : $this.attr("aria-valuemax");
              message = "Too high: Maximum of '" + max + "'<!-- data-validation-max-message to override -->";

              if ($this.data("validationMaxMessage")) {
                message = $this.data("validationMaxMessage");
              }

              $this.data("validationMaxMessage", message);
              $this.data("validationMaxMax", max);
            } // ---------------------------------------------------------
            //                                                       MIN
            // ---------------------------------------------------------


            if ($this.attr("min") !== undefined || $this.attr("aria-valuemin") !== undefined) {
              var min = $this.attr("min") !== undefined ? $this.attr("min") : $this.attr("aria-valuemin");
              message = "Too low: Minimum of '" + min + "'<!-- data-validation-min-message to override -->";

              if ($this.data("validationMinMessage")) {
                message = $this.data("validationMinMessage");
              }

              $this.data("validationMinMessage", message);
              $this.data("validationMinMin", min);
            } // ---------------------------------------------------------
            //                                                 MAXLENGTH
            // ---------------------------------------------------------


            if ($this.attr("maxlength") !== undefined) {
              message = "Too long: Maximum of '" + $this.attr("maxlength") + "' characters<!-- data-validation-maxlength-message to override -->";

              if ($this.data("validationMaxlengthMessage")) {
                message = $this.data("validationMaxlengthMessage");
              }

              $this.data("validationMaxlengthMessage", message);
              $this.data("validationMaxlengthMaxlength", $this.attr("maxlength"));
            } // ---------------------------------------------------------
            //                                                 MINLENGTH
            // ---------------------------------------------------------


            if ($this.attr("minlength") !== undefined) {
              message = "Too short: Minimum of '" + $this.attr("minlength") + "' characters<!-- data-validation-minlength-message to override -->";

              if ($this.data("validationMinlengthMessage")) {
                message = $this.data("validationMinlengthMessage");
              }

              $this.data("validationMinlengthMessage", message);
              $this.data("validationMinlengthMinlength", $this.attr("minlength"));
            } // ---------------------------------------------------------
            //                                                  REQUIRED
            // ---------------------------------------------------------


            if ($this.attr("required") !== undefined || $this.attr("aria-required") !== undefined) {
              message = settings.builtInValidators.required.message;

              if ($this.data("validationRequiredMessage")) {
                message = $this.data("validationRequiredMessage");
              }

              $this.data("validationRequiredMessage", message);
            } // ---------------------------------------------------------
            //                                                    NUMBER
            // ---------------------------------------------------------


            if ($this.attr("type") !== undefined && $this.attr("type").toLowerCase() === "number") {
              message = settings.builtInValidators.number.message;

              if ($this.data("validationNumberMessage")) {
                message = $this.data("validationNumberMessage");
              }

              $this.data("validationNumberMessage", message);
            } // ---------------------------------------------------------
            //                                                     EMAIL
            // ---------------------------------------------------------


            if ($this.attr("type") !== undefined && $this.attr("type").toLowerCase() === "email") {
              message = "Not a valid email address<!-- data-validator-validemail-message to override -->";

              if ($this.data("validationValidemailMessage")) {
                message = $this.data("validationValidemailMessage");
              } else if ($this.data("validationEmailMessage")) {
                message = $this.data("validationEmailMessage");
              }

              $this.data("validationValidemailMessage", message);
            } // ---------------------------------------------------------
            //                                                MINCHECKED
            // ---------------------------------------------------------


            if ($this.attr("minchecked") !== undefined) {
              message = "Not enough options checked; Minimum of '" + $this.attr("minchecked") + "' required<!-- data-validation-minchecked-message to override -->";

              if ($this.data("validationMincheckedMessage")) {
                message = $this.data("validationMincheckedMessage");
              }

              $this.data("validationMincheckedMessage", message);
              $this.data("validationMincheckedMinchecked", $this.attr("minchecked"));
            } // ---------------------------------------------------------
            //                                                MAXCHECKED
            // ---------------------------------------------------------


            if ($this.attr("maxchecked") !== undefined) {
              message = "Too many options checked; Maximum of '" + $this.attr("maxchecked") + "' required<!-- data-validation-maxchecked-message to override -->";

              if ($this.data("validationMaxcheckedMessage")) {
                message = $this.data("validationMaxcheckedMessage");
              }

              $this.data("validationMaxcheckedMessage", message);
              $this.data("validationMaxcheckedMaxchecked", $this.attr("maxchecked"));
            }
          } // =============================================================
          //                                       COLLECT VALIDATOR NAMES
          // =============================================================
          // Get named validators


          if ($this.data("validation") !== undefined) {
            validatorNames = $this.data("validation").split(",");
          } // Get extra ones defined on the element's data attributes


          $.each($this.data(), function (i, el) {
            var parts = i.replace(/([A-Z])/g, ",$1").split(",");

            if (parts[0] === "validation" && parts[1]) {
              validatorNames.push(parts[1]);
            }
          }); // =============================================================
          //                                     NORMALISE VALIDATOR NAMES
          // =============================================================

          var validatorNamesToInspect = validatorNames;
          var newValidatorNamesToInspect = [];

          do // repeatedly expand 'shortcut' validators into their real validators
          {
            // Uppercase only the first letter of each name
            $.each(validatorNames, function (i, el) {
              validatorNames[i] = formatValidatorName(el);
            }); // Remove duplicate validator names

            validatorNames = $.unique(validatorNames); // Pull out the new validator names from each shortcut

            newValidatorNamesToInspect = [];
            $.each(validatorNamesToInspect, function (i, el) {
              if ($this.data("validation" + el + "Shortcut") !== undefined) {
                // Are these custom validators?
                // Pull them out!
                $.each($this.data("validation" + el + "Shortcut").split(","), function (i2, el2) {
                  newValidatorNamesToInspect.push(el2);
                });
              } else if (settings.builtInValidators[el.toLowerCase()]) {
                // Is this a recognised built-in?
                // Pull it out!
                var validator = settings.builtInValidators[el.toLowerCase()];

                if (validator.type.toLowerCase() === "shortcut") {
                  $.each(validator.shortcut.split(","), function (i, el) {
                    el = formatValidatorName(el);
                    newValidatorNamesToInspect.push(el);
                    validatorNames.push(el);
                  });
                }
              }
            });
            validatorNamesToInspect = newValidatorNamesToInspect;
          } while (validatorNamesToInspect.length > 0); // =============================================================
          //                                       SET UP VALIDATOR ARRAYS
          // =============================================================


          var validators = {};
          $.each(validatorNames, function (i, el) {
            // Set up the 'override' message
            var message = $this.data("validation" + el + "Message");
            var hasOverrideMessage = message !== undefined;
            var foundValidator = false;
            message = message ? message : "'" + el + "' validation failed <!-- Add attribute 'data-validation-" + el.toLowerCase() + "-message' to input to change this message -->";
            $.each(settings.validatorTypes, function (validatorType, validatorTemplate) {
              if (validators[validatorType] === undefined) {
                validators[validatorType] = [];
              }

              if (!foundValidator && $this.data("validation" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {
                validators[validatorType].push($.extend(true, {
                  name: formatValidatorName(validatorTemplate.name),
                  message: message
                }, validatorTemplate.init($this, el)));
                foundValidator = true;
              }
            });

            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {
              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);

              if (hasOverrideMessage) {
                validator.message = message;
              }

              var validatorType = validator.type.toLowerCase();

              if (validatorType === "shortcut") {
                foundValidator = true;
              } else {
                $.each(settings.validatorTypes, function (validatorTemplateType, validatorTemplate) {
                  if (validators[validatorTemplateType] === undefined) {
                    validators[validatorTemplateType] = [];
                  }

                  if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {
                    $this.data("validation" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);
                    validators[validatorType].push($.extend(validator, validatorTemplate.init($this, el)));
                    foundValidator = true;
                  }
                });
              }
            }

            if (!foundValidator) {
              $.error("Cannot find validation info for '" + el + "'");
            }
          }); // =============================================================
          //                                         STORE FALLBACK VALUES
          // =============================================================

          $helpBlock.data("original-contents", $helpBlock.data("original-contents") ? $helpBlock.data("original-contents") : $helpBlock.html());
          $helpBlock.data("original-role", $helpBlock.data("original-role") ? $helpBlock.data("original-role") : $helpBlock.attr("role"));
          $controlGroup.data("original-classes", $controlGroup.data("original-clases") ? $controlGroup.data("original-classes") : $controlGroup.attr("class"));
          $this.data("original-aria-invalid", $this.data("original-aria-invalid") ? $this.data("original-aria-invalid") : $this.attr("aria-invalid")); // =============================================================
          //                                                    VALIDATION
          // =============================================================

          $this.bind("validation.validation", function (event, params) {
            var value = getValue($this); // Get a list of the errors to apply

            var errorsFound = [];
            $.each(validators, function (validatorType, validatorTypeArray) {
              if (value || value.length || params && params.includeEmpty || !!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting) {
                $.each(validatorTypeArray, function (i, validator) {
                  if (settings.validatorTypes[validatorType].validate($this, value, validator)) {
                    errorsFound.push(validator.message);
                  }
                });
              }
            });
            return errorsFound;
          });
          $this.bind("getValidators.validation", function () {
            return validators;
          }); // =============================================================
          //                                             WATCH FOR CHANGES
          // =============================================================

          $this.bind("submit.validation", function () {
            return $this.triggerHandler("change.validation", {
              submitting: true
            });
          });
          $this.bind(["keyup", "focus", "blur", "click", "keydown", "keypress", "change"].join(".validation ") + ".validation", function (e, params) {
            var value = getValue($this);
            var errorsFound = [];
            $controlGroup.find("input,textarea,select").each(function (i, el) {
              var oldCount = errorsFound.length;
              $.each($(el).triggerHandler("validation.validation", params), function (j, message) {
                errorsFound.push(message);
              });

              if (errorsFound.length > oldCount) {
                $(el).attr("aria-invalid", "true");
              } else {
                var original = $this.data("original-aria-invalid");
                $(el).attr("aria-invalid", original !== undefined ? original : false);
              }
            });
            $form.find("input,select,textarea").not($this).not("[name=\"" + $this.attr("name") + "\"]").trigger("validationLostFocus.validation");
            errorsFound = $.unique(errorsFound.sort()); // Were there any errors?

            if (errorsFound.length) {
              // Better flag it up as a warning.
              $controlGroup.removeClass("success error").addClass("warning"); // How many errors did we find?

              if (settings.options.semanticallyStrict && errorsFound.length === 1) {
                // Only one? Being strict? Just output it.
                $helpBlock.html(errorsFound[0] + (settings.options.prependExistingHelpBlock ? $helpBlock.data("original-contents") : ""));
              } else {
                // Multiple? Being sloppy? Glue them together into an UL.
                $helpBlock.html("<ul role=\"alert\"><li>" + errorsFound.join("</li><li>") + "</li></ul>" + (settings.options.prependExistingHelpBlock ? $helpBlock.data("original-contents") : ""));
              }
            } else {
              $controlGroup.removeClass("warning error success");

              if (value.length > 0) {
                $controlGroup.addClass("success");
              }

              $helpBlock.html($helpBlock.data("original-contents"));
            }

            if (e.type === "blur") {
              $controlGroup.removeClass("success");
            }
          });
          $this.bind("validationLostFocus.validation", function () {
            $controlGroup.removeClass("success");
          });
        });
      },
      destroy: function destroy() {
        return this.each(function () {
          var $this = $(this),
              $controlGroup = $this.parents(".form-group").first(),
              $helpBlock = $controlGroup.find(".help-block").first(); // remove our events

          $this.unbind('.validation'); // events are namespaced.
          // reset help text

          $helpBlock.html($helpBlock.data("original-contents")); // reset classes

          $controlGroup.attr("class", $controlGroup.data("original-classes")); // reset aria

          $this.attr("aria-invalid", $this.data("original-aria-invalid")); // reset role

          $helpBlock.attr("role", $this.data("original-role")); // remove all elements we created

          if (createdElements.indexOf($helpBlock[0]) > -1) {
            $helpBlock.remove();
          }
        });
      },
      collectErrors: function collectErrors(includeEmpty) {
        var errorMessages = {};
        this.each(function (i, el) {
          var $el = $(el);
          var name = $el.attr("name");
          var errors = $el.triggerHandler("validation.validation", {
            includeEmpty: true
          });
          errorMessages[name] = $.extend(true, errors, errorMessages[name]);
        });
        $.each(errorMessages, function (i, el) {
          if (el.length === 0) {
            delete errorMessages[i];
          }
        });
        return errorMessages;
      },
      hasErrors: function hasErrors() {
        var errorMessages = [];
        this.each(function (i, el) {
          errorMessages = errorMessages.concat($(el).triggerHandler("getValidators.validation") ? $(el).triggerHandler("validation.validation", {
            submitting: true
          }) : []);
        });
        return errorMessages.length > 0;
      },
      override: function override(newDefaults) {
        defaults = $.extend(true, defaults, newDefaults);
      }
    },
    validatorTypes: {
      callback: {
        name: "callback",
        init: function init($this, name) {
          return {
            validatorName: name,
            callback: $this.data("validation" + name + "Callback"),
            lastValue: $this.val(),
            lastValid: true,
            lastFinished: true
          };
        },
        validate: function validate($this, value, validator) {
          if (validator.lastValue === value && validator.lastFinished) {
            return !validator.lastValid;
          }

          if (validator.lastFinished === true) {
            validator.lastValue = value;
            validator.lastValid = true;
            validator.lastFinished = false;
            var rrjqbvValidator = validator;
            var rrjqbvThis = $this;
            executeFunctionByName(validator.callback, window, $this, value, function (data) {
              if (rrjqbvValidator.lastValue === data.value) {
                rrjqbvValidator.lastValid = data.valid;

                if (data.message) {
                  rrjqbvValidator.message = data.message;
                }

                rrjqbvValidator.lastFinished = true;
                rrjqbvThis.data("validation" + rrjqbvValidator.validatorName + "Message", rrjqbvValidator.message); // Timeout is set to avoid problems with the events being considered 'already fired'

                setTimeout(function () {
                  rrjqbvThis.trigger("change.validation");
                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
              }
            });
          }

          return false;
        }
      },
      ajax: {
        name: "ajax",
        init: function init($this, name) {
          return {
            validatorName: name,
            url: $this.data("validation" + name + "Ajax"),
            lastValue: $this.val(),
            lastValid: true,
            lastFinished: true
          };
        },
        validate: function validate($this, value, validator) {
          if ("" + validator.lastValue === "" + value && validator.lastFinished === true) {
            return validator.lastValid === false;
          }

          if (validator.lastFinished === true) {
            validator.lastValue = value;
            validator.lastValid = true;
            validator.lastFinished = false;
            $.ajax({
              url: validator.url,
              data: "value=" + value + "&field=" + $this.attr("name"),
              dataType: "json",
              success: function success(data) {
                if ("" + validator.lastValue === "" + data.value) {
                  validator.lastValid = !!data.valid;

                  if (data.message) {
                    validator.message = data.message;
                  }

                  validator.lastFinished = true;
                  $this.data("validation" + validator.validatorName + "Message", validator.message); // Timeout is set to avoid problems with the events being considered 'already fired'

                  setTimeout(function () {
                    $this.trigger("change.validation");
                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
                }
              },
              failure: function failure() {
                validator.lastValid = true;
                validator.message = "ajax call failed";
                validator.lastFinished = true;
                $this.data("validation" + validator.validatorName + "Message", validator.message); // Timeout is set to avoid problems with the events being considered 'already fired'

                setTimeout(function () {
                  $this.trigger("change.validation");
                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
              }
            });
          }

          return false;
        }
      },
      regex: {
        name: "regex",
        init: function init($this, name) {
          return {
            regex: regexFromString($this.data("validation" + name + "Regex"))
          };
        },
        validate: function validate($this, value, validator) {
          return !validator.regex.test(value) && !validator.negative || validator.regex.test(value) && validator.negative;
        }
      },
      required: {
        name: "required",
        init: function init($this, name) {
          return {};
        },
        validate: function validate($this, value, validator) {
          return !!(value.length === 0 && !validator.negative) || !!(value.length > 0 && validator.negative);
        },
        blockSubmit: true
      },
      match: {
        name: "match",
        init: function init($this, name) {
          var element = $this.parents("form").first().find("[name=\"" + $this.data("validation" + name + "Match") + "\"]").first();
          element.bind("validation.validation", function () {
            $this.trigger("change.validation", {
              submitting: true
            });
          });
          return {
            "element": element
          };
        },
        validate: function validate($this, value, validator) {
          return value !== validator.element.val() && !validator.negative || value === validator.element.val() && validator.negative;
        },
        blockSubmit: true
      },
      max: {
        name: "max",
        init: function init($this, name) {
          return {
            max: $this.data("validation" + name + "Max")
          };
        },
        validate: function validate($this, value, validator) {
          return parseFloat(value, 10) > parseFloat(validator.max, 10) && !validator.negative || parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative;
        }
      },
      min: {
        name: "min",
        init: function init($this, name) {
          return {
            min: $this.data("validation" + name + "Min")
          };
        },
        validate: function validate($this, value, validator) {
          return parseFloat(value) < parseFloat(validator.min) && !validator.negative || parseFloat(value) >= parseFloat(validator.min) && validator.negative;
        }
      },
      maxlength: {
        name: "maxlength",
        init: function init($this, name) {
          return {
            maxlength: $this.data("validation" + name + "Maxlength")
          };
        },
        validate: function validate($this, value, validator) {
          return value.length > validator.maxlength && !validator.negative || value.length <= validator.maxlength && validator.negative;
        }
      },
      minlength: {
        name: "minlength",
        init: function init($this, name) {
          return {
            minlength: $this.data("validation" + name + "Minlength")
          };
        },
        validate: function validate($this, value, validator) {
          return value.length < validator.minlength && !validator.negative || value.length >= validator.minlength && validator.negative;
        }
      },
      maxchecked: {
        name: "maxchecked",
        init: function init($this, name) {
          var elements = $this.parents("form").first().find("[name=\"" + $this.attr("name") + "\"]");
          elements.bind("click.validation", function () {
            $this.trigger("change.validation", {
              includeEmpty: true
            });
          });
          return {
            maxchecked: $this.data("validation" + name + "Maxchecked"),
            elements: elements
          };
        },
        validate: function validate($this, value, validator) {
          return validator.elements.filter(":checked").length > validator.maxchecked && !validator.negative || validator.elements.filter(":checked").length <= validator.maxchecked && validator.negative;
        },
        blockSubmit: true
      },
      minchecked: {
        name: "minchecked",
        init: function init($this, name) {
          var elements = $this.parents("form").first().find("[name=\"" + $this.attr("name") + "\"]");
          elements.bind("click.validation", function () {
            $this.trigger("change.validation", {
              includeEmpty: true
            });
          });
          return {
            minchecked: $this.data("validation" + name + "Minchecked"),
            elements: elements
          };
        },
        validate: function validate($this, value, validator) {
          return validator.elements.filter(":checked").length < validator.minchecked && !validator.negative || validator.elements.filter(":checked").length >= validator.minchecked && validator.negative;
        },
        blockSubmit: true
      }
    },
    builtInValidators: {
      email: {
        name: "Email",
        type: "shortcut",
        shortcut: "validemail"
      },
      validemail: {
        name: "Validemail",
        type: "regex",
        regex: "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\.[A-Za-z]{2,4}",
        message: "Not a valid email address<!-- data-validator-validemail-message to override -->"
      },
      passwordagain: {
        name: "Passwordagain",
        type: "match",
        match: "password",
        message: "Does not match the given password<!-- data-validator-paswordagain-message to override -->"
      },
      positive: {
        name: "Positive",
        type: "shortcut",
        shortcut: "number,positivenumber"
      },
      negative: {
        name: "Negative",
        type: "shortcut",
        shortcut: "number,negativenumber"
      },
      number: {
        name: "Number",
        type: "regex",
        regex: "([+-]?\\\d+(\\\.\\\d*)?([eE][+-]?[0-9]+)?)?",
        message: "Must be a number<!-- data-validator-number-message to override -->"
      },
      integer: {
        name: "Integer",
        type: "regex",
        regex: "[+-]?\\\d+",
        message: "No decimal places allowed<!-- data-validator-integer-message to override -->"
      },
      positivenumber: {
        name: "Positivenumber",
        type: "min",
        min: 0,
        message: "Must be a positive number<!-- data-validator-positivenumber-message to override -->"
      },
      negativenumber: {
        name: "Negativenumber",
        type: "max",
        max: 0,
        message: "Must be a negative number<!-- data-validator-negativenumber-message to override -->"
      },
      required: {
        name: "Required",
        type: "required",
        message: "This is required<!-- data-validator-required-message to override -->"
      },
      checkone: {
        name: "Checkone",
        type: "minchecked",
        minchecked: 1,
        message: "Check at least one option<!-- data-validation-checkone-message to override -->"
      }
    }
  };

  var formatValidatorName = function formatValidatorName(name) {
    return name.toLowerCase().replace(/(^|\s)([a-z])/g, function (m, p1, p2) {
      return p1 + p2.toUpperCase();
    });
  };

  var getValue = function getValue($this) {
    // Extract the value we're talking about
    var value = $this.val();
    var type = $this.attr("type");

    if (type === "checkbox") {
      value = $this.is(":checked") ? value : "";
    }

    if (type === "radio") {
      value = $('input[name="' + $this.attr("name") + '"]:checked').length > 0 ? value : "";
    }

    return value;
  };

  function regexFromString(inputstring) {
    return new RegExp("^" + inputstring + "$");
  }
  /**
   * Thanks to Jason Bunting via StackOverflow.com
   *
   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910
   * Short link: http://tinyurl.com/executeFunctionByName
  **/


  function executeFunctionByName(functionName, context
  /*, args*/
  ) {
    var args = Array.prototype.slice.call(arguments).splice(2);
    var namespaces = functionName.split(".");
    var func = namespaces.pop();

    for (var i = 0; i < namespaces.length; i++) {
      context = context[namespaces[i]];
    }

    return context[func].apply(this, args);
  }

  $.fn.jqBootstrapValidation = function (method) {
    if (defaults.methods[method]) {
      return defaults.methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (_typeof(method) === 'object' || !method) {
      return defaults.methods.init.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.jqBootstrapValidation');
      return null;
    }
  };

  $.jqBootstrapValidation = function (options) {
    $(":input").not("[type=image],[type=submit]").jqBootstrapValidation.apply(this, arguments);
  };
})(jQuery);

},{}],5:[function(require,module,exports){
"use strict";

module.exports = require('./show-more.js');

},{"./show-more.js":6}],6:[function(require,module,exports){
"use strict";
/* eslint-disable no-unused-vars */

/* eslint-disable no-console */

var height;

var FadeBar = function FadeBar() {};

document.addEventListener('DOMContentLoaded', FadeBar = function FadeBar() {
  var VERSION = '0.0.1';
  var NAME = 'ShowMore_FadeBar';
  console.log("Now using ".concat(NAME, " version ").concat(VERSION)); // prepare the style tage for some css luvin

  var styleEl = document.createElement('style');
  var headEl = document.head || document.getElementsByTagName('head')[0];
  var options = settings();
  var cssText = FadeBarCSS(options); // console.log(options);

  styleEl.setAttribute('id', 'fbCSS');
  styleEl.textContent = cssText;
  headEl.append(styleEl);

  try {
    var theFaders = Array.prototype.slice.call(document.querySelectorAll('.j-showmore'));
    theFaders.forEach(function (node) {
      height = node.offsetHeight;
      console.log(height);
      var theContainer = node;
      var theFadeBar = document.createElement('div');
      var theShowMoreButton = document.createElement('button');
      theFadeBar.classList.add('j-fader');
      theShowMoreButton.classList.add('j-fader_button');
      theShowMoreButton.innerText = options.fbInitButtonText;
      theFadeBar.appendChild(theShowMoreButton);
      theContainer.appendChild(theFadeBar);
      theShowMoreButton.addEventListener('click', function (ev) {
        ev.preventDefault();
        ev.target.classList.toggle('is-visible');
        ev.target.parentNode.classList.toggle('is-visible');
        ev.target.closest('.j-showmore').classList.toggle('is-visible');

        if (ev.target.classList.contains('is-visible')) {
          ev.target.parentElement.style.height = height;
        }

        if (ev.target.innerText === options.fbInitButtonText) {
          ev.target.innerText = options.fbOpenButtonText;
        } else {
          ev.target.innerText = options.fbInitButtonText;
        }
      }, false);
      theShowMoreButton.addEventListener('mouseout', function (ev) {
        ev.target.blur();
      });
    });
  } catch (err) {
    console.error(err);
  }
}); // module.exports = FadeBar;

function appendCSS(styles) {
  return function () {
    var styleEl = document.createElement('style');
    var headEl = document.head || document.getElementsByTagName('head')[0]; // const cssStyles = css

    styleEl.textContent = styles;
    headEl.appendChild(styleEl);
    styleEl.type = 'text/css';

    if (styleEl.styleSheet) {
      // This is required for IE8 and below.
      styleEl.styleSheet.cssText = styles;
    } else {
      styleEl.appendChild(document.createTextNode(styles));
    }
  };
}

function defaults() {
  return {
    fbWidth: '100%',
    fbHeight: '50px',
    fbBoxHeight: '300px',
    fbStartColor: 'rgba(0,0,0,0)',
    fbEndColor: 'rgba(0,0,0,0)',
    fbBottomBorder: '5px solid #f2f2f2',
    fbInitButtonText: 'Show More',
    fbOpenButtonText: 'Show Less',
    fbButtonPosition: 'center',
    fbButtonBackground: '#fff',
    fbButtonBackgroundHover: '#fff;',
    fbButtonBackgroundFocus: '#fff;',
    fbButtonTextColor: '#333',
    fbButtonTextColorHover: '#333',
    fbButtonLineHeight: '1',
    fbButtonTextColorFocus: '#333',
    fbButtonBorderColor: '#fff',
    fbButtonBorderColorFocus: '#dedede',
    fbButtonWidth: '120px',
    fbButtonHeight: '20px',
    fbClassList: 'u-text-center',
    fbBtnClassList: 'btn btn-primary mx-auto'
  };
}

function settings(opts) {
  // let ShowMoreSettings = typeof null;
  var fbCon = [];

  if (typeof ShowMoreSettings === 'undefined') {
    fbCon = defaults();
  } else {
    fbCon = ShowMoreSettings;
  }

  var styles = {
    classBase: 'button-show-more',
    classActive: 'is-fully-opened',
    classFocused: 'is-focused',
    fadebarClassList: 'animate text-center',
    fadebarbButtonClassList: 'btn mx-auto'
  };
  var fbActionBtn = {
    showMore: 'Show More',
    showLess: 'Show Less',
    positionX: 'center',
    positionY: 'bottom'
  };
  console.log('styles:');
  console.log(styles);
  console.log('fbActionBtn:');
  console.log(fbActionBtn);
  console.log('fbCon:');
  console.log(fbCon);

  try {
    var options = Object.assign(defaults(), styles, fbActionBtn, fbCon); // cssBuilder(options);

    return options;
  } catch (e) {
    console.log('object assign error: ' + e);
  }
}

var FadeBarCSS = function FadeBarCSS() {}; // document.addEventListener('DOMContentLoaded', FadeBarCSS = () => {


FadeBarCSS = function FadeBarCSS(options) {
  var cssValues = options;
  var fbCSS = "\n    .j-showmore {\n      position: relative;\n      height: ".concat(cssValues.fbBoxHeight, ";\n      overflow: hidden;\n      padding-bottom: 60px;\n      -webkit-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n         -moz-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n           -o-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n              transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n\n      -webkit-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n        -moz-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n          -o-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n              transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n    }\n    .j-showmore.is-visible {\n      height: 100%;\n      -webkit-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n         -moz-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n           -o-transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n              transition: all 500ms cubic-bezier(0.770, 0.000, 0.155, 1.000);\n\n      -webkit-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n        -moz-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n          -o-transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n              transition-timing-function: cubic-bezier(0.770, 0.000, 0.155, 1.000);\n    }\n    .j-showmore .j-fader {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      z-index: 100;\n      width: ").concat(cssValues.fbWidth, ";\n      height: ").concat(cssValues.fbHeight, ";\n      text-align: center;\n      vertical-align: bottom;\n      cursor: pointer;\n      border-bottom: ").concat(cssValues.fbBottomBorder, ";\n      background: -moz-linear-gradient(top, ").concat(cssValues.fbStartColor, ", ").concat(cssValues.fbEndColor, " 60%);\n      background: -webkit-linear-gradient(top, ").concat(cssValues.fbStartColor, ", ").concat(cssValues.fbEndColor, " 60%);\n      background: linear-gradient(to bottom, ").concat(cssValues.fbStartColor, ", ").concat(cssValues.fbEndColor, " 60%);\n      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='").concat(cssValues.fbStartColor, "', endColorstr='").concat(cssValues.fbEndColor, "',GradientType=0 );\n      box-shadow: 0px -2px 4px 0px rgba(0, 0, 0, 0.45);\n    }\n    .hs-code .j-fader {\n      border-bottom: 5px solid #f2f2f2;\n      background: -moz-linear-gradient(top, rgba(255, 255, 255, 0.6), #ffffff 60%);\n      background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0.6), #ffffff 60%);\n      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), #ffffff 60%);\n      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00ffffff', endColorstr='#ffffff',GradientType=0 );\n    }\n    .j-showmore .j-fader_button {\n      display: inline-block;\n      cursor: pointer;\n      position: absolute;\n      bottom: -6px;\n      left: 50%;\n      margin: 0 auto;\n      padding: 2px 6px 4px 6px;\n      background-color: ").concat(cssValues.fbButtonBackground, ";\n      border: 1px solid ").concat(cssValues.fbButtonBorderColor, ";\n      border-bottom: 5px solid ").concat(cssValues.fbButtonBorderColor, ";\n      font-size: 0.8rem;\n      color: ").concat(cssValues.fbButtonTextColor, ";\n      line-height: ").concat(cssValues.fbButtonLineHeight, ";\n      width: ").concat(cssValues.fbButtonWidth, ";\n      height: ").concat(cssValues.fbButtonHeight, ";\n      white-space: nowrap;\n      transform: translateX(-50%);\n      box-shadow: 0px -2px 4px 0px rgba(0, 0, 0, 0.45);\n    }\n    .j-showmore .j-fader_button::before {\n      display: block;\n      position: absolute;\n      left: 50%;\n      top: 5%;\n      z-index: 100;\n      transform: translate(-50%);\n      width: 100%;\n      content: '").concat(cssValues.fbInitButtonText, "';\n      font-size: 0.75rem;\n    }\n    .j-showmore .j-fader_button.is-visible::before {\n      content: '").concat(cssValues.fbOpenButtonText, "';\n    }\n    .j-showmore .j-fader_button:hover {\n      background-color: ").concat(cssValues.fbButtonBackgroundHover, ";\n      color: ").concat(cssValues.fbButtonTextColorHover, ";\n    }\n    .j-showmore .j-fader_button:focus {\n      outline-color: ").concat(cssValues.fbButtonBorderColorFocus, ";\n      background-color: ").concat(cssValues.fbButtonBorderColorFocus, ";\n      color: ").concat(cssValues.fbButtonTextColorFocus, ";\n      border: 1px solid ").concat(cssValues.fbButtonBorderColorFocus, ";\n      border-bottom: 5px solid ").concat(cssValues.fbButtonBorderColorFocus, ";\n      box-shadow: unset;\n    }\n    .j-showmore .j-fader_button.is-visible {\n      background-color: ").concat(cssValues.fbButtonBorderColorFocus, ";\n      color: ").concat(cssValues.fbButtonTextColorFocus, ";\n      border: 1px solid ").concat(cssValues.fbButtonBorderColorFocus, ";\n      border-bottom: 5px solid ").concat(cssValues.fbButtonBorderColorFocus, ";\n    }\n    .j-showmore .j-fader.is-visible {\n      border-bottom: 5px solid ").concat(cssValues.fbButtonBorderColorFocus, ";\n    }\n    @keyframes slideOpen {\n      from { height: 300px; }\n      to { height: 100%; }\n    }\n    @keyframes slideClosed {\n      from { height: 100%; }\n      to { height: 300px; }\n    }\n  "); // appendCSS(fbCSS)

  return fbCSS;
};

},{}],7:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}
/**
 * Swiper 6.1.1
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://swiperjs.com
 *
 * Copyright 2014-2020 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: July 31, 2020
 */


!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).Swiper = t();
}(void 0, function () {
  "use strict";

  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var s = t[i];
      s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s);
    }
  }

  function t() {
    return (t = Object.assign || function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var i = arguments[t];

        for (var s in i) {
          Object.prototype.hasOwnProperty.call(i, s) && (e[s] = i[s]);
        }
      }

      return e;
    }).apply(this, arguments);
  }

  function i(e) {
    return null !== e && "object" == _typeof(e) && "constructor" in e && e.constructor === Object;
  }

  function s(e, t) {
    void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach(function (a) {
      void 0 === e[a] ? e[a] = t[a] : i(t[a]) && i(e[a]) && Object.keys(t[a]).length > 0 && s(e[a], t[a]);
    });
  }

  var a = {
    body: {},
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    activeElement: {
      blur: function blur() {},
      nodeName: ""
    },
    querySelector: function querySelector() {
      return null;
    },
    querySelectorAll: function querySelectorAll() {
      return [];
    },
    getElementById: function getElementById() {
      return null;
    },
    createEvent: function createEvent() {
      return {
        initEvent: function initEvent() {}
      };
    },
    createElement: function createElement() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute: function setAttribute() {},
        getElementsByTagName: function getElementsByTagName() {
          return [];
        }
      };
    },
    createElementNS: function createElementNS() {
      return {};
    },
    importNode: function importNode() {
      return null;
    },
    location: {
      hash: "",
      host: "",
      hostname: "",
      href: "",
      origin: "",
      pathname: "",
      protocol: "",
      search: ""
    }
  };

  function r() {
    var e = "undefined" != typeof document ? document : {};
    return s(e, a), e;
  }

  var n = {
    document: a,
    navigator: {
      userAgent: ""
    },
    location: {
      hash: "",
      host: "",
      hostname: "",
      href: "",
      origin: "",
      pathname: "",
      protocol: "",
      search: ""
    },
    history: {
      replaceState: function replaceState() {},
      pushState: function pushState() {},
      go: function go() {},
      back: function back() {}
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    getComputedStyle: function getComputedStyle() {
      return {
        getPropertyValue: function getPropertyValue() {
          return "";
        }
      };
    },
    Image: function Image() {},
    Date: function Date() {},
    screen: {},
    setTimeout: function setTimeout() {},
    clearTimeout: function clearTimeout() {},
    matchMedia: function matchMedia() {
      return {};
    },
    requestAnimationFrame: function requestAnimationFrame(e) {
      return "undefined" == typeof setTimeout ? (e(), null) : setTimeout(e, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame(e) {
      "undefined" != typeof setTimeout && clearTimeout(e);
    }
  };

  function l() {
    var e = "undefined" != typeof window ? window : {};
    return s(e, n), e;
  }

  function o(e) {
    return (o = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
      return e.__proto__ || Object.getPrototypeOf(e);
    })(e);
  }

  function d(e, t) {
    return (d = Object.setPrototypeOf || function (e, t) {
      return e.__proto__ = t, e;
    })(e, t);
  }

  function h() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ("function" == typeof Proxy) return !0;

    try {
      return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
    } catch (e) {
      return !1;
    }
  }

  function p(e, t, i) {
    return (p = h() ? Reflect.construct : function (e, t, i) {
      var s = [null];
      s.push.apply(s, t);
      var a = new (Function.bind.apply(e, s))();
      return i && d(a, i.prototype), a;
    }).apply(null, arguments);
  }

  function u(e) {
    var t = "function" == typeof Map ? new Map() : void 0;
    return (u = function u(e) {
      if (null === e || (i = e, -1 === Function.toString.call(i).indexOf("[native code]"))) return e;
      var i;
      if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");

      if (void 0 !== t) {
        if (t.has(e)) return t.get(e);
        t.set(e, s);
      }

      function s() {
        return p(e, arguments, o(this).constructor);
      }

      return s.prototype = Object.create(e.prototype, {
        constructor: {
          value: s,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), d(s, e);
    })(e);
  }

  var c = function (e) {
    var t, i;

    function s(t) {
      var i, s, a;
      return i = e.call.apply(e, [this].concat(t)) || this, s = function (e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }(i), a = s.__proto__, Object.defineProperty(s, "__proto__", {
        get: function get() {
          return a;
        },
        set: function set(e) {
          a.__proto__ = e;
        }
      }), i;
    }

    return i = e, (t = s).prototype = Object.create(i.prototype), t.prototype.constructor = t, t.__proto__ = i, s;
  }(u(Array));

  function v(e) {
    void 0 === e && (e = []);
    var t = [];
    return e.forEach(function (e) {
      Array.isArray(e) ? t.push.apply(t, v(e)) : t.push(e);
    }), t;
  }

  function f(e, t) {
    return Array.prototype.filter.call(e, t);
  }

  function m(e, t) {
    var i = l(),
        s = r(),
        a = [];
    if (!t && e instanceof c) return e;
    if (!e) return new c(a);

    if ("string" == typeof e) {
      var n = e.trim();

      if (n.indexOf("<") >= 0 && n.indexOf(">") >= 0) {
        var o = "div";
        0 === n.indexOf("<li") && (o = "ul"), 0 === n.indexOf("<tr") && (o = "tbody"), 0 !== n.indexOf("<td") && 0 !== n.indexOf("<th") || (o = "tr"), 0 === n.indexOf("<tbody") && (o = "table"), 0 === n.indexOf("<option") && (o = "select");
        var d = s.createElement(o);
        d.innerHTML = n;

        for (var h = 0; h < d.childNodes.length; h += 1) {
          a.push(d.childNodes[h]);
        }
      } else a = function (e, t) {
        if ("string" != typeof e) return [e];

        for (var i = [], s = t.querySelectorAll(e), a = 0; a < s.length; a += 1) {
          i.push(s[a]);
        }

        return i;
      }(e.trim(), t || s);
    } else if (e.nodeType || e === i || e === s) a.push(e);else if (Array.isArray(e)) {
      if (e instanceof c) return e;
      a = e;
    }

    return new c(function (e) {
      for (var t = [], i = 0; i < e.length; i += 1) {
        -1 === t.indexOf(e[i]) && t.push(e[i]);
      }

      return t;
    }(a));
  }

  m.fn = c.prototype;
  var g,
      w,
      b,
      y = {
    addClass: function addClass() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = v(t.map(function (e) {
        return e.split(" ");
      }));
      return this.forEach(function (e) {
        var t;
        (t = e.classList).add.apply(t, s);
      }), this;
    },
    removeClass: function removeClass() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = v(t.map(function (e) {
        return e.split(" ");
      }));
      return this.forEach(function (e) {
        var t;
        (t = e.classList).remove.apply(t, s);
      }), this;
    },
    hasClass: function hasClass() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = v(t.map(function (e) {
        return e.split(" ");
      }));
      return f(this, function (e) {
        return s.filter(function (t) {
          return e.classList.contains(t);
        }).length > 0;
      }).length > 0;
    },
    toggleClass: function toggleClass() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = v(t.map(function (e) {
        return e.split(" ");
      }));
      this.forEach(function (e) {
        s.forEach(function (t) {
          e.classList.toggle(t);
        });
      });
    },
    attr: function attr(e, t) {
      if (1 === arguments.length && "string" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;

      for (var i = 0; i < this.length; i += 1) {
        if (2 === arguments.length) this[i].setAttribute(e, t);else for (var s in e) {
          this[i][s] = e[s], this[i].setAttribute(s, e[s]);
        }
      }

      return this;
    },
    removeAttr: function removeAttr(e) {
      for (var t = 0; t < this.length; t += 1) {
        this[t].removeAttribute(e);
      }

      return this;
    },
    transform: function transform(e) {
      for (var t = 0; t < this.length; t += 1) {
        this[t].style.transform = e;
      }

      return this;
    },
    transition: function transition(e) {
      for (var t = 0; t < this.length; t += 1) {
        this[t].style.transition = "string" != typeof e ? e + "ms" : e;
      }

      return this;
    },
    on: function on() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = t[0],
          a = t[1],
          r = t[2],
          n = t[3];

      function l(e) {
        var t = e.target;

        if (t) {
          var i = e.target.dom7EventData || [];
          if (i.indexOf(e) < 0 && i.unshift(e), m(t).is(a)) r.apply(t, i);else for (var s = m(t).parents(), n = 0; n < s.length; n += 1) {
            m(s[n]).is(a) && r.apply(s[n], i);
          }
        }
      }

      function o(e) {
        var t = e && e.target && e.target.dom7EventData || [];
        t.indexOf(e) < 0 && t.unshift(e), r.apply(this, t);
      }

      "function" == typeof t[1] && (s = t[0], r = t[1], n = t[2], a = void 0), n || (n = !1);

      for (var d, h = s.split(" "), p = 0; p < this.length; p += 1) {
        var u = this[p];
        if (a) for (d = 0; d < h.length; d += 1) {
          var c = h[d];
          u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[c] || (u.dom7LiveListeners[c] = []), u.dom7LiveListeners[c].push({
            listener: r,
            proxyListener: l
          }), u.addEventListener(c, l, n);
        } else for (d = 0; d < h.length; d += 1) {
          var v = h[d];
          u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({
            listener: r,
            proxyListener: o
          }), u.addEventListener(v, o, n);
        }
      }

      return this;
    },
    off: function off() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {
        t[i] = arguments[i];
      }

      var s = t[0],
          a = t[1],
          r = t[2],
          n = t[3];
      "function" == typeof t[1] && (s = t[0], r = t[1], n = t[2], a = void 0), n || (n = !1);

      for (var l = s.split(" "), o = 0; o < l.length; o += 1) {
        for (var d = l[o], h = 0; h < this.length; h += 1) {
          var p = this[h],
              u = void 0;
          if (!a && p.dom7Listeners ? u = p.dom7Listeners[d] : a && p.dom7LiveListeners && (u = p.dom7LiveListeners[d]), u && u.length) for (var c = u.length - 1; c >= 0; c -= 1) {
            var v = u[c];
            r && v.listener === r || r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (p.removeEventListener(d, v.proxyListener, n), u.splice(c, 1)) : r || (p.removeEventListener(d, v.proxyListener, n), u.splice(c, 1));
          }
        }
      }

      return this;
    },
    trigger: function trigger() {
      for (var e = l(), t = arguments.length, i = new Array(t), s = 0; s < t; s++) {
        i[s] = arguments[s];
      }

      for (var a = i[0].split(" "), r = i[1], n = 0; n < a.length; n += 1) {
        for (var o = a[n], d = 0; d < this.length; d += 1) {
          var h = this[d];

          if (e.CustomEvent) {
            var p = new e.CustomEvent(o, {
              detail: r,
              bubbles: !0,
              cancelable: !0
            });
            h.dom7EventData = i.filter(function (e, t) {
              return t > 0;
            }), h.dispatchEvent(p), h.dom7EventData = [], delete h.dom7EventData;
          }
        }
      }

      return this;
    },
    transitionEnd: function transitionEnd(e) {
      var t = this;
      return e && t.on("transitionend", function i(s) {
        s.target === this && (e.call(this, s), t.off("transitionend", i));
      }), this;
    },
    outerWidth: function outerWidth(e) {
      if (this.length > 0) {
        if (e) {
          var t = this.styles();
          return this[0].offsetWidth + parseFloat(t.getPropertyValue("margin-right")) + parseFloat(t.getPropertyValue("margin-left"));
        }

        return this[0].offsetWidth;
      }

      return null;
    },
    outerHeight: function outerHeight(e) {
      if (this.length > 0) {
        if (e) {
          var t = this.styles();
          return this[0].offsetHeight + parseFloat(t.getPropertyValue("margin-top")) + parseFloat(t.getPropertyValue("margin-bottom"));
        }

        return this[0].offsetHeight;
      }

      return null;
    },
    styles: function styles() {
      var e = l();
      return this[0] ? e.getComputedStyle(this[0], null) : {};
    },
    offset: function offset() {
      if (this.length > 0) {
        var e = l(),
            t = r(),
            i = this[0],
            s = i.getBoundingClientRect(),
            a = t.body,
            n = i.clientTop || a.clientTop || 0,
            o = i.clientLeft || a.clientLeft || 0,
            d = i === e ? e.scrollY : i.scrollTop,
            h = i === e ? e.scrollX : i.scrollLeft;
        return {
          top: s.top + d - n,
          left: s.left + h - o
        };
      }

      return null;
    },
    css: function css(e, t) {
      var i,
          s = l();

      if (1 === arguments.length) {
        if ("string" != typeof e) {
          for (i = 0; i < this.length; i += 1) {
            for (var a in e) {
              this[i].style[a] = e[a];
            }
          }

          return this;
        }

        if (this[0]) return s.getComputedStyle(this[0], null).getPropertyValue(e);
      }

      if (2 === arguments.length && "string" == typeof e) {
        for (i = 0; i < this.length; i += 1) {
          this[i].style[e] = t;
        }

        return this;
      }

      return this;
    },
    each: function each(e) {
      return e ? (this.forEach(function (t, i) {
        e.apply(t, [t, i]);
      }), this) : this;
    },
    html: function html(e) {
      if (void 0 === e) return this[0] ? this[0].innerHTML : null;

      for (var t = 0; t < this.length; t += 1) {
        this[t].innerHTML = e;
      }

      return this;
    },
    text: function text(e) {
      if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;

      for (var t = 0; t < this.length; t += 1) {
        this[t].textContent = e;
      }

      return this;
    },
    is: function is(e) {
      var t,
          i,
          s = l(),
          a = r(),
          n = this[0];
      if (!n || void 0 === e) return !1;

      if ("string" == typeof e) {
        if (n.matches) return n.matches(e);
        if (n.webkitMatchesSelector) return n.webkitMatchesSelector(e);
        if (n.msMatchesSelector) return n.msMatchesSelector(e);

        for (t = m(e), i = 0; i < t.length; i += 1) {
          if (t[i] === n) return !0;
        }

        return !1;
      }

      if (e === a) return n === a;
      if (e === s) return n === s;

      if (e.nodeType || e instanceof c) {
        for (t = e.nodeType ? [e] : e, i = 0; i < t.length; i += 1) {
          if (t[i] === n) return !0;
        }

        return !1;
      }

      return !1;
    },
    index: function index() {
      var e,
          t = this[0];

      if (t) {
        for (e = 0; null !== (t = t.previousSibling);) {
          1 === t.nodeType && (e += 1);
        }

        return e;
      }
    },
    eq: function eq(e) {
      if (void 0 === e) return this;
      var t = this.length;
      if (e > t - 1) return m([]);

      if (e < 0) {
        var i = t + e;
        return m(i < 0 ? [] : [this[i]]);
      }

      return m([this[e]]);
    },
    append: function append() {
      for (var e, t = r(), i = 0; i < arguments.length; i += 1) {
        e = i < 0 || arguments.length <= i ? void 0 : arguments[i];

        for (var s = 0; s < this.length; s += 1) {
          if ("string" == typeof e) {
            var a = t.createElement("div");

            for (a.innerHTML = e; a.firstChild;) {
              this[s].appendChild(a.firstChild);
            }
          } else if (e instanceof c) for (var n = 0; n < e.length; n += 1) {
            this[s].appendChild(e[n]);
          } else this[s].appendChild(e);
        }
      }

      return this;
    },
    prepend: function prepend(e) {
      var t,
          i,
          s = r();

      for (t = 0; t < this.length; t += 1) {
        if ("string" == typeof e) {
          var a = s.createElement("div");

          for (a.innerHTML = e, i = a.childNodes.length - 1; i >= 0; i -= 1) {
            this[t].insertBefore(a.childNodes[i], this[t].childNodes[0]);
          }
        } else if (e instanceof c) for (i = 0; i < e.length; i += 1) {
          this[t].insertBefore(e[i], this[t].childNodes[0]);
        } else this[t].insertBefore(e, this[t].childNodes[0]);
      }

      return this;
    },
    next: function next(e) {
      return this.length > 0 ? e ? this[0].nextElementSibling && m(this[0].nextElementSibling).is(e) ? m([this[0].nextElementSibling]) : m([]) : this[0].nextElementSibling ? m([this[0].nextElementSibling]) : m([]) : m([]);
    },
    nextAll: function nextAll(e) {
      var t = [],
          i = this[0];
      if (!i) return m([]);

      for (; i.nextElementSibling;) {
        var s = i.nextElementSibling;
        e ? m(s).is(e) && t.push(s) : t.push(s), i = s;
      }

      return m(t);
    },
    prev: function prev(e) {
      if (this.length > 0) {
        var t = this[0];
        return e ? t.previousElementSibling && m(t.previousElementSibling).is(e) ? m([t.previousElementSibling]) : m([]) : t.previousElementSibling ? m([t.previousElementSibling]) : m([]);
      }

      return m([]);
    },
    prevAll: function prevAll(e) {
      var t = [],
          i = this[0];
      if (!i) return m([]);

      for (; i.previousElementSibling;) {
        var s = i.previousElementSibling;
        e ? m(s).is(e) && t.push(s) : t.push(s), i = s;
      }

      return m(t);
    },
    parent: function parent(e) {
      for (var t = [], i = 0; i < this.length; i += 1) {
        null !== this[i].parentNode && (e ? m(this[i].parentNode).is(e) && t.push(this[i].parentNode) : t.push(this[i].parentNode));
      }

      return m(t);
    },
    parents: function parents(e) {
      for (var t = [], i = 0; i < this.length; i += 1) {
        for (var s = this[i].parentNode; s;) {
          e ? m(s).is(e) && t.push(s) : t.push(s), s = s.parentNode;
        }
      }

      return m(t);
    },
    closest: function closest(e) {
      var t = this;
      return void 0 === e ? m([]) : (t.is(e) || (t = t.parents(e).eq(0)), t);
    },
    find: function find(e) {
      for (var t = [], i = 0; i < this.length; i += 1) {
        for (var s = this[i].querySelectorAll(e), a = 0; a < s.length; a += 1) {
          t.push(s[a]);
        }
      }

      return m(t);
    },
    children: function children(e) {
      for (var t = [], i = 0; i < this.length; i += 1) {
        for (var s = this[i].children, a = 0; a < s.length; a += 1) {
          e && !m(s[a]).is(e) || t.push(s[a]);
        }
      }

      return m(t);
    },
    filter: function filter(e) {
      return m(f(this, e));
    },
    remove: function remove() {
      for (var e = 0; e < this.length; e += 1) {
        this[e].parentNode && this[e].parentNode.removeChild(this[e]);
      }

      return this;
    }
  };

  function E(e, t) {
    return void 0 === t && (t = 0), setTimeout(e, t);
  }

  function x() {
    return Date.now();
  }

  function T(e, t) {
    void 0 === t && (t = "x");
    var i,
        s,
        a,
        r = l(),
        n = r.getComputedStyle(e, null);
    return r.WebKitCSSMatrix ? ((s = n.transform || n.webkitTransform).split(",").length > 6 && (s = s.split(", ").map(function (e) {
      return e.replace(",", ".");
    }).join(", ")), a = new r.WebKitCSSMatrix("none" === s ? "" : s)) : i = (a = n.MozTransform || n.OTransform || n.MsTransform || n.msTransform || n.transform || n.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")).toString().split(","), "x" === t && (s = r.WebKitCSSMatrix ? a.m41 : 16 === i.length ? parseFloat(i[12]) : parseFloat(i[4])), "y" === t && (s = r.WebKitCSSMatrix ? a.m42 : 16 === i.length ? parseFloat(i[13]) : parseFloat(i[5])), s || 0;
  }

  function C(e) {
    return "object" == _typeof(e) && null !== e && e.constructor && e.constructor === Object;
  }

  function S() {
    for (var e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = 1; t < arguments.length; t += 1) {
      var i = t < 0 || arguments.length <= t ? void 0 : arguments[t];
      if (null != i) for (var s = Object.keys(Object(i)), a = 0, r = s.length; a < r; a += 1) {
        var n = s[a],
            l = Object.getOwnPropertyDescriptor(i, n);
        void 0 !== l && l.enumerable && (C(e[n]) && C(i[n]) ? S(e[n], i[n]) : !C(e[n]) && C(i[n]) ? (e[n] = {}, S(e[n], i[n])) : e[n] = i[n]);
      }
    }

    return e;
  }

  function M(e, t) {
    Object.keys(t).forEach(function (i) {
      C(t[i]) && Object.keys(t[i]).forEach(function (s) {
        "function" == typeof t[i][s] && (t[i][s] = t[i][s].bind(e));
      }), e[i] = t[i];
    });
  }

  function z() {
    return g || (g = function () {
      var e = l(),
          t = r();
      return {
        touch: !!("ontouchstart" in e || e.DocumentTouch && t instanceof e.DocumentTouch),
        pointerEvents: !!e.PointerEvent && "maxTouchPoints" in e.navigator && e.navigator.maxTouchPoints >= 0,
        observer: "MutationObserver" in e || "WebkitMutationObserver" in e,
        passiveListener: function () {
          var t = !1;

          try {
            var i = Object.defineProperty({}, "passive", {
              get: function get() {
                t = !0;
              }
            });
            e.addEventListener("testPassiveListener", null, i);
          } catch (e) {}

          return t;
        }(),
        gestures: "ongesturestart" in e
      };
    }()), g;
  }

  function P(e) {
    return void 0 === e && (e = {}), w || (w = function (e) {
      var t = (void 0 === e ? {} : e).userAgent,
          i = z(),
          s = l(),
          a = s.navigator.platform,
          r = t || s.navigator.userAgent,
          n = {
        ios: !1,
        android: !1
      },
          o = s.screen.width,
          d = s.screen.height,
          h = r.match(/(Android);?[\s\/]+([\d.]+)?/),
          p = r.match(/(iPad).*OS\s([\d_]+)/),
          u = r.match(/(iPod)(.*OS\s([\d_]+))?/),
          c = !p && r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),
          v = "Win32" === a,
          f = "MacIntel" === a;
      return !p && f && i.touch && ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768"].indexOf(o + "x" + d) >= 0 && ((p = r.match(/(Version)\/([\d.]+)/)) || (p = [0, 1, "13_0_0"]), f = !1), h && !v && (n.os = "android", n.android = !0), (p || c || u) && (n.os = "ios", n.ios = !0), n;
    }(e)), w;
  }

  function k() {
    return b || (b = function () {
      var e,
          t = l();
      return {
        isEdge: !!t.navigator.userAgent.match(/Edge/g),
        isSafari: (e = t.navigator.userAgent.toLowerCase(), e.indexOf("safari") >= 0 && e.indexOf("chrome") < 0 && e.indexOf("android") < 0),
        isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)
      };
    }()), b;
  }

  Object.keys(y).forEach(function (e) {
    m.fn[e] = y[e];
  });
  var $ = {
    name: "resize",
    create: function create() {
      var e = this;
      S(e, {
        resize: {
          resizeHandler: function resizeHandler() {
            e && !e.destroyed && e.initialized && (e.emit("beforeResize"), e.emit("resize"));
          },
          orientationChangeHandler: function orientationChangeHandler() {
            e && !e.destroyed && e.initialized && e.emit("orientationchange");
          }
        }
      });
    },
    on: {
      init: function init(e) {
        var t = l();
        t.addEventListener("resize", e.resize.resizeHandler), t.addEventListener("orientationchange", e.resize.orientationChangeHandler);
      },
      destroy: function destroy(e) {
        var t = l();
        t.removeEventListener("resize", e.resize.resizeHandler), t.removeEventListener("orientationchange", e.resize.orientationChangeHandler);
      }
    }
  },
      L = {
    attach: function attach(e, t) {
      void 0 === t && (t = {});
      var i = l(),
          s = this,
          a = new (i.MutationObserver || i.WebkitMutationObserver)(function (e) {
        if (1 !== e.length) {
          var t = function t() {
            s.emit("observerUpdate", e[0]);
          };

          i.requestAnimationFrame ? i.requestAnimationFrame(t) : i.setTimeout(t, 0);
        } else s.emit("observerUpdate", e[0]);
      });
      a.observe(e, {
        attributes: void 0 === t.attributes || t.attributes,
        childList: void 0 === t.childList || t.childList,
        characterData: void 0 === t.characterData || t.characterData
      }), s.observer.observers.push(a);
    },
    init: function init() {
      if (this.support.observer && this.params.observer) {
        if (this.params.observeParents) for (var e = this.$el.parents(), t = 0; t < e.length; t += 1) {
          this.observer.attach(e[t]);
        }
        this.observer.attach(this.$el[0], {
          childList: this.params.observeSlideChildren
        }), this.observer.attach(this.$wrapperEl[0], {
          attributes: !1
        });
      }
    },
    destroy: function destroy() {
      this.observer.observers.forEach(function (e) {
        e.disconnect();
      }), this.observer.observers = [];
    }
  },
      I = {
    name: "observer",
    params: {
      observer: !1,
      observeParents: !1,
      observeSlideChildren: !1
    },
    create: function create() {
      M(this, {
        observer: t(t({}, L), {}, {
          observers: []
        })
      });
    },
    on: {
      init: function init(e) {
        e.observer.init();
      },
      destroy: function destroy(e) {
        e.observer.destroy();
      }
    }
  };

  function O(e) {
    var t = r(),
        i = l(),
        s = this.touchEventsData,
        a = this.params,
        n = this.touches;

    if (!this.animating || !a.preventInteractionOnTransition) {
      var o = e;
      o.originalEvent && (o = o.originalEvent);
      var d = m(o.target);
      if (("wrapper" !== a.touchEventsTarget || d.closest(this.wrapperEl).length) && (s.isTouchEvent = "touchstart" === o.type, (s.isTouchEvent || !("which" in o) || 3 !== o.which) && !(!s.isTouchEvent && "button" in o && o.button > 0 || s.isTouched && s.isMoved))) if (a.noSwiping && d.closest(a.noSwipingSelector ? a.noSwipingSelector : "." + a.noSwipingClass)[0]) this.allowClick = !0;else if (!a.swipeHandler || d.closest(a.swipeHandler)[0]) {
        n.currentX = "touchstart" === o.type ? o.targetTouches[0].pageX : o.pageX, n.currentY = "touchstart" === o.type ? o.targetTouches[0].pageY : o.pageY;
        var h = n.currentX,
            p = n.currentY,
            u = a.edgeSwipeDetection || a.iOSEdgeSwipeDetection,
            c = a.edgeSwipeThreshold || a.iOSEdgeSwipeThreshold;

        if (!u || !(h <= c || h >= i.screen.width - c)) {
          if (S(s, {
            isTouched: !0,
            isMoved: !1,
            allowTouchCallbacks: !0,
            isScrolling: void 0,
            startMoving: void 0
          }), n.startX = h, n.startY = p, s.touchStartTime = x(), this.allowClick = !0, this.updateSize(), this.swipeDirection = void 0, a.threshold > 0 && (s.allowThresholdMove = !1), "touchstart" !== o.type) {
            var v = !0;
            d.is(s.formElements) && (v = !1), t.activeElement && m(t.activeElement).is(s.formElements) && t.activeElement !== d[0] && t.activeElement.blur();
            var f = v && this.allowTouchMove && a.touchStartPreventDefault;
            (a.touchStartForcePreventDefault || f) && o.preventDefault();
          }

          this.emit("touchStart", o);
        }
      }
    }
  }

  function A(e) {
    var t = r(),
        i = this.touchEventsData,
        s = this.params,
        a = this.touches,
        n = this.rtlTranslate,
        l = e;

    if (l.originalEvent && (l = l.originalEvent), i.isTouched) {
      if (!i.isTouchEvent || "touchmove" === l.type) {
        var o = "touchmove" === l.type && l.targetTouches && (l.targetTouches[0] || l.changedTouches[0]),
            d = "touchmove" === l.type ? o.pageX : l.pageX,
            h = "touchmove" === l.type ? o.pageY : l.pageY;
        if (l.preventedByNestedSwiper) return a.startX = d, void (a.startY = h);
        if (!this.allowTouchMove) return this.allowClick = !1, void (i.isTouched && (S(a, {
          startX: d,
          startY: h,
          currentX: d,
          currentY: h
        }), i.touchStartTime = x()));
        if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop) if (this.isVertical()) {
          if (h < a.startY && this.translate <= this.maxTranslate() || h > a.startY && this.translate >= this.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1);
        } else if (d < a.startX && this.translate <= this.maxTranslate() || d > a.startX && this.translate >= this.minTranslate()) return;
        if (i.isTouchEvent && t.activeElement && l.target === t.activeElement && m(l.target).is(i.formElements)) return i.isMoved = !0, void (this.allowClick = !1);

        if (i.allowTouchCallbacks && this.emit("touchMove", l), !(l.targetTouches && l.targetTouches.length > 1)) {
          a.currentX = d, a.currentY = h;
          var p = a.currentX - a.startX,
              u = a.currentY - a.startY;

          if (!(this.params.threshold && Math.sqrt(Math.pow(p, 2) + Math.pow(u, 2)) < this.params.threshold)) {
            var c;
            if (void 0 === i.isScrolling) this.isHorizontal() && a.currentY === a.startY || this.isVertical() && a.currentX === a.startX ? i.isScrolling = !1 : p * p + u * u >= 25 && (c = 180 * Math.atan2(Math.abs(u), Math.abs(p)) / Math.PI, i.isScrolling = this.isHorizontal() ? c > s.touchAngle : 90 - c > s.touchAngle);
            if (i.isScrolling && this.emit("touchMoveOpposite", l), void 0 === i.startMoving && (a.currentX === a.startX && a.currentY === a.startY || (i.startMoving = !0)), i.isScrolling) i.isTouched = !1;else if (i.startMoving) {
              this.allowClick = !1, !s.cssMode && l.cancelable && l.preventDefault(), s.touchMoveStopPropagation && !s.nested && l.stopPropagation(), i.isMoved || (s.loop && this.loopFix(), i.startTranslate = this.getTranslate(), this.setTransition(0), this.animating && this.$wrapperEl.trigger("webkitTransitionEnd transitionend"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== this.allowSlideNext && !0 !== this.allowSlidePrev || this.setGrabCursor(!0), this.emit("sliderFirstMove", l)), this.emit("sliderMove", l), i.isMoved = !0;
              var v = this.isHorizontal() ? p : u;
              a.diff = v, v *= s.touchRatio, n && (v = -v), this.swipeDirection = v > 0 ? "prev" : "next", i.currentTranslate = v + i.startTranslate;
              var f = !0,
                  g = s.resistanceRatio;

              if (s.touchReleaseOnEdges && (g = 0), v > 0 && i.currentTranslate > this.minTranslate() ? (f = !1, s.resistance && (i.currentTranslate = this.minTranslate() - 1 + Math.pow(-this.minTranslate() + i.startTranslate + v, g))) : v < 0 && i.currentTranslate < this.maxTranslate() && (f = !1, s.resistance && (i.currentTranslate = this.maxTranslate() + 1 - Math.pow(this.maxTranslate() - i.startTranslate - v, g))), f && (l.preventedByNestedSwiper = !0), !this.allowSlideNext && "next" === this.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !this.allowSlidePrev && "prev" === this.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), s.threshold > 0) {
                if (!(Math.abs(v) > s.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate);
                if (!i.allowThresholdMove) return i.allowThresholdMove = !0, a.startX = a.currentX, a.startY = a.currentY, i.currentTranslate = i.startTranslate, void (a.diff = this.isHorizontal() ? a.currentX - a.startX : a.currentY - a.startY);
              }

              s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (this.updateActiveIndex(), this.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({
                position: a[this.isHorizontal() ? "startX" : "startY"],
                time: i.touchStartTime
              }), i.velocities.push({
                position: a[this.isHorizontal() ? "currentX" : "currentY"],
                time: x()
              })), this.updateProgress(i.currentTranslate), this.setTranslate(i.currentTranslate));
            }
          }
        }
      }
    } else i.startMoving && i.isScrolling && this.emit("touchMoveOpposite", l);
  }

  function D(e) {
    var t = this,
        i = t.touchEventsData,
        s = t.params,
        a = t.touches,
        r = t.rtlTranslate,
        n = t.$wrapperEl,
        l = t.slidesGrid,
        o = t.snapGrid,
        d = e;
    if (d.originalEvent && (d = d.originalEvent), i.allowTouchCallbacks && t.emit("touchEnd", d), i.allowTouchCallbacks = !1, !i.isTouched) return i.isMoved && s.grabCursor && t.setGrabCursor(!1), i.isMoved = !1, void (i.startMoving = !1);
    s.grabCursor && i.isMoved && i.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);
    var h,
        p = x(),
        u = p - i.touchStartTime;
    if (t.allowClick && (t.updateClickedSlide(d), t.emit("tap click", d), u < 300 && p - i.lastClickTime < 300 && t.emit("doubleTap doubleClick", d)), i.lastClickTime = x(), E(function () {
      t.destroyed || (t.allowClick = !0);
    }), !i.isTouched || !i.isMoved || !t.swipeDirection || 0 === a.diff || i.currentTranslate === i.startTranslate) return i.isTouched = !1, i.isMoved = !1, void (i.startMoving = !1);
    if (i.isTouched = !1, i.isMoved = !1, i.startMoving = !1, h = s.followFinger ? r ? t.translate : -t.translate : -i.currentTranslate, !s.cssMode) if (s.freeMode) {
      if (h < -t.minTranslate()) return void t.slideTo(t.activeIndex);
      if (h > -t.maxTranslate()) return void (t.slides.length < o.length ? t.slideTo(o.length - 1) : t.slideTo(t.slides.length - 1));

      if (s.freeModeMomentum) {
        if (i.velocities.length > 1) {
          var c = i.velocities.pop(),
              v = i.velocities.pop(),
              f = c.position - v.position,
              m = c.time - v.time;
          t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < s.freeModeMinimumVelocity && (t.velocity = 0), (m > 150 || x() - c.time > 300) && (t.velocity = 0);
        } else t.velocity = 0;

        t.velocity *= s.freeModeMomentumVelocityRatio, i.velocities.length = 0;
        var g = 1e3 * s.freeModeMomentumRatio,
            w = t.velocity * g,
            b = t.translate + w;
        r && (b = -b);
        var y,
            T,
            C = !1,
            S = 20 * Math.abs(t.velocity) * s.freeModeMomentumBounceRatio;
        if (b < t.maxTranslate()) s.freeModeMomentumBounce ? (b + t.maxTranslate() < -S && (b = t.maxTranslate() - S), y = t.maxTranslate(), C = !0, i.allowMomentumBounce = !0) : b = t.maxTranslate(), s.loop && s.centeredSlides && (T = !0);else if (b > t.minTranslate()) s.freeModeMomentumBounce ? (b - t.minTranslate() > S && (b = t.minTranslate() + S), y = t.minTranslate(), C = !0, i.allowMomentumBounce = !0) : b = t.minTranslate(), s.loop && s.centeredSlides && (T = !0);else if (s.freeModeSticky) {
          for (var M, z = 0; z < o.length; z += 1) {
            if (o[z] > -b) {
              M = z;
              break;
            }
          }

          b = -(b = Math.abs(o[M] - b) < Math.abs(o[M - 1] - b) || "next" === t.swipeDirection ? o[M] : o[M - 1]);
        }

        if (T && t.once("transitionEnd", function () {
          t.loopFix();
        }), 0 !== t.velocity) {
          if (g = r ? Math.abs((-b - t.translate) / t.velocity) : Math.abs((b - t.translate) / t.velocity), s.freeModeSticky) {
            var P = Math.abs((r ? -b : b) - t.translate),
                k = t.slidesSizesGrid[t.activeIndex];
            g = P < k ? s.speed : P < 2 * k ? 1.5 * s.speed : 2.5 * s.speed;
          }
        } else if (s.freeModeSticky) return void t.slideToClosest();

        s.freeModeMomentumBounce && C ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(b), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd(function () {
          t && !t.destroyed && i.allowMomentumBounce && (t.emit("momentumBounce"), t.setTransition(s.speed), setTimeout(function () {
            t.setTranslate(y), n.transitionEnd(function () {
              t && !t.destroyed && t.transitionEnd();
            });
          }, 0));
        })) : t.velocity ? (t.updateProgress(b), t.setTransition(g), t.setTranslate(b), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd(function () {
          t && !t.destroyed && t.transitionEnd();
        }))) : t.updateProgress(b), t.updateActiveIndex(), t.updateSlidesClasses();
      } else if (s.freeModeSticky) return void t.slideToClosest();

      (!s.freeModeMomentum || u >= s.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());
    } else {
      for (var $ = 0, L = t.slidesSizesGrid[0], I = 0; I < l.length; I += I < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup) {
        var O = I < s.slidesPerGroupSkip - 1 ? 1 : s.slidesPerGroup;
        void 0 !== l[I + O] ? h >= l[I] && h < l[I + O] && ($ = I, L = l[I + O] - l[I]) : h >= l[I] && ($ = I, L = l[l.length - 1] - l[l.length - 2]);
      }

      var A = (h - l[$]) / L,
          D = $ < s.slidesPerGroupSkip - 1 ? 1 : s.slidesPerGroup;

      if (u > s.longSwipesMs) {
        if (!s.longSwipes) return void t.slideTo(t.activeIndex);
        "next" === t.swipeDirection && (A >= s.longSwipesRatio ? t.slideTo($ + D) : t.slideTo($)), "prev" === t.swipeDirection && (A > 1 - s.longSwipesRatio ? t.slideTo($ + D) : t.slideTo($));
      } else {
        if (!s.shortSwipes) return void t.slideTo(t.activeIndex);
        t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo($ + D) : t.slideTo($) : ("next" === t.swipeDirection && t.slideTo($ + D), "prev" === t.swipeDirection && t.slideTo($));
      }
    }
  }

  function G() {
    var e = this.params,
        t = this.el;

    if (!t || 0 !== t.offsetWidth) {
      e.breakpoints && this.setBreakpoint();
      var i = this.allowSlideNext,
          s = this.allowSlidePrev,
          a = this.snapGrid;
      this.allowSlideNext = !0, this.allowSlidePrev = !0, this.updateSize(), this.updateSlides(), this.updateSlidesClasses(), ("auto" === e.slidesPerView || e.slidesPerView > 1) && this.isEnd && !this.isBeginning && !this.params.centeredSlides ? this.slideTo(this.slides.length - 1, 0, !1, !0) : this.slideTo(this.activeIndex, 0, !1, !0), this.autoplay && this.autoplay.running && this.autoplay.paused && this.autoplay.run(), this.allowSlidePrev = s, this.allowSlideNext = i, this.params.watchOverflow && a !== this.snapGrid && this.checkOverflow();
    }
  }

  function N(e) {
    this.allowClick || (this.params.preventClicks && e.preventDefault(), this.params.preventClicksPropagation && this.animating && (e.stopPropagation(), e.stopImmediatePropagation()));
  }

  function B() {
    var e = this.wrapperEl,
        t = this.rtlTranslate;
    this.previousTranslate = this.translate, this.isHorizontal() ? this.translate = t ? e.scrollWidth - e.offsetWidth - e.scrollLeft : -e.scrollLeft : this.translate = -e.scrollTop, -0 === this.translate && (this.translate = 0), this.updateActiveIndex(), this.updateSlidesClasses();
    var i = this.maxTranslate() - this.minTranslate();
    (0 === i ? 0 : (this.translate - this.minTranslate()) / i) !== this.progress && this.updateProgress(t ? -this.translate : this.translate), this.emit("setTranslate", this.translate, !1);
  }

  var H = !1;

  function X() {}

  var Y = {
    init: !0,
    direction: "horizontal",
    touchEventsTarget: "container",
    initialSlide: 0,
    speed: 300,
    cssMode: !1,
    updateOnWindowResize: !0,
    width: null,
    height: null,
    preventInteractionOnTransition: !1,
    userAgent: null,
    url: null,
    edgeSwipeDetection: !1,
    edgeSwipeThreshold: 20,
    freeMode: !1,
    freeModeMomentum: !0,
    freeModeMomentumRatio: 1,
    freeModeMomentumBounce: !0,
    freeModeMomentumBounceRatio: 1,
    freeModeMomentumVelocityRatio: 1,
    freeModeSticky: !1,
    freeModeMinimumVelocity: .02,
    autoHeight: !1,
    setWrapperSize: !1,
    virtualTranslate: !1,
    effect: "slide",
    breakpoints: void 0,
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerColumn: 1,
    slidesPerColumnFill: "column",
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    centeredSlides: !1,
    centeredSlidesBounds: !1,
    slidesOffsetBefore: 0,
    slidesOffsetAfter: 0,
    normalizeSlideIndex: !0,
    centerInsufficientSlides: !1,
    watchOverflow: !1,
    roundLengths: !1,
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: !0,
    shortSwipes: !0,
    longSwipes: !0,
    longSwipesRatio: .5,
    longSwipesMs: 300,
    followFinger: !0,
    allowTouchMove: !0,
    threshold: 0,
    touchMoveStopPropagation: !1,
    touchStartPreventDefault: !0,
    touchStartForcePreventDefault: !1,
    touchReleaseOnEdges: !1,
    uniqueNavElements: !0,
    resistance: !0,
    resistanceRatio: .85,
    watchSlidesProgress: !1,
    watchSlidesVisibility: !1,
    grabCursor: !1,
    preventClicks: !0,
    preventClicksPropagation: !0,
    slideToClickedSlide: !1,
    preloadImages: !0,
    updateOnImagesReady: !0,
    loop: !1,
    loopAdditionalSlides: 0,
    loopedSlides: null,
    loopFillGroupWithBlank: !1,
    loopPreventsSlide: !0,
    allowSlidePrev: !0,
    allowSlideNext: !0,
    swipeHandler: null,
    noSwiping: !0,
    noSwipingClass: "swiper-no-swiping",
    noSwipingSelector: null,
    passiveListeners: !0,
    containerModifierClass: "swiper-container-",
    slideClass: "swiper-slide",
    slideBlankClass: "swiper-slide-invisible-blank",
    slideActiveClass: "swiper-slide-active",
    slideDuplicateActiveClass: "swiper-slide-duplicate-active",
    slideVisibleClass: "swiper-slide-visible",
    slideDuplicateClass: "swiper-slide-duplicate",
    slideNextClass: "swiper-slide-next",
    slideDuplicateNextClass: "swiper-slide-duplicate-next",
    slidePrevClass: "swiper-slide-prev",
    slideDuplicatePrevClass: "swiper-slide-duplicate-prev",
    wrapperClass: "swiper-wrapper",
    runCallbacksOnInit: !0,
    _emitClasses: !1
  },
      V = {
    modular: {
      useParams: function useParams(e) {
        var t = this;
        t.modules && Object.keys(t.modules).forEach(function (i) {
          var s = t.modules[i];
          s.params && S(e, s.params);
        });
      },
      useModules: function useModules(e) {
        void 0 === e && (e = {});
        var t = this;
        t.modules && Object.keys(t.modules).forEach(function (i) {
          var s = t.modules[i],
              a = e[i] || {};
          s.on && t.on && Object.keys(s.on).forEach(function (e) {
            t.on(e, s.on[e]);
          }), s.create && s.create.bind(t)(a);
        });
      }
    },
    eventsEmitter: {
      on: function on(e, t, i) {
        var s = this;
        if ("function" != typeof t) return s;
        var a = i ? "unshift" : "push";
        return e.split(" ").forEach(function (e) {
          s.eventsListeners[e] || (s.eventsListeners[e] = []), s.eventsListeners[e][a](t);
        }), s;
      },
      once: function once(e, t, i) {
        var s = this;
        if ("function" != typeof t) return s;

        function a() {
          s.off(e, a), a.__emitterProxy && delete a.__emitterProxy;

          for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
            r[n] = arguments[n];
          }

          t.apply(s, r);
        }

        return a.__emitterProxy = t, s.on(e, a, i);
      },
      onAny: function onAny(e, t) {
        if ("function" != typeof e) return this;
        var i = t ? "unshift" : "push";
        return this.eventsAnyListeners.indexOf(e) < 0 && this.eventsAnyListeners[i](e), this;
      },
      offAny: function offAny(e) {
        if (!this.eventsAnyListeners) return this;
        var t = this.eventsAnyListeners.indexOf(e);
        return t >= 0 && this.eventsAnyListeners.splice(t, 1), this;
      },
      off: function off(e, t) {
        var i = this;
        return i.eventsListeners ? (e.split(" ").forEach(function (e) {
          void 0 === t ? i.eventsListeners[e] = [] : i.eventsListeners[e] && i.eventsListeners[e].forEach(function (s, a) {
            (s === t || s.__emitterProxy && s.__emitterProxy === t) && i.eventsListeners[e].splice(a, 1);
          });
        }), i) : i;
      },
      emit: function emit() {
        var e,
            t,
            i,
            s = this;
        if (!s.eventsListeners) return s;

        for (var a = arguments.length, r = new Array(a), n = 0; n < a; n++) {
          r[n] = arguments[n];
        }

        "string" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], t = r.slice(1, r.length), i = s) : (e = r[0].events, t = r[0].data, i = r[0].context || s), t.unshift(i);
        var l = Array.isArray(e) ? e : e.split(" ");
        return l.forEach(function (e) {
          if (s.eventsListeners && s.eventsListeners[e]) {
            var a = [];
            s.eventsListeners[e].forEach(function (e) {
              a.push(e);
            }), a.forEach(function (e) {
              e.apply(i, t);
            });
          }
        }), s;
      }
    },
    update: {
      updateSize: function updateSize() {
        var e,
            t,
            i = this.$el;
        e = void 0 !== this.params.width && null !== this.params.width ? this.params.width : i[0].clientWidth, t = void 0 !== this.params.height && null !== this.params.width ? this.params.height : i[0].clientHeight, 0 === e && this.isHorizontal() || 0 === t && this.isVertical() || (e = e - parseInt(i.css("padding-left") || 0, 10) - parseInt(i.css("padding-right") || 0, 10), t = t - parseInt(i.css("padding-top") || 0, 10) - parseInt(i.css("padding-bottom") || 0, 10), Number.isNaN(e) && (e = 0), Number.isNaN(t) && (t = 0), S(this, {
          width: e,
          height: t,
          size: this.isHorizontal() ? e : t
        }));
      },
      updateSlides: function updateSlides() {
        var e = l(),
            t = this.params,
            i = this.$wrapperEl,
            s = this.size,
            a = this.rtlTranslate,
            r = this.wrongRTL,
            n = this.virtual && t.virtual.enabled,
            o = n ? this.virtual.slides.length : this.slides.length,
            d = i.children("." + this.params.slideClass),
            h = n ? this.virtual.slides.length : d.length,
            p = [],
            u = [],
            c = [];

        function v(e, i) {
          return !t.cssMode || i !== d.length - 1;
        }

        var f = t.slidesOffsetBefore;
        "function" == typeof f && (f = t.slidesOffsetBefore.call(this));
        var m = t.slidesOffsetAfter;
        "function" == typeof m && (m = t.slidesOffsetAfter.call(this));
        var g = this.snapGrid.length,
            w = this.snapGrid.length,
            b = t.spaceBetween,
            y = -f,
            E = 0,
            x = 0;

        if (void 0 !== s) {
          var T, C;
          "string" == typeof b && b.indexOf("%") >= 0 && (b = parseFloat(b.replace("%", "")) / 100 * s), this.virtualSize = -b, a ? d.css({
            marginLeft: "",
            marginTop: ""
          }) : d.css({
            marginRight: "",
            marginBottom: ""
          }), t.slidesPerColumn > 1 && (T = Math.floor(h / t.slidesPerColumn) === h / this.params.slidesPerColumn ? h : Math.ceil(h / t.slidesPerColumn) * t.slidesPerColumn, "auto" !== t.slidesPerView && "row" === t.slidesPerColumnFill && (T = Math.max(T, t.slidesPerView * t.slidesPerColumn)));

          for (var M, z = t.slidesPerColumn, P = T / z, k = Math.floor(h / t.slidesPerColumn), $ = 0; $ < h; $ += 1) {
            C = 0;
            var L = d.eq($);

            if (t.slidesPerColumn > 1) {
              var I = void 0,
                  O = void 0,
                  A = void 0;

              if ("row" === t.slidesPerColumnFill && t.slidesPerGroup > 1) {
                var D = Math.floor($ / (t.slidesPerGroup * t.slidesPerColumn)),
                    G = $ - t.slidesPerColumn * t.slidesPerGroup * D,
                    N = 0 === D ? t.slidesPerGroup : Math.min(Math.ceil((h - D * z * t.slidesPerGroup) / z), t.slidesPerGroup);
                I = (O = G - (A = Math.floor(G / N)) * N + D * t.slidesPerGroup) + A * T / z, L.css({
                  "-webkit-box-ordinal-group": I,
                  "-moz-box-ordinal-group": I,
                  "-ms-flex-order": I,
                  "-webkit-order": I,
                  order: I
                });
              } else "column" === t.slidesPerColumnFill ? (A = $ - (O = Math.floor($ / z)) * z, (O > k || O === k && A === z - 1) && (A += 1) >= z && (A = 0, O += 1)) : O = $ - (A = Math.floor($ / P)) * P;

              L.css("margin-" + (this.isHorizontal() ? "top" : "left"), 0 !== A && t.spaceBetween && t.spaceBetween + "px");
            }

            if ("none" !== L.css("display")) {
              if ("auto" === t.slidesPerView) {
                var B = e.getComputedStyle(L[0], null),
                    H = L[0].style.transform,
                    X = L[0].style.webkitTransform;
                if (H && (L[0].style.transform = "none"), X && (L[0].style.webkitTransform = "none"), t.roundLengths) C = this.isHorizontal() ? L.outerWidth(!0) : L.outerHeight(!0);else if (this.isHorizontal()) {
                  var Y = parseFloat(B.getPropertyValue("width") || 0),
                      V = parseFloat(B.getPropertyValue("padding-left") || 0),
                      F = parseFloat(B.getPropertyValue("padding-right") || 0),
                      W = parseFloat(B.getPropertyValue("margin-left") || 0),
                      R = parseFloat(B.getPropertyValue("margin-right") || 0),
                      q = B.getPropertyValue("box-sizing");
                  C = q && "border-box" === q ? Y + W + R : Y + V + F + W + R;
                } else {
                  var j = parseFloat(B.getPropertyValue("height") || 0),
                      _ = parseFloat(B.getPropertyValue("padding-top") || 0),
                      U = parseFloat(B.getPropertyValue("padding-bottom") || 0),
                      K = parseFloat(B.getPropertyValue("margin-top") || 0),
                      Z = parseFloat(B.getPropertyValue("margin-bottom") || 0),
                      J = B.getPropertyValue("box-sizing");

                  C = J && "border-box" === J ? j + K + Z : j + _ + U + K + Z;
                }
                H && (L[0].style.transform = H), X && (L[0].style.webkitTransform = X), t.roundLengths && (C = Math.floor(C));
              } else C = (s - (t.slidesPerView - 1) * b) / t.slidesPerView, t.roundLengths && (C = Math.floor(C)), d[$] && (this.isHorizontal() ? d[$].style.width = C + "px" : d[$].style.height = C + "px");

              d[$] && (d[$].swiperSlideSize = C), c.push(C), t.centeredSlides ? (y = y + C / 2 + E / 2 + b, 0 === E && 0 !== $ && (y = y - s / 2 - b), 0 === $ && (y = y - s / 2 - b), Math.abs(y) < .001 && (y = 0), t.roundLengths && (y = Math.floor(y)), x % t.slidesPerGroup == 0 && p.push(y), u.push(y)) : (t.roundLengths && (y = Math.floor(y)), (x - Math.min(this.params.slidesPerGroupSkip, x)) % this.params.slidesPerGroup == 0 && p.push(y), u.push(y), y = y + C + b), this.virtualSize += C + b, E = C, x += 1;
            }
          }

          if (this.virtualSize = Math.max(this.virtualSize, s) + m, a && r && ("slide" === t.effect || "coverflow" === t.effect) && i.css({
            width: this.virtualSize + t.spaceBetween + "px"
          }), t.setWrapperSize && (this.isHorizontal() ? i.css({
            width: this.virtualSize + t.spaceBetween + "px"
          }) : i.css({
            height: this.virtualSize + t.spaceBetween + "px"
          })), t.slidesPerColumn > 1 && (this.virtualSize = (C + t.spaceBetween) * T, this.virtualSize = Math.ceil(this.virtualSize / t.slidesPerColumn) - t.spaceBetween, this.isHorizontal() ? i.css({
            width: this.virtualSize + t.spaceBetween + "px"
          }) : i.css({
            height: this.virtualSize + t.spaceBetween + "px"
          }), t.centeredSlides)) {
            M = [];

            for (var Q = 0; Q < p.length; Q += 1) {
              var ee = p[Q];
              t.roundLengths && (ee = Math.floor(ee)), p[Q] < this.virtualSize + p[0] && M.push(ee);
            }

            p = M;
          }

          if (!t.centeredSlides) {
            M = [];

            for (var te = 0; te < p.length; te += 1) {
              var ie = p[te];
              t.roundLengths && (ie = Math.floor(ie)), p[te] <= this.virtualSize - s && M.push(ie);
            }

            p = M, Math.floor(this.virtualSize - s) - Math.floor(p[p.length - 1]) > 1 && p.push(this.virtualSize - s);
          }

          if (0 === p.length && (p = [0]), 0 !== t.spaceBetween && (this.isHorizontal() ? a ? d.filter(v).css({
            marginLeft: b + "px"
          }) : d.filter(v).css({
            marginRight: b + "px"
          }) : d.filter(v).css({
            marginBottom: b + "px"
          })), t.centeredSlides && t.centeredSlidesBounds) {
            var se = 0;
            c.forEach(function (e) {
              se += e + (t.spaceBetween ? t.spaceBetween : 0);
            });
            var ae = (se -= t.spaceBetween) - s;
            p = p.map(function (e) {
              return e < 0 ? -f : e > ae ? ae + m : e;
            });
          }

          if (t.centerInsufficientSlides) {
            var re = 0;

            if (c.forEach(function (e) {
              re += e + (t.spaceBetween ? t.spaceBetween : 0);
            }), (re -= t.spaceBetween) < s) {
              var ne = (s - re) / 2;
              p.forEach(function (e, t) {
                p[t] = e - ne;
              }), u.forEach(function (e, t) {
                u[t] = e + ne;
              });
            }
          }

          S(this, {
            slides: d,
            snapGrid: p,
            slidesGrid: u,
            slidesSizesGrid: c
          }), h !== o && this.emit("slidesLengthChange"), p.length !== g && (this.params.watchOverflow && this.checkOverflow(), this.emit("snapGridLengthChange")), u.length !== w && this.emit("slidesGridLengthChange"), (t.watchSlidesProgress || t.watchSlidesVisibility) && this.updateSlidesOffset();
        }
      },
      updateAutoHeight: function updateAutoHeight(e) {
        var t,
            i = [],
            s = 0;

        if ("number" == typeof e ? this.setTransition(e) : !0 === e && this.setTransition(this.params.speed), "auto" !== this.params.slidesPerView && this.params.slidesPerView > 1) {
          if (this.params.centeredSlides) this.visibleSlides.each(function (e) {
            i.push(e);
          });else for (t = 0; t < Math.ceil(this.params.slidesPerView); t += 1) {
            var a = this.activeIndex + t;
            if (a > this.slides.length) break;
            i.push(this.slides.eq(a)[0]);
          }
        } else i.push(this.slides.eq(this.activeIndex)[0]);

        for (t = 0; t < i.length; t += 1) {
          if (void 0 !== i[t]) {
            var r = i[t].offsetHeight;
            s = r > s ? r : s;
          }
        }

        s && this.$wrapperEl.css("height", s + "px");
      },
      updateSlidesOffset: function updateSlidesOffset() {
        for (var e = this.slides, t = 0; t < e.length; t += 1) {
          e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;
        }
      },
      updateSlidesProgress: function updateSlidesProgress(e) {
        void 0 === e && (e = this && this.translate || 0);
        var t = this.params,
            i = this.slides,
            s = this.rtlTranslate;

        if (0 !== i.length) {
          void 0 === i[0].swiperSlideOffset && this.updateSlidesOffset();
          var a = -e;
          s && (a = e), i.removeClass(t.slideVisibleClass), this.visibleSlidesIndexes = [], this.visibleSlides = [];

          for (var r = 0; r < i.length; r += 1) {
            var n = i[r],
                l = (a + (t.centeredSlides ? this.minTranslate() : 0) - n.swiperSlideOffset) / (n.swiperSlideSize + t.spaceBetween);

            if (t.watchSlidesVisibility || t.centeredSlides && t.autoHeight) {
              var o = -(a - n.swiperSlideOffset),
                  d = o + this.slidesSizesGrid[r];
              (o >= 0 && o < this.size - 1 || d > 1 && d <= this.size || o <= 0 && d >= this.size) && (this.visibleSlides.push(n), this.visibleSlidesIndexes.push(r), i.eq(r).addClass(t.slideVisibleClass));
            }

            n.progress = s ? -l : l;
          }

          this.visibleSlides = m(this.visibleSlides);
        }
      },
      updateProgress: function updateProgress(e) {
        if (void 0 === e) {
          var t = this.rtlTranslate ? -1 : 1;
          e = this && this.translate && this.translate * t || 0;
        }

        var i = this.params,
            s = this.maxTranslate() - this.minTranslate(),
            a = this.progress,
            r = this.isBeginning,
            n = this.isEnd,
            l = r,
            o = n;
        0 === s ? (a = 0, r = !0, n = !0) : (r = (a = (e - this.minTranslate()) / s) <= 0, n = a >= 1), S(this, {
          progress: a,
          isBeginning: r,
          isEnd: n
        }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && this.updateSlidesProgress(e), r && !l && this.emit("reachBeginning toEdge"), n && !o && this.emit("reachEnd toEdge"), (l && !r || o && !n) && this.emit("fromEdge"), this.emit("progress", a);
      },
      updateSlidesClasses: function updateSlidesClasses() {
        var e,
            t = this.slides,
            i = this.params,
            s = this.$wrapperEl,
            a = this.activeIndex,
            r = this.realIndex,
            n = this.virtual && i.virtual.enabled;
        t.removeClass(i.slideActiveClass + " " + i.slideNextClass + " " + i.slidePrevClass + " " + i.slideDuplicateActiveClass + " " + i.slideDuplicateNextClass + " " + i.slideDuplicatePrevClass), (e = n ? this.$wrapperEl.find("." + i.slideClass + '[data-swiper-slide-index="' + a + '"]') : t.eq(a)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + r + '"]').addClass(i.slideDuplicateActiveClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + r + '"]').addClass(i.slideDuplicateActiveClass));
        var l = e.nextAll("." + i.slideClass).eq(0).addClass(i.slideNextClass);
        i.loop && 0 === l.length && (l = t.eq(0)).addClass(i.slideNextClass);
        var o = e.prevAll("." + i.slideClass).eq(0).addClass(i.slidePrevClass);
        i.loop && 0 === o.length && (o = t.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass), o.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + o.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + o.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass)), this.emitSlidesClasses();
      },
      updateActiveIndex: function updateActiveIndex(e) {
        var t,
            i = this.rtlTranslate ? this.translate : -this.translate,
            s = this.slidesGrid,
            a = this.snapGrid,
            r = this.params,
            n = this.activeIndex,
            l = this.realIndex,
            o = this.snapIndex,
            d = e;

        if (void 0 === d) {
          for (var h = 0; h < s.length; h += 1) {
            void 0 !== s[h + 1] ? i >= s[h] && i < s[h + 1] - (s[h + 1] - s[h]) / 2 ? d = h : i >= s[h] && i < s[h + 1] && (d = h + 1) : i >= s[h] && (d = h);
          }

          r.normalizeSlideIndex && (d < 0 || void 0 === d) && (d = 0);
        }

        if (a.indexOf(i) >= 0) t = a.indexOf(i);else {
          var p = Math.min(r.slidesPerGroupSkip, d);
          t = p + Math.floor((d - p) / r.slidesPerGroup);
        }

        if (t >= a.length && (t = a.length - 1), d !== n) {
          var u = parseInt(this.slides.eq(d).attr("data-swiper-slide-index") || d, 10);
          S(this, {
            snapIndex: t,
            realIndex: u,
            previousIndex: n,
            activeIndex: d
          }), this.emit("activeIndexChange"), this.emit("snapIndexChange"), l !== u && this.emit("realIndexChange"), (this.initialized || this.params.runCallbacksOnInit) && this.emit("slideChange");
        } else t !== o && (this.snapIndex = t, this.emit("snapIndexChange"));
      },
      updateClickedSlide: function updateClickedSlide(e) {
        var t = this.params,
            i = m(e.target).closest("." + t.slideClass)[0],
            s = !1;
        if (i) for (var a = 0; a < this.slides.length; a += 1) {
          this.slides[a] === i && (s = !0);
        }
        if (!i || !s) return this.clickedSlide = void 0, void (this.clickedIndex = void 0);
        this.clickedSlide = i, this.virtual && this.params.virtual.enabled ? this.clickedIndex = parseInt(m(i).attr("data-swiper-slide-index"), 10) : this.clickedIndex = m(i).index(), t.slideToClickedSlide && void 0 !== this.clickedIndex && this.clickedIndex !== this.activeIndex && this.slideToClickedSlide();
      }
    },
    translate: {
      getTranslate: function getTranslate(e) {
        void 0 === e && (e = this.isHorizontal() ? "x" : "y");
        var t = this.params,
            i = this.rtlTranslate,
            s = this.translate,
            a = this.$wrapperEl;
        if (t.virtualTranslate) return i ? -s : s;
        if (t.cssMode) return s;
        var r = T(a[0], e);
        return i && (r = -r), r || 0;
      },
      setTranslate: function setTranslate(e, t) {
        var i = this.rtlTranslate,
            s = this.params,
            a = this.$wrapperEl,
            r = this.wrapperEl,
            n = this.progress,
            l = 0,
            o = 0;
        this.isHorizontal() ? l = i ? -e : e : o = e, s.roundLengths && (l = Math.floor(l), o = Math.floor(o)), s.cssMode ? r[this.isHorizontal() ? "scrollLeft" : "scrollTop"] = this.isHorizontal() ? -l : -o : s.virtualTranslate || a.transform("translate3d(" + l + "px, " + o + "px, 0px)"), this.previousTranslate = this.translate, this.translate = this.isHorizontal() ? l : o;
        var d = this.maxTranslate() - this.minTranslate();
        (0 === d ? 0 : (e - this.minTranslate()) / d) !== n && this.updateProgress(e), this.emit("setTranslate", this.translate, t);
      },
      minTranslate: function minTranslate() {
        return -this.snapGrid[0];
      },
      maxTranslate: function maxTranslate() {
        return -this.snapGrid[this.snapGrid.length - 1];
      },
      translateTo: function translateTo(e, t, i, s, a) {
        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0), void 0 === s && (s = !0);
        var r = this,
            n = r.params,
            l = r.wrapperEl;
        if (r.animating && n.preventInteractionOnTransition) return !1;
        var o,
            d = r.minTranslate(),
            h = r.maxTranslate();

        if (o = s && e > d ? d : s && e < h ? h : e, r.updateProgress(o), n.cssMode) {
          var p,
              u = r.isHorizontal();
          if (0 === t) l[u ? "scrollLeft" : "scrollTop"] = -o;else if (l.scrollTo) l.scrollTo(((p = {})[u ? "left" : "top"] = -o, p.behavior = "smooth", p));else l[u ? "scrollLeft" : "scrollTop"] = -o;
          return !0;
        }

        return 0 === t ? (r.setTransition(0), r.setTranslate(o), i && (r.emit("beforeTransitionStart", t, a), r.emit("transitionEnd"))) : (r.setTransition(t), r.setTranslate(o), i && (r.emit("beforeTransitionStart", t, a), r.emit("transitionStart")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function (e) {
          r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, i && r.emit("transitionEnd"));
        }), r.$wrapperEl[0].addEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd))), !0;
      }
    },
    transition: {
      setTransition: function setTransition(e, t) {
        this.params.cssMode || this.$wrapperEl.transition(e), this.emit("setTransition", e, t);
      },
      transitionStart: function transitionStart(e, t) {
        void 0 === e && (e = !0);
        var i = this.activeIndex,
            s = this.params,
            a = this.previousIndex;

        if (!s.cssMode) {
          s.autoHeight && this.updateAutoHeight();
          var r = t;

          if (r || (r = i > a ? "next" : i < a ? "prev" : "reset"), this.emit("transitionStart"), e && i !== a) {
            if ("reset" === r) return void this.emit("slideResetTransitionStart");
            this.emit("slideChangeTransitionStart"), "next" === r ? this.emit("slideNextTransitionStart") : this.emit("slidePrevTransitionStart");
          }
        }
      },
      transitionEnd: function transitionEnd(e, t) {
        void 0 === e && (e = !0);
        var i = this.activeIndex,
            s = this.previousIndex,
            a = this.params;

        if (this.animating = !1, !a.cssMode) {
          this.setTransition(0);
          var r = t;

          if (r || (r = i > s ? "next" : i < s ? "prev" : "reset"), this.emit("transitionEnd"), e && i !== s) {
            if ("reset" === r) return void this.emit("slideResetTransitionEnd");
            this.emit("slideChangeTransitionEnd"), "next" === r ? this.emit("slideNextTransitionEnd") : this.emit("slidePrevTransitionEnd");
          }
        }
      }
    },
    slide: {
      slideTo: function slideTo(e, t, i, s) {
        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0);
        var a = this,
            r = e;
        r < 0 && (r = 0);
        var n = a.params,
            l = a.snapGrid,
            o = a.slidesGrid,
            d = a.previousIndex,
            h = a.activeIndex,
            p = a.rtlTranslate,
            u = a.wrapperEl;
        if (a.animating && n.preventInteractionOnTransition) return !1;
        var c = Math.min(a.params.slidesPerGroupSkip, r),
            v = c + Math.floor((r - c) / a.params.slidesPerGroup);
        v >= l.length && (v = l.length - 1), (h || n.initialSlide || 0) === (d || 0) && i && a.emit("beforeSlideChangeStart");
        var f,
            m = -l[v];
        if (a.updateProgress(m), n.normalizeSlideIndex) for (var g = 0; g < o.length; g += 1) {
          -Math.floor(100 * m) >= Math.floor(100 * o[g]) && (r = g);
        }

        if (a.initialized && r !== h) {
          if (!a.allowSlideNext && m < a.translate && m < a.minTranslate()) return !1;
          if (!a.allowSlidePrev && m > a.translate && m > a.maxTranslate() && (h || 0) !== r) return !1;
        }

        if (f = r > h ? "next" : r < h ? "prev" : "reset", p && -m === a.translate || !p && m === a.translate) return a.updateActiveIndex(r), n.autoHeight && a.updateAutoHeight(), a.updateSlidesClasses(), "slide" !== n.effect && a.setTranslate(m), "reset" !== f && (a.transitionStart(i, f), a.transitionEnd(i, f)), !1;

        if (n.cssMode) {
          var w,
              b = a.isHorizontal(),
              y = -m;
          if (p && (y = u.scrollWidth - u.offsetWidth - y), 0 === t) u[b ? "scrollLeft" : "scrollTop"] = y;else if (u.scrollTo) u.scrollTo(((w = {})[b ? "left" : "top"] = y, w.behavior = "smooth", w));else u[b ? "scrollLeft" : "scrollTop"] = y;
          return !0;
        }

        return 0 === t ? (a.setTransition(0), a.setTranslate(m), a.updateActiveIndex(r), a.updateSlidesClasses(), a.emit("beforeTransitionStart", t, s), a.transitionStart(i, f), a.transitionEnd(i, f)) : (a.setTransition(t), a.setTranslate(m), a.updateActiveIndex(r), a.updateSlidesClasses(), a.emit("beforeTransitionStart", t, s), a.transitionStart(i, f), a.animating || (a.animating = !0, a.onSlideToWrapperTransitionEnd || (a.onSlideToWrapperTransitionEnd = function (e) {
          a && !a.destroyed && e.target === this && (a.$wrapperEl[0].removeEventListener("transitionend", a.onSlideToWrapperTransitionEnd), a.$wrapperEl[0].removeEventListener("webkitTransitionEnd", a.onSlideToWrapperTransitionEnd), a.onSlideToWrapperTransitionEnd = null, delete a.onSlideToWrapperTransitionEnd, a.transitionEnd(i, f));
        }), a.$wrapperEl[0].addEventListener("transitionend", a.onSlideToWrapperTransitionEnd), a.$wrapperEl[0].addEventListener("webkitTransitionEnd", a.onSlideToWrapperTransitionEnd))), !0;
      },
      slideToLoop: function slideToLoop(e, t, i, s) {
        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0);
        var a = e;
        return this.params.loop && (a += this.loopedSlides), this.slideTo(a, t, i, s);
      },
      slideNext: function slideNext(e, t, i) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
        var s = this.params,
            a = this.animating,
            r = this.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup;

        if (s.loop) {
          if (a && s.loopPreventsSlide) return !1;
          this.loopFix(), this._clientLeft = this.$wrapperEl[0].clientLeft;
        }

        return this.slideTo(this.activeIndex + r, e, t, i);
      },
      slidePrev: function slidePrev(e, t, i) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
        var s = this.params,
            a = this.animating,
            r = this.snapGrid,
            n = this.slidesGrid,
            l = this.rtlTranslate;

        if (s.loop) {
          if (a && s.loopPreventsSlide) return !1;
          this.loopFix(), this._clientLeft = this.$wrapperEl[0].clientLeft;
        }

        function o(e) {
          return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);
        }

        var d,
            h = o(l ? this.translate : -this.translate),
            p = r.map(function (e) {
          return o(e);
        }),
            u = (r[p.indexOf(h)], r[p.indexOf(h) - 1]);
        return void 0 === u && s.cssMode && r.forEach(function (e) {
          !u && h >= e && (u = e);
        }), void 0 !== u && (d = n.indexOf(u)) < 0 && (d = this.activeIndex - 1), this.slideTo(d, e, t, i);
      },
      slideReset: function slideReset(e, t, i) {
        return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, i);
      },
      slideToClosest: function slideToClosest(e, t, i, s) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === s && (s = .5);
        var a = this.activeIndex,
            r = Math.min(this.params.slidesPerGroupSkip, a),
            n = r + Math.floor((a - r) / this.params.slidesPerGroup),
            l = this.rtlTranslate ? this.translate : -this.translate;

        if (l >= this.snapGrid[n]) {
          var o = this.snapGrid[n];
          l - o > (this.snapGrid[n + 1] - o) * s && (a += this.params.slidesPerGroup);
        } else {
          var d = this.snapGrid[n - 1];
          l - d <= (this.snapGrid[n] - d) * s && (a -= this.params.slidesPerGroup);
        }

        return a = Math.max(a, 0), a = Math.min(a, this.slidesGrid.length - 1), this.slideTo(a, e, t, i);
      },
      slideToClickedSlide: function slideToClickedSlide() {
        var e,
            t = this,
            i = t.params,
            s = t.$wrapperEl,
            a = "auto" === i.slidesPerView ? t.slidesPerViewDynamic() : i.slidesPerView,
            r = t.clickedIndex;

        if (i.loop) {
          if (t.animating) return;
          e = parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"), 10), i.centeredSlides ? r < t.loopedSlides - a / 2 || r > t.slides.length - t.loopedSlides + a / 2 ? (t.loopFix(), r = s.children("." + i.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + i.slideDuplicateClass + ")").eq(0).index(), E(function () {
            t.slideTo(r);
          })) : t.slideTo(r) : r > t.slides.length - a ? (t.loopFix(), r = s.children("." + i.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + i.slideDuplicateClass + ")").eq(0).index(), E(function () {
            t.slideTo(r);
          })) : t.slideTo(r);
        } else t.slideTo(r);
      }
    },
    loop: {
      loopCreate: function loopCreate() {
        var e = this,
            t = r(),
            i = e.params,
            s = e.$wrapperEl;
        s.children("." + i.slideClass + "." + i.slideDuplicateClass).remove();
        var a = s.children("." + i.slideClass);

        if (i.loopFillGroupWithBlank) {
          var n = i.slidesPerGroup - a.length % i.slidesPerGroup;

          if (n !== i.slidesPerGroup) {
            for (var l = 0; l < n; l += 1) {
              var o = m(t.createElement("div")).addClass(i.slideClass + " " + i.slideBlankClass);
              s.append(o);
            }

            a = s.children("." + i.slideClass);
          }
        }

        "auto" !== i.slidesPerView || i.loopedSlides || (i.loopedSlides = a.length), e.loopedSlides = Math.ceil(parseFloat(i.loopedSlides || i.slidesPerView, 10)), e.loopedSlides += i.loopAdditionalSlides, e.loopedSlides > a.length && (e.loopedSlides = a.length);
        var d = [],
            h = [];
        a.each(function (t, i) {
          var s = m(t);
          i < e.loopedSlides && h.push(t), i < a.length && i >= a.length - e.loopedSlides && d.push(t), s.attr("data-swiper-slide-index", i);
        });

        for (var p = 0; p < h.length; p += 1) {
          s.append(m(h[p].cloneNode(!0)).addClass(i.slideDuplicateClass));
        }

        for (var u = d.length - 1; u >= 0; u -= 1) {
          s.prepend(m(d[u].cloneNode(!0)).addClass(i.slideDuplicateClass));
        }
      },
      loopFix: function loopFix() {
        this.emit("beforeLoopFix");
        var e,
            t = this.activeIndex,
            i = this.slides,
            s = this.loopedSlides,
            a = this.allowSlidePrev,
            r = this.allowSlideNext,
            n = this.snapGrid,
            l = this.rtlTranslate;
        this.allowSlidePrev = !0, this.allowSlideNext = !0;
        var o = -n[t] - this.getTranslate();
        if (t < s) e = i.length - 3 * s + t, e += s, this.slideTo(e, 0, !1, !0) && 0 !== o && this.setTranslate((l ? -this.translate : this.translate) - o);else if (t >= i.length - s) {
          e = -i.length + t + s, e += s, this.slideTo(e, 0, !1, !0) && 0 !== o && this.setTranslate((l ? -this.translate : this.translate) - o);
        }
        this.allowSlidePrev = a, this.allowSlideNext = r, this.emit("loopFix");
      },
      loopDestroy: function loopDestroy() {
        var e = this.$wrapperEl,
            t = this.params,
            i = this.slides;
        e.children("." + t.slideClass + "." + t.slideDuplicateClass + ",." + t.slideClass + "." + t.slideBlankClass).remove(), i.removeAttr("data-swiper-slide-index");
      }
    },
    grabCursor: {
      setGrabCursor: function setGrabCursor(e) {
        if (!(this.support.touch || !this.params.simulateTouch || this.params.watchOverflow && this.isLocked || this.params.cssMode)) {
          var t = this.el;
          t.style.cursor = "move", t.style.cursor = e ? "-webkit-grabbing" : "-webkit-grab", t.style.cursor = e ? "-moz-grabbin" : "-moz-grab", t.style.cursor = e ? "grabbing" : "grab";
        }
      },
      unsetGrabCursor: function unsetGrabCursor() {
        this.support.touch || this.params.watchOverflow && this.isLocked || this.params.cssMode || (this.el.style.cursor = "");
      }
    },
    manipulation: {
      appendSlide: function appendSlide(e) {
        var t = this.$wrapperEl,
            i = this.params;
        if (i.loop && this.loopDestroy(), "object" == _typeof(e) && "length" in e) for (var s = 0; s < e.length; s += 1) {
          e[s] && t.append(e[s]);
        } else t.append(e);
        i.loop && this.loopCreate(), i.observer && this.support.observer || this.update();
      },
      prependSlide: function prependSlide(e) {
        var t = this.params,
            i = this.$wrapperEl,
            s = this.activeIndex;
        t.loop && this.loopDestroy();
        var a = s + 1;

        if ("object" == _typeof(e) && "length" in e) {
          for (var r = 0; r < e.length; r += 1) {
            e[r] && i.prepend(e[r]);
          }

          a = s + e.length;
        } else i.prepend(e);

        t.loop && this.loopCreate(), t.observer && this.support.observer || this.update(), this.slideTo(a, 0, !1);
      },
      addSlide: function addSlide(e, t) {
        var i = this.$wrapperEl,
            s = this.params,
            a = this.activeIndex;
        s.loop && (a -= this.loopedSlides, this.loopDestroy(), this.slides = i.children("." + s.slideClass));
        var r = this.slides.length;
        if (e <= 0) this.prependSlide(t);else if (e >= r) this.appendSlide(t);else {
          for (var n = a > e ? a + 1 : a, l = [], o = r - 1; o >= e; o -= 1) {
            var d = this.slides.eq(o);
            d.remove(), l.unshift(d);
          }

          if ("object" == _typeof(t) && "length" in t) {
            for (var h = 0; h < t.length; h += 1) {
              t[h] && i.append(t[h]);
            }

            n = a > e ? a + t.length : a;
          } else i.append(t);

          for (var p = 0; p < l.length; p += 1) {
            i.append(l[p]);
          }

          s.loop && this.loopCreate(), s.observer && this.support.observer || this.update(), s.loop ? this.slideTo(n + this.loopedSlides, 0, !1) : this.slideTo(n, 0, !1);
        }
      },
      removeSlide: function removeSlide(e) {
        var t = this.params,
            i = this.$wrapperEl,
            s = this.activeIndex;
        t.loop && (s -= this.loopedSlides, this.loopDestroy(), this.slides = i.children("." + t.slideClass));
        var a,
            r = s;

        if ("object" == _typeof(e) && "length" in e) {
          for (var n = 0; n < e.length; n += 1) {
            a = e[n], this.slides[a] && this.slides.eq(a).remove(), a < r && (r -= 1);
          }

          r = Math.max(r, 0);
        } else a = e, this.slides[a] && this.slides.eq(a).remove(), a < r && (r -= 1), r = Math.max(r, 0);

        t.loop && this.loopCreate(), t.observer && this.support.observer || this.update(), t.loop ? this.slideTo(r + this.loopedSlides, 0, !1) : this.slideTo(r, 0, !1);
      },
      removeAllSlides: function removeAllSlides() {
        for (var e = [], t = 0; t < this.slides.length; t += 1) {
          e.push(t);
        }

        this.removeSlide(e);
      }
    },
    events: {
      attachEvents: function attachEvents() {
        var e = r(),
            t = this.params,
            i = this.touchEvents,
            s = this.el,
            a = this.wrapperEl,
            n = this.device,
            l = this.support;
        this.onTouchStart = O.bind(this), this.onTouchMove = A.bind(this), this.onTouchEnd = D.bind(this), t.cssMode && (this.onScroll = B.bind(this)), this.onClick = N.bind(this);
        var o = !!t.nested;
        if (!l.touch && l.pointerEvents) s.addEventListener(i.start, this.onTouchStart, !1), e.addEventListener(i.move, this.onTouchMove, o), e.addEventListener(i.end, this.onTouchEnd, !1);else {
          if (l.touch) {
            var d = !("touchstart" !== i.start || !l.passiveListener || !t.passiveListeners) && {
              passive: !0,
              capture: !1
            };
            s.addEventListener(i.start, this.onTouchStart, d), s.addEventListener(i.move, this.onTouchMove, l.passiveListener ? {
              passive: !1,
              capture: o
            } : o), s.addEventListener(i.end, this.onTouchEnd, d), i.cancel && s.addEventListener(i.cancel, this.onTouchEnd, d), H || (e.addEventListener("touchstart", X), H = !0);
          }

          (t.simulateTouch && !n.ios && !n.android || t.simulateTouch && !l.touch && n.ios) && (s.addEventListener("mousedown", this.onTouchStart, !1), e.addEventListener("mousemove", this.onTouchMove, o), e.addEventListener("mouseup", this.onTouchEnd, !1));
        }
        (t.preventClicks || t.preventClicksPropagation) && s.addEventListener("click", this.onClick, !0), t.cssMode && a.addEventListener("scroll", this.onScroll), t.updateOnWindowResize ? this.on(n.ios || n.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", G, !0) : this.on("observerUpdate", G, !0);
      },
      detachEvents: function detachEvents() {
        var e = r(),
            t = this.params,
            i = this.touchEvents,
            s = this.el,
            a = this.wrapperEl,
            n = this.device,
            l = this.support,
            o = !!t.nested;
        if (!l.touch && l.pointerEvents) s.removeEventListener(i.start, this.onTouchStart, !1), e.removeEventListener(i.move, this.onTouchMove, o), e.removeEventListener(i.end, this.onTouchEnd, !1);else {
          if (l.touch) {
            var d = !("onTouchStart" !== i.start || !l.passiveListener || !t.passiveListeners) && {
              passive: !0,
              capture: !1
            };
            s.removeEventListener(i.start, this.onTouchStart, d), s.removeEventListener(i.move, this.onTouchMove, o), s.removeEventListener(i.end, this.onTouchEnd, d), i.cancel && s.removeEventListener(i.cancel, this.onTouchEnd, d);
          }

          (t.simulateTouch && !n.ios && !n.android || t.simulateTouch && !l.touch && n.ios) && (s.removeEventListener("mousedown", this.onTouchStart, !1), e.removeEventListener("mousemove", this.onTouchMove, o), e.removeEventListener("mouseup", this.onTouchEnd, !1));
        }
        (t.preventClicks || t.preventClicksPropagation) && s.removeEventListener("click", this.onClick, !0), t.cssMode && a.removeEventListener("scroll", this.onScroll), this.off(n.ios || n.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", G);
      }
    },
    breakpoints: {
      setBreakpoint: function setBreakpoint() {
        var e = this.activeIndex,
            t = this.initialized,
            i = this.loopedSlides,
            s = void 0 === i ? 0 : i,
            a = this.params,
            r = this.$el,
            n = a.breakpoints;

        if (n && (!n || 0 !== Object.keys(n).length)) {
          var l = this.getBreakpoint(n);

          if (l && this.currentBreakpoint !== l) {
            var o = l in n ? n[l] : void 0;
            o && ["slidesPerView", "spaceBetween", "slidesPerGroup", "slidesPerGroupSkip", "slidesPerColumn"].forEach(function (e) {
              var t = o[e];
              void 0 !== t && (o[e] = "slidesPerView" !== e || "AUTO" !== t && "auto" !== t ? "slidesPerView" === e ? parseFloat(t) : parseInt(t, 10) : "auto");
            });
            var d = o || this.originalParams,
                h = a.slidesPerColumn > 1,
                p = d.slidesPerColumn > 1;
            h && !p ? (r.removeClass(a.containerModifierClass + "multirow " + a.containerModifierClass + "multirow-column"), this.emitContainerClasses()) : !h && p && (r.addClass(a.containerModifierClass + "multirow"), "column" === d.slidesPerColumnFill && r.addClass(a.containerModifierClass + "multirow-column"), this.emitContainerClasses());
            var u = d.direction && d.direction !== a.direction,
                c = a.loop && (d.slidesPerView !== a.slidesPerView || u);
            u && t && this.changeDirection(), S(this.params, d), S(this, {
              allowTouchMove: this.params.allowTouchMove,
              allowSlideNext: this.params.allowSlideNext,
              allowSlidePrev: this.params.allowSlidePrev
            }), this.currentBreakpoint = l, c && t && (this.loopDestroy(), this.loopCreate(), this.updateSlides(), this.slideTo(e - s + this.loopedSlides, 0, !1)), this.emit("breakpoint", d);
          }
        }
      },
      getBreakpoint: function getBreakpoint(e) {
        var t = l();

        if (e) {
          var i = !1,
              s = Object.keys(e).map(function (e) {
            if ("string" == typeof e && 0 === e.indexOf("@")) {
              var i = parseFloat(e.substr(1));
              return {
                value: t.innerHeight * i,
                point: e
              };
            }

            return {
              value: e,
              point: e
            };
          });
          s.sort(function (e, t) {
            return parseInt(e.value, 10) - parseInt(t.value, 10);
          });

          for (var a = 0; a < s.length; a += 1) {
            var r = s[a],
                n = r.point;
            r.value <= t.innerWidth && (i = n);
          }

          return i || "max";
        }
      }
    },
    checkOverflow: {
      checkOverflow: function checkOverflow() {
        var e = this.params,
            t = this.isLocked,
            i = this.slides.length > 0 && e.slidesOffsetBefore + e.spaceBetween * (this.slides.length - 1) + this.slides[0].offsetWidth * this.slides.length;
        e.slidesOffsetBefore && e.slidesOffsetAfter && i ? this.isLocked = i <= this.size : this.isLocked = 1 === this.snapGrid.length, this.allowSlideNext = !this.isLocked, this.allowSlidePrev = !this.isLocked, t !== this.isLocked && this.emit(this.isLocked ? "lock" : "unlock"), t && t !== this.isLocked && (this.isEnd = !1, this.navigation && this.navigation.update());
      }
    },
    classes: {
      addClasses: function addClasses() {
        var e = this.classNames,
            t = this.params,
            i = this.rtl,
            s = this.$el,
            a = this.device,
            r = [];
        r.push("initialized"), r.push(t.direction), t.freeMode && r.push("free-mode"), t.autoHeight && r.push("autoheight"), i && r.push("rtl"), t.slidesPerColumn > 1 && (r.push("multirow"), "column" === t.slidesPerColumnFill && r.push("multirow-column")), a.android && r.push("android"), a.ios && r.push("ios"), t.cssMode && r.push("css-mode"), r.forEach(function (i) {
          e.push(t.containerModifierClass + i);
        }), s.addClass(e.join(" ")), this.emitContainerClasses();
      },
      removeClasses: function removeClasses() {
        var e = this.$el,
            t = this.classNames;
        e.removeClass(t.join(" ")), this.emitContainerClasses();
      }
    },
    images: {
      loadImage: function loadImage(e, t, i, s, a, r) {
        var n,
            o = l();

        function d() {
          r && r();
        }

        m(e).parent("picture")[0] || e.complete && a ? d() : t ? ((n = new o.Image()).onload = d, n.onerror = d, s && (n.sizes = s), i && (n.srcset = i), t && (n.src = t)) : d();
      },
      preloadImages: function preloadImages() {
        var e = this;

        function t() {
          null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit("imagesReady")));
        }

        e.imagesToLoad = e.$el.find("img");

        for (var i = 0; i < e.imagesToLoad.length; i += 1) {
          var s = e.imagesToLoad[i];
          e.loadImage(s, s.currentSrc || s.getAttribute("src"), s.srcset || s.getAttribute("srcset"), s.sizes || s.getAttribute("sizes"), !0, t);
        }
      }
    }
  },
      F = {},
      W = function () {
    function t() {
      for (var e, i, s = arguments.length, a = new Array(s), r = 0; r < s; r++) {
        a[r] = arguments[r];
      }

      1 === a.length && a[0].constructor && a[0].constructor === Object ? i = a[0] : (e = a[0], i = a[1]), i || (i = {}), i = S({}, i), e && !i.el && (i.el = e);
      var n = this;
      n.support = z(), n.device = P({
        userAgent: i.userAgent
      }), n.browser = k(), n.eventsListeners = {}, n.eventsAnyListeners = [], Object.keys(V).forEach(function (e) {
        Object.keys(V[e]).forEach(function (i) {
          t.prototype[i] || (t.prototype[i] = V[e][i]);
        });
      }), void 0 === n.modules && (n.modules = {}), Object.keys(n.modules).forEach(function (e) {
        var t = n.modules[e];

        if (t.params) {
          var s = Object.keys(t.params)[0],
              a = t.params[s];
          if ("object" != _typeof(a) || null === a) return;
          if (!(s in i) || !("enabled" in a)) return;
          !0 === i[s] && (i[s] = {
            enabled: !0
          }), "object" != _typeof(i[s]) || "enabled" in i[s] || (i[s].enabled = !0), i[s] || (i[s] = {
            enabled: !1
          });
        }
      });
      var l = S({}, Y);
      n.useParams(l), n.params = S({}, l, F, i), n.originalParams = S({}, n.params), n.passedParams = S({}, i), n.params && n.params.on && Object.keys(n.params.on).forEach(function (e) {
        n.on(e, n.params.on[e]);
      }), n.$ = m;
      var o = m(n.params.el);

      if (e = o[0]) {
        if (o.length > 1) {
          var d = [];
          return o.each(function (e) {
            var s = S({}, i, {
              el: e
            });
            d.push(new t(s));
          }), d;
        }

        var h, p, u;
        return e.swiper = n, e && e.shadowRoot && e.shadowRoot.querySelector ? (h = m(e.shadowRoot.querySelector("." + n.params.wrapperClass))).children = function (e) {
          return o.children(e);
        } : h = o.children("." + n.params.wrapperClass), S(n, {
          $el: o,
          el: e,
          $wrapperEl: h,
          wrapperEl: h[0],
          classNames: [],
          slides: m(),
          slidesGrid: [],
          snapGrid: [],
          slidesSizesGrid: [],
          isHorizontal: function isHorizontal() {
            return "horizontal" === n.params.direction;
          },
          isVertical: function isVertical() {
            return "vertical" === n.params.direction;
          },
          rtl: "rtl" === e.dir.toLowerCase() || "rtl" === o.css("direction"),
          rtlTranslate: "horizontal" === n.params.direction && ("rtl" === e.dir.toLowerCase() || "rtl" === o.css("direction")),
          wrongRTL: "-webkit-box" === h.css("display"),
          activeIndex: 0,
          realIndex: 0,
          isBeginning: !0,
          isEnd: !1,
          translate: 0,
          previousTranslate: 0,
          progress: 0,
          velocity: 0,
          animating: !1,
          allowSlideNext: n.params.allowSlideNext,
          allowSlidePrev: n.params.allowSlidePrev,
          touchEvents: (p = ["touchstart", "touchmove", "touchend", "touchcancel"], u = ["mousedown", "mousemove", "mouseup"], n.support.pointerEvents && (u = ["pointerdown", "pointermove", "pointerup"]), n.touchEventsTouch = {
            start: p[0],
            move: p[1],
            end: p[2],
            cancel: p[3]
          }, n.touchEventsDesktop = {
            start: u[0],
            move: u[1],
            end: u[2]
          }, n.support.touch || !n.params.simulateTouch ? n.touchEventsTouch : n.touchEventsDesktop),
          touchEventsData: {
            isTouched: void 0,
            isMoved: void 0,
            allowTouchCallbacks: void 0,
            touchStartTime: void 0,
            isScrolling: void 0,
            currentTranslate: void 0,
            startTranslate: void 0,
            allowThresholdMove: void 0,
            formElements: "input, select, option, textarea, button, video, label",
            lastClickTime: x(),
            clickTimeout: void 0,
            velocities: [],
            allowMomentumBounce: void 0,
            isTouchEvent: void 0,
            startMoving: void 0
          },
          allowClick: !0,
          allowTouchMove: n.params.allowTouchMove,
          touches: {
            startX: 0,
            startY: 0,
            currentX: 0,
            currentY: 0,
            diff: 0
          },
          imagesToLoad: [],
          imagesLoaded: 0
        }), n.useModules(), n.emit("_swiper"), n.params.init && n.init(), n;
      }
    }

    var i,
        s,
        a,
        r = t.prototype;
    return r.emitContainerClasses = function () {
      var e = this;

      if (e.params._emitClasses && e.el) {
        var t = e.el.className.split(" ").filter(function (t) {
          return 0 === t.indexOf("swiper-container") || 0 === t.indexOf(e.params.containerModifierClass);
        });
        e.emit("_containerClasses", t.join(" "));
      }
    }, r.emitSlidesClasses = function () {
      var e = this;
      e.params._emitClasses && e.el && e.slides.each(function (t) {
        var i = t.className.split(" ").filter(function (t) {
          return 0 === t.indexOf("swiper-slide") || 0 === t.indexOf(e.params.slideClass);
        });
        e.emit("_slideClass", t, i.join(" "));
      });
    }, r.slidesPerViewDynamic = function () {
      var e = this.params,
          t = this.slides,
          i = this.slidesGrid,
          s = this.size,
          a = this.activeIndex,
          r = 1;

      if (e.centeredSlides) {
        for (var n, l = t[a].swiperSlideSize, o = a + 1; o < t.length; o += 1) {
          t[o] && !n && (r += 1, (l += t[o].swiperSlideSize) > s && (n = !0));
        }

        for (var d = a - 1; d >= 0; d -= 1) {
          t[d] && !n && (r += 1, (l += t[d].swiperSlideSize) > s && (n = !0));
        }
      } else for (var h = a + 1; h < t.length; h += 1) {
        i[h] - i[a] < s && (r += 1);
      }

      return r;
    }, r.update = function () {
      var e = this;

      if (e && !e.destroyed) {
        var t = e.snapGrid,
            i = e.params;
        i.breakpoints && e.setBreakpoint(), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (s(), e.params.autoHeight && e.updateAutoHeight()) : (("auto" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || s(), i.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit("update");
      }

      function s() {
        var t = e.rtlTranslate ? -1 * e.translate : e.translate,
            i = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());
        e.setTranslate(i), e.updateActiveIndex(), e.updateSlidesClasses();
      }
    }, r.changeDirection = function (e, t) {
      void 0 === t && (t = !0);
      var i = this.params.direction;
      return e || (e = "horizontal" === i ? "vertical" : "horizontal"), e === i || "horizontal" !== e && "vertical" !== e || (this.$el.removeClass("" + this.params.containerModifierClass + i).addClass("" + this.params.containerModifierClass + e), this.emitContainerClasses(), this.params.direction = e, this.slides.each(function (t) {
        "vertical" === e ? t.style.width = "" : t.style.height = "";
      }), this.emit("changeDirection"), t && this.update()), this;
    }, r.init = function () {
      this.initialized || (this.emit("beforeInit"), this.params.breakpoints && this.setBreakpoint(), this.addClasses(), this.params.loop && this.loopCreate(), this.updateSize(), this.updateSlides(), this.params.watchOverflow && this.checkOverflow(), this.params.grabCursor && this.setGrabCursor(), this.params.preloadImages && this.preloadImages(), this.params.loop ? this.slideTo(this.params.initialSlide + this.loopedSlides, 0, this.params.runCallbacksOnInit) : this.slideTo(this.params.initialSlide, 0, this.params.runCallbacksOnInit), this.attachEvents(), this.initialized = !0, this.emit("init"));
    }, r.destroy = function (e, t) {
      void 0 === e && (e = !0), void 0 === t && (t = !0);
      var i,
          s = this,
          a = s.params,
          r = s.$el,
          n = s.$wrapperEl,
          l = s.slides;
      return void 0 === s.params || s.destroyed || (s.emit("beforeDestroy"), s.initialized = !1, s.detachEvents(), a.loop && s.loopDestroy(), t && (s.removeClasses(), r.removeAttr("style"), n.removeAttr("style"), l && l.length && l.removeClass([a.slideVisibleClass, a.slideActiveClass, a.slideNextClass, a.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")), s.emit("destroy"), Object.keys(s.eventsListeners).forEach(function (e) {
        s.off(e);
      }), !1 !== e && (s.$el[0].swiper = null, i = s, Object.keys(i).forEach(function (e) {
        try {
          i[e] = null;
        } catch (e) {}

        try {
          delete i[e];
        } catch (e) {}
      })), s.destroyed = !0), null;
    }, t.extendDefaults = function (e) {
      S(F, e);
    }, t.installModule = function (e) {
      t.prototype.modules || (t.prototype.modules = {});
      var i = e.name || Object.keys(t.prototype.modules).length + "_" + x();
      t.prototype.modules[i] = e;
    }, t.use = function (e) {
      return Array.isArray(e) ? (e.forEach(function (e) {
        return t.installModule(e);
      }), t) : (t.installModule(e), t);
    }, i = t, a = [{
      key: "extendedDefaults",
      get: function get() {
        return F;
      }
    }, {
      key: "defaults",
      get: function get() {
        return Y;
      }
    }], (s = null) && e(i.prototype, s), a && e(i, a), t;
  }();

  W.use([$, I]);
  var R = {
    update: function update(e) {
      var t = this,
          i = t.params,
          s = i.slidesPerView,
          a = i.slidesPerGroup,
          r = i.centeredSlides,
          n = t.params.virtual,
          l = n.addSlidesBefore,
          o = n.addSlidesAfter,
          d = t.virtual,
          h = d.from,
          p = d.to,
          u = d.slides,
          c = d.slidesGrid,
          v = d.renderSlide,
          f = d.offset;
      t.updateActiveIndex();
      var m,
          g,
          w,
          b = t.activeIndex || 0;
      m = t.rtlTranslate ? "right" : t.isHorizontal() ? "left" : "top", r ? (g = Math.floor(s / 2) + a + o, w = Math.floor(s / 2) + a + l) : (g = s + (a - 1) + o, w = a + l);
      var y = Math.max((b || 0) - w, 0),
          E = Math.min((b || 0) + g, u.length - 1),
          x = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);

      function T() {
        t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();
      }

      if (S(t.virtual, {
        from: y,
        to: E,
        offset: x,
        slidesGrid: t.slidesGrid
      }), h === y && p === E && !e) return t.slidesGrid !== c && x !== f && t.slides.css(m, x + "px"), void t.updateProgress();
      if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, {
        offset: x,
        from: y,
        to: E,
        slides: function () {
          for (var e = [], t = y; t <= E; t += 1) {
            e.push(u[t]);
          }

          return e;
        }()
      }), void (t.params.virtual.renderExternalUpdate && T());
      var C = [],
          M = [];
      if (e) t.$wrapperEl.find("." + t.params.slideClass).remove();else for (var z = h; z <= p; z += 1) {
        (z < y || z > E) && t.$wrapperEl.find("." + t.params.slideClass + '[data-swiper-slide-index="' + z + '"]').remove();
      }

      for (var P = 0; P < u.length; P += 1) {
        P >= y && P <= E && (void 0 === p || e ? M.push(P) : (P > p && M.push(P), P < h && C.push(P)));
      }

      M.forEach(function (e) {
        t.$wrapperEl.append(v(u[e], e));
      }), C.sort(function (e, t) {
        return t - e;
      }).forEach(function (e) {
        t.$wrapperEl.prepend(v(u[e], e));
      }), t.$wrapperEl.children(".swiper-slide").css(m, x + "px"), T();
    },
    renderSlide: function renderSlide(e, t) {
      var i = this.params.virtual;
      if (i.cache && this.virtual.cache[t]) return this.virtual.cache[t];
      var s = i.renderSlide ? m(i.renderSlide.call(this, e, t)) : m('<div class="' + this.params.slideClass + '" data-swiper-slide-index="' + t + '">' + e + "</div>");
      return s.attr("data-swiper-slide-index") || s.attr("data-swiper-slide-index", t), i.cache && (this.virtual.cache[t] = s), s;
    },
    appendSlide: function appendSlide(e) {
      if ("object" == _typeof(e) && "length" in e) for (var t = 0; t < e.length; t += 1) {
        e[t] && this.virtual.slides.push(e[t]);
      } else this.virtual.slides.push(e);
      this.virtual.update(!0);
    },
    prependSlide: function prependSlide(e) {
      var t = this.activeIndex,
          i = t + 1,
          s = 1;

      if (Array.isArray(e)) {
        for (var a = 0; a < e.length; a += 1) {
          e[a] && this.virtual.slides.unshift(e[a]);
        }

        i = t + e.length, s = e.length;
      } else this.virtual.slides.unshift(e);

      if (this.params.virtual.cache) {
        var r = this.virtual.cache,
            n = {};
        Object.keys(r).forEach(function (e) {
          var t = r[e],
              i = t.attr("data-swiper-slide-index");
          i && t.attr("data-swiper-slide-index", parseInt(i, 10) + 1), n[parseInt(e, 10) + s] = t;
        }), this.virtual.cache = n;
      }

      this.virtual.update(!0), this.slideTo(i, 0);
    },
    removeSlide: function removeSlide(e) {
      if (null != e) {
        var t = this.activeIndex;
        if (Array.isArray(e)) for (var i = e.length - 1; i >= 0; i -= 1) {
          this.virtual.slides.splice(e[i], 1), this.params.virtual.cache && delete this.virtual.cache[e[i]], e[i] < t && (t -= 1), t = Math.max(t, 0);
        } else this.virtual.slides.splice(e, 1), this.params.virtual.cache && delete this.virtual.cache[e], e < t && (t -= 1), t = Math.max(t, 0);
        this.virtual.update(!0), this.slideTo(t, 0);
      }
    },
    removeAllSlides: function removeAllSlides() {
      this.virtual.slides = [], this.params.virtual.cache && (this.virtual.cache = {}), this.virtual.update(!0), this.slideTo(0, 0);
    }
  },
      q = {
    name: "virtual",
    params: {
      virtual: {
        enabled: !1,
        slides: [],
        cache: !0,
        renderSlide: null,
        renderExternal: null,
        renderExternalUpdate: !0,
        addSlidesBefore: 0,
        addSlidesAfter: 0
      }
    },
    create: function create() {
      M(this, {
        virtual: t(t({}, R), {}, {
          slides: this.params.virtual.slides,
          cache: {}
        })
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        if (e.params.virtual.enabled) {
          e.classNames.push(e.params.containerModifierClass + "virtual");
          var t = {
            watchSlidesProgress: !0
          };
          S(e.params, t), S(e.originalParams, t), e.params.initialSlide || e.virtual.update();
        }
      },
      setTranslate: function setTranslate(e) {
        e.params.virtual.enabled && e.virtual.update();
      }
    }
  },
      j = {
    handle: function handle(e) {
      var t = l(),
          i = r(),
          s = this.rtlTranslate,
          a = e;
      a.originalEvent && (a = a.originalEvent);
      var n = a.keyCode || a.charCode,
          o = this.params.keyboard.pageUpDown,
          d = o && 33 === n,
          h = o && 34 === n,
          p = 37 === n,
          u = 39 === n,
          c = 38 === n,
          v = 40 === n;
      if (!this.allowSlideNext && (this.isHorizontal() && u || this.isVertical() && v || h)) return !1;
      if (!this.allowSlidePrev && (this.isHorizontal() && p || this.isVertical() && c || d)) return !1;

      if (!(a.shiftKey || a.altKey || a.ctrlKey || a.metaKey || i.activeElement && i.activeElement.nodeName && ("input" === i.activeElement.nodeName.toLowerCase() || "textarea" === i.activeElement.nodeName.toLowerCase()))) {
        if (this.params.keyboard.onlyInViewport && (d || h || p || u || c || v)) {
          var f = !1;
          if (this.$el.parents("." + this.params.slideClass).length > 0 && 0 === this.$el.parents("." + this.params.slideActiveClass).length) return;
          var m = t.innerWidth,
              g = t.innerHeight,
              w = this.$el.offset();
          s && (w.left -= this.$el[0].scrollLeft);

          for (var b = [[w.left, w.top], [w.left + this.width, w.top], [w.left, w.top + this.height], [w.left + this.width, w.top + this.height]], y = 0; y < b.length; y += 1) {
            var E = b[y];
            E[0] >= 0 && E[0] <= m && E[1] >= 0 && E[1] <= g && (f = !0);
          }

          if (!f) return;
        }

        this.isHorizontal() ? ((d || h || p || u) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), ((h || u) && !s || (d || p) && s) && this.slideNext(), ((d || p) && !s || (h || u) && s) && this.slidePrev()) : ((d || h || c || v) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), (h || v) && this.slideNext(), (d || c) && this.slidePrev()), this.emit("keyPress", n);
      }
    },
    enable: function enable() {
      var e = r();
      this.keyboard.enabled || (m(e).on("keydown", this.keyboard.handle), this.keyboard.enabled = !0);
    },
    disable: function disable() {
      var e = r();
      this.keyboard.enabled && (m(e).off("keydown", this.keyboard.handle), this.keyboard.enabled = !1);
    }
  },
      _ = {
    name: "keyboard",
    params: {
      keyboard: {
        enabled: !1,
        onlyInViewport: !0,
        pageUpDown: !0
      }
    },
    create: function create() {
      M(this, {
        keyboard: t({
          enabled: !1
        }, j)
      });
    },
    on: {
      init: function init(e) {
        e.params.keyboard.enabled && e.keyboard.enable();
      },
      destroy: function destroy(e) {
        e.keyboard.enabled && e.keyboard.disable();
      }
    }
  };
  var U = {
    lastScrollTime: x(),
    lastEventBeforeSnap: void 0,
    recentWheelEvents: [],
    event: function event() {
      return l().navigator.userAgent.indexOf("firefox") > -1 ? "DOMMouseScroll" : function () {
        var e = r(),
            t = ("onwheel" in e);

        if (!t) {
          var i = e.createElement("div");
          i.setAttribute("onwheel", "return;"), t = "function" == typeof i.onwheel;
        }

        return !t && e.implementation && e.implementation.hasFeature && !0 !== e.implementation.hasFeature("", "") && (t = e.implementation.hasFeature("Events.wheel", "3.0")), t;
      }() ? "wheel" : "mousewheel";
    },
    normalize: function normalize(e) {
      var t = 0,
          i = 0,
          s = 0,
          a = 0;
      return "detail" in e && (i = e.detail), "wheelDelta" in e && (i = -e.wheelDelta / 120), "wheelDeltaY" in e && (i = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = i, i = 0), s = 10 * t, a = 10 * i, "deltaY" in e && (a = e.deltaY), "deltaX" in e && (s = e.deltaX), e.shiftKey && !s && (s = a, a = 0), (s || a) && e.deltaMode && (1 === e.deltaMode ? (s *= 40, a *= 40) : (s *= 800, a *= 800)), s && !t && (t = s < 1 ? -1 : 1), a && !i && (i = a < 1 ? -1 : 1), {
        spinX: t,
        spinY: i,
        pixelX: s,
        pixelY: a
      };
    },
    handleMouseEnter: function handleMouseEnter() {
      this.mouseEntered = !0;
    },
    handleMouseLeave: function handleMouseLeave() {
      this.mouseEntered = !1;
    },
    handle: function handle(e) {
      var t = e,
          i = this,
          s = i.params.mousewheel;
      i.params.cssMode && t.preventDefault();
      var a = i.$el;
      if ("container" !== i.params.mousewheel.eventsTarget && (a = m(i.params.mousewheel.eventsTarget)), !i.mouseEntered && !a[0].contains(t.target) && !s.releaseOnEdges) return !0;
      t.originalEvent && (t = t.originalEvent);
      var r = 0,
          n = i.rtlTranslate ? -1 : 1,
          l = U.normalize(t);

      if (s.forceToAxis) {
        if (i.isHorizontal()) {
          if (!(Math.abs(l.pixelX) > Math.abs(l.pixelY))) return !0;
          r = -l.pixelX * n;
        } else {
          if (!(Math.abs(l.pixelY) > Math.abs(l.pixelX))) return !0;
          r = -l.pixelY;
        }
      } else r = Math.abs(l.pixelX) > Math.abs(l.pixelY) ? -l.pixelX * n : -l.pixelY;

      if (0 === r) return !0;

      if (s.invert && (r = -r), i.params.freeMode) {
        var o = {
          time: x(),
          delta: Math.abs(r),
          direction: Math.sign(r)
        },
            d = i.mousewheel.lastEventBeforeSnap,
            h = d && o.time < d.time + 500 && o.delta <= d.delta && o.direction === d.direction;

        if (!h) {
          i.mousewheel.lastEventBeforeSnap = void 0, i.params.loop && i.loopFix();
          var p = i.getTranslate() + r * s.sensitivity,
              u = i.isBeginning,
              c = i.isEnd;

          if (p >= i.minTranslate() && (p = i.minTranslate()), p <= i.maxTranslate() && (p = i.maxTranslate()), i.setTransition(0), i.setTranslate(p), i.updateProgress(), i.updateActiveIndex(), i.updateSlidesClasses(), (!u && i.isBeginning || !c && i.isEnd) && i.updateSlidesClasses(), i.params.freeModeSticky) {
            clearTimeout(i.mousewheel.timeout), i.mousewheel.timeout = void 0;
            var v = i.mousewheel.recentWheelEvents;
            v.length >= 15 && v.shift();
            var f = v.length ? v[v.length - 1] : void 0,
                g = v[0];
            if (v.push(o), f && (o.delta > f.delta || o.direction !== f.direction)) v.splice(0);else if (v.length >= 15 && o.time - g.time < 500 && g.delta - o.delta >= 1 && o.delta <= 6) {
              var w = r > 0 ? .8 : .2;
              i.mousewheel.lastEventBeforeSnap = o, v.splice(0), i.mousewheel.timeout = E(function () {
                i.slideToClosest(i.params.speed, !0, void 0, w);
              }, 0);
            }
            i.mousewheel.timeout || (i.mousewheel.timeout = E(function () {
              i.mousewheel.lastEventBeforeSnap = o, v.splice(0), i.slideToClosest(i.params.speed, !0, void 0, .5);
            }, 500));
          }

          if (h || i.emit("scroll", t), i.params.autoplay && i.params.autoplayDisableOnInteraction && i.autoplay.stop(), p === i.minTranslate() || p === i.maxTranslate()) return !0;
        }
      } else {
        var b = {
          time: x(),
          delta: Math.abs(r),
          direction: Math.sign(r),
          raw: e
        },
            y = i.mousewheel.recentWheelEvents;
        y.length >= 2 && y.shift();
        var T = y.length ? y[y.length - 1] : void 0;
        if (y.push(b), T ? (b.direction !== T.direction || b.delta > T.delta || b.time > T.time + 150) && i.mousewheel.animateSlider(b) : i.mousewheel.animateSlider(b), i.mousewheel.releaseScroll(b)) return !0;
      }

      return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;
    },
    animateSlider: function animateSlider(e) {
      var t = l();
      return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta) && !(this.params.mousewheel.thresholdTime && x() - this.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) && (e.delta >= 6 && x() - this.mousewheel.lastScrollTime < 60 || (e.direction < 0 ? this.isEnd && !this.params.loop || this.animating || (this.slideNext(), this.emit("scroll", e.raw)) : this.isBeginning && !this.params.loop || this.animating || (this.slidePrev(), this.emit("scroll", e.raw)), this.mousewheel.lastScrollTime = new t.Date().getTime(), !1));
    },
    releaseScroll: function releaseScroll(e) {
      var t = this.params.mousewheel;

      if (e.direction < 0) {
        if (this.isEnd && !this.params.loop && t.releaseOnEdges) return !0;
      } else if (this.isBeginning && !this.params.loop && t.releaseOnEdges) return !0;

      return !1;
    },
    enable: function enable() {
      var e = U.event();
      if (this.params.cssMode) return this.wrapperEl.removeEventListener(e, this.mousewheel.handle), !0;
      if (!e) return !1;
      if (this.mousewheel.enabled) return !1;
      var t = this.$el;
      return "container" !== this.params.mousewheel.eventsTarget && (t = m(this.params.mousewheel.eventsTarget)), t.on("mouseenter", this.mousewheel.handleMouseEnter), t.on("mouseleave", this.mousewheel.handleMouseLeave), t.on(e, this.mousewheel.handle), this.mousewheel.enabled = !0, !0;
    },
    disable: function disable() {
      var e = U.event();
      if (this.params.cssMode) return this.wrapperEl.addEventListener(e, this.mousewheel.handle), !0;
      if (!e) return !1;
      if (!this.mousewheel.enabled) return !1;
      var t = this.$el;
      return "container" !== this.params.mousewheel.eventsTarget && (t = m(this.params.mousewheel.eventsTarget)), t.off(e, this.mousewheel.handle), this.mousewheel.enabled = !1, !0;
    }
  },
      K = {
    update: function update() {
      var e = this.params.navigation;

      if (!this.params.loop) {
        var t = this.navigation,
            i = t.$nextEl,
            s = t.$prevEl;
        s && s.length > 0 && (this.isBeginning ? s.addClass(e.disabledClass) : s.removeClass(e.disabledClass), s[this.params.watchOverflow && this.isLocked ? "addClass" : "removeClass"](e.lockClass)), i && i.length > 0 && (this.isEnd ? i.addClass(e.disabledClass) : i.removeClass(e.disabledClass), i[this.params.watchOverflow && this.isLocked ? "addClass" : "removeClass"](e.lockClass));
      }
    },
    onPrevClick: function onPrevClick(e) {
      e.preventDefault(), this.isBeginning && !this.params.loop || this.slidePrev();
    },
    onNextClick: function onNextClick(e) {
      e.preventDefault(), this.isEnd && !this.params.loop || this.slideNext();
    },
    init: function init() {
      var e,
          t,
          i = this.params.navigation;
      (i.nextEl || i.prevEl) && (i.nextEl && (e = m(i.nextEl), this.params.uniqueNavElements && "string" == typeof i.nextEl && e.length > 1 && 1 === this.$el.find(i.nextEl).length && (e = this.$el.find(i.nextEl))), i.prevEl && (t = m(i.prevEl), this.params.uniqueNavElements && "string" == typeof i.prevEl && t.length > 1 && 1 === this.$el.find(i.prevEl).length && (t = this.$el.find(i.prevEl))), e && e.length > 0 && e.on("click", this.navigation.onNextClick), t && t.length > 0 && t.on("click", this.navigation.onPrevClick), S(this.navigation, {
        $nextEl: e,
        nextEl: e && e[0],
        $prevEl: t,
        prevEl: t && t[0]
      }));
    },
    destroy: function destroy() {
      var e = this.navigation,
          t = e.$nextEl,
          i = e.$prevEl;
      t && t.length && (t.off("click", this.navigation.onNextClick), t.removeClass(this.params.navigation.disabledClass)), i && i.length && (i.off("click", this.navigation.onPrevClick), i.removeClass(this.params.navigation.disabledClass));
    }
  },
      Z = {
    update: function update() {
      var e = this.rtl,
          t = this.params.pagination;

      if (t.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {
        var i,
            s = this.virtual && this.params.virtual.enabled ? this.virtual.slides.length : this.slides.length,
            a = this.pagination.$el,
            r = this.params.loop ? Math.ceil((s - 2 * this.loopedSlides) / this.params.slidesPerGroup) : this.snapGrid.length;

        if (this.params.loop ? ((i = Math.ceil((this.activeIndex - this.loopedSlides) / this.params.slidesPerGroup)) > s - 1 - 2 * this.loopedSlides && (i -= s - 2 * this.loopedSlides), i > r - 1 && (i -= r), i < 0 && "bullets" !== this.params.paginationType && (i = r + i)) : i = void 0 !== this.snapIndex ? this.snapIndex : this.activeIndex || 0, "bullets" === t.type && this.pagination.bullets && this.pagination.bullets.length > 0) {
          var n,
              l,
              o,
              d = this.pagination.bullets;
          if (t.dynamicBullets && (this.pagination.bulletSize = d.eq(0)[this.isHorizontal() ? "outerWidth" : "outerHeight"](!0), a.css(this.isHorizontal() ? "width" : "height", this.pagination.bulletSize * (t.dynamicMainBullets + 4) + "px"), t.dynamicMainBullets > 1 && void 0 !== this.previousIndex && (this.pagination.dynamicBulletIndex += i - this.previousIndex, this.pagination.dynamicBulletIndex > t.dynamicMainBullets - 1 ? this.pagination.dynamicBulletIndex = t.dynamicMainBullets - 1 : this.pagination.dynamicBulletIndex < 0 && (this.pagination.dynamicBulletIndex = 0)), n = i - this.pagination.dynamicBulletIndex, o = ((l = n + (Math.min(d.length, t.dynamicMainBullets) - 1)) + n) / 2), d.removeClass(t.bulletActiveClass + " " + t.bulletActiveClass + "-next " + t.bulletActiveClass + "-next-next " + t.bulletActiveClass + "-prev " + t.bulletActiveClass + "-prev-prev " + t.bulletActiveClass + "-main"), a.length > 1) d.each(function (e) {
            var s = m(e),
                a = s.index();
            a === i && s.addClass(t.bulletActiveClass), t.dynamicBullets && (a >= n && a <= l && s.addClass(t.bulletActiveClass + "-main"), a === n && s.prev().addClass(t.bulletActiveClass + "-prev").prev().addClass(t.bulletActiveClass + "-prev-prev"), a === l && s.next().addClass(t.bulletActiveClass + "-next").next().addClass(t.bulletActiveClass + "-next-next"));
          });else {
            var h = d.eq(i),
                p = h.index();

            if (h.addClass(t.bulletActiveClass), t.dynamicBullets) {
              for (var u = d.eq(n), c = d.eq(l), v = n; v <= l; v += 1) {
                d.eq(v).addClass(t.bulletActiveClass + "-main");
              }

              if (this.params.loop) {
                if (p >= d.length - t.dynamicMainBullets) {
                  for (var f = t.dynamicMainBullets; f >= 0; f -= 1) {
                    d.eq(d.length - f).addClass(t.bulletActiveClass + "-main");
                  }

                  d.eq(d.length - t.dynamicMainBullets - 1).addClass(t.bulletActiveClass + "-prev");
                } else u.prev().addClass(t.bulletActiveClass + "-prev").prev().addClass(t.bulletActiveClass + "-prev-prev"), c.next().addClass(t.bulletActiveClass + "-next").next().addClass(t.bulletActiveClass + "-next-next");
              } else u.prev().addClass(t.bulletActiveClass + "-prev").prev().addClass(t.bulletActiveClass + "-prev-prev"), c.next().addClass(t.bulletActiveClass + "-next").next().addClass(t.bulletActiveClass + "-next-next");
            }
          }

          if (t.dynamicBullets) {
            var g = Math.min(d.length, t.dynamicMainBullets + 4),
                w = (this.pagination.bulletSize * g - this.pagination.bulletSize) / 2 - o * this.pagination.bulletSize,
                b = e ? "right" : "left";
            d.css(this.isHorizontal() ? b : "top", w + "px");
          }
        }

        if ("fraction" === t.type && (a.find("." + t.currentClass).text(t.formatFractionCurrent(i + 1)), a.find("." + t.totalClass).text(t.formatFractionTotal(r))), "progressbar" === t.type) {
          var y;
          y = t.progressbarOpposite ? this.isHorizontal() ? "vertical" : "horizontal" : this.isHorizontal() ? "horizontal" : "vertical";
          var E = (i + 1) / r,
              x = 1,
              T = 1;
          "horizontal" === y ? x = E : T = E, a.find("." + t.progressbarFillClass).transform("translate3d(0,0,0) scaleX(" + x + ") scaleY(" + T + ")").transition(this.params.speed);
        }

        "custom" === t.type && t.renderCustom ? (a.html(t.renderCustom(this, i + 1, r)), this.emit("paginationRender", a[0])) : this.emit("paginationUpdate", a[0]), a[this.params.watchOverflow && this.isLocked ? "addClass" : "removeClass"](t.lockClass);
      }
    },
    render: function render() {
      var e = this.params.pagination;

      if (e.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {
        var t = this.virtual && this.params.virtual.enabled ? this.virtual.slides.length : this.slides.length,
            i = this.pagination.$el,
            s = "";

        if ("bullets" === e.type) {
          for (var a = this.params.loop ? Math.ceil((t - 2 * this.loopedSlides) / this.params.slidesPerGroup) : this.snapGrid.length, r = 0; r < a; r += 1) {
            e.renderBullet ? s += e.renderBullet.call(this, r, e.bulletClass) : s += "<" + e.bulletElement + ' class="' + e.bulletClass + '"></' + e.bulletElement + ">";
          }

          i.html(s), this.pagination.bullets = i.find("." + e.bulletClass);
        }

        "fraction" === e.type && (s = e.renderFraction ? e.renderFraction.call(this, e.currentClass, e.totalClass) : '<span class="' + e.currentClass + '"></span> / <span class="' + e.totalClass + '"></span>', i.html(s)), "progressbar" === e.type && (s = e.renderProgressbar ? e.renderProgressbar.call(this, e.progressbarFillClass) : '<span class="' + e.progressbarFillClass + '"></span>', i.html(s)), "custom" !== e.type && this.emit("paginationRender", this.pagination.$el[0]);
      }
    },
    init: function init() {
      var e = this,
          t = e.params.pagination;

      if (t.el) {
        var i = m(t.el);
        0 !== i.length && (e.params.uniqueNavElements && "string" == typeof t.el && i.length > 1 && (i = e.$el.find(t.el)), "bullets" === t.type && t.clickable && i.addClass(t.clickableClass), i.addClass(t.modifierClass + t.type), "bullets" === t.type && t.dynamicBullets && (i.addClass("" + t.modifierClass + t.type + "-dynamic"), e.pagination.dynamicBulletIndex = 0, t.dynamicMainBullets < 1 && (t.dynamicMainBullets = 1)), "progressbar" === t.type && t.progressbarOpposite && i.addClass(t.progressbarOppositeClass), t.clickable && i.on("click", "." + t.bulletClass, function (t) {
          t.preventDefault();
          var i = m(this).index() * e.params.slidesPerGroup;
          e.params.loop && (i += e.loopedSlides), e.slideTo(i);
        }), S(e.pagination, {
          $el: i,
          el: i[0]
        }));
      }
    },
    destroy: function destroy() {
      var e = this.params.pagination;

      if (e.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length) {
        var t = this.pagination.$el;
        t.removeClass(e.hiddenClass), t.removeClass(e.modifierClass + e.type), this.pagination.bullets && this.pagination.bullets.removeClass(e.bulletActiveClass), e.clickable && t.off("click", "." + e.bulletClass);
      }
    }
  },
      J = {
    setTranslate: function setTranslate() {
      if (this.params.scrollbar.el && this.scrollbar.el) {
        var e = this.scrollbar,
            t = this.rtlTranslate,
            i = this.progress,
            s = e.dragSize,
            a = e.trackSize,
            r = e.$dragEl,
            n = e.$el,
            l = this.params.scrollbar,
            o = s,
            d = (a - s) * i;
        t ? (d = -d) > 0 ? (o = s - d, d = 0) : -d + s > a && (o = a + d) : d < 0 ? (o = s + d, d = 0) : d + s > a && (o = a - d), this.isHorizontal() ? (r.transform("translate3d(" + d + "px, 0, 0)"), r[0].style.width = o + "px") : (r.transform("translate3d(0px, " + d + "px, 0)"), r[0].style.height = o + "px"), l.hide && (clearTimeout(this.scrollbar.timeout), n[0].style.opacity = 1, this.scrollbar.timeout = setTimeout(function () {
          n[0].style.opacity = 0, n.transition(400);
        }, 1e3));
      }
    },
    setTransition: function setTransition(e) {
      this.params.scrollbar.el && this.scrollbar.el && this.scrollbar.$dragEl.transition(e);
    },
    updateSize: function updateSize() {
      if (this.params.scrollbar.el && this.scrollbar.el) {
        var e = this.scrollbar,
            t = e.$dragEl,
            i = e.$el;
        t[0].style.width = "", t[0].style.height = "";
        var s,
            a = this.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,
            r = this.size / this.virtualSize,
            n = r * (a / this.size);
        s = "auto" === this.params.scrollbar.dragSize ? a * r : parseInt(this.params.scrollbar.dragSize, 10), this.isHorizontal() ? t[0].style.width = s + "px" : t[0].style.height = s + "px", i[0].style.display = r >= 1 ? "none" : "", this.params.scrollbar.hide && (i[0].style.opacity = 0), S(e, {
          trackSize: a,
          divider: r,
          moveDivider: n,
          dragSize: s
        }), e.$el[this.params.watchOverflow && this.isLocked ? "addClass" : "removeClass"](this.params.scrollbar.lockClass);
      }
    },
    getPointerPosition: function getPointerPosition(e) {
      return this.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientX : e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientY : e.clientY;
    },
    setDragPosition: function setDragPosition(e) {
      var t,
          i = this.scrollbar,
          s = this.rtlTranslate,
          a = i.$el,
          r = i.dragSize,
          n = i.trackSize,
          l = i.dragStartPos;
      t = (i.getPointerPosition(e) - a.offset()[this.isHorizontal() ? "left" : "top"] - (null !== l ? l : r / 2)) / (n - r), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t);
      var o = this.minTranslate() + (this.maxTranslate() - this.minTranslate()) * t;
      this.updateProgress(o), this.setTranslate(o), this.updateActiveIndex(), this.updateSlidesClasses();
    },
    onDragStart: function onDragStart(e) {
      var t = this.params.scrollbar,
          i = this.scrollbar,
          s = this.$wrapperEl,
          a = i.$el,
          r = i.$dragEl;
      this.scrollbar.isTouched = !0, this.scrollbar.dragStartPos = e.target === r[0] || e.target === r ? i.getPointerPosition(e) - e.target.getBoundingClientRect()[this.isHorizontal() ? "left" : "top"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), r.transition(100), i.setDragPosition(e), clearTimeout(this.scrollbar.dragTimeout), a.transition(0), t.hide && a.css("opacity", 1), this.params.cssMode && this.$wrapperEl.css("scroll-snap-type", "none"), this.emit("scrollbarDragStart", e);
    },
    onDragMove: function onDragMove(e) {
      var t = this.scrollbar,
          i = this.$wrapperEl,
          s = t.$el,
          a = t.$dragEl;
      this.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), i.transition(0), s.transition(0), a.transition(0), this.emit("scrollbarDragMove", e));
    },
    onDragEnd: function onDragEnd(e) {
      var t = this.params.scrollbar,
          i = this.scrollbar,
          s = this.$wrapperEl,
          a = i.$el;
      this.scrollbar.isTouched && (this.scrollbar.isTouched = !1, this.params.cssMode && (this.$wrapperEl.css("scroll-snap-type", ""), s.transition("")), t.hide && (clearTimeout(this.scrollbar.dragTimeout), this.scrollbar.dragTimeout = E(function () {
        a.css("opacity", 0), a.transition(400);
      }, 1e3)), this.emit("scrollbarDragEnd", e), t.snapOnRelease && this.slideToClosest());
    },
    enableDraggable: function enableDraggable() {
      if (this.params.scrollbar.el) {
        var e = r(),
            t = this.scrollbar,
            i = this.touchEventsTouch,
            s = this.touchEventsDesktop,
            a = this.params,
            n = this.support,
            l = t.$el[0],
            o = !(!n.passiveListener || !a.passiveListeners) && {
          passive: !1,
          capture: !1
        },
            d = !(!n.passiveListener || !a.passiveListeners) && {
          passive: !0,
          capture: !1
        };
        n.touch ? (l.addEventListener(i.start, this.scrollbar.onDragStart, o), l.addEventListener(i.move, this.scrollbar.onDragMove, o), l.addEventListener(i.end, this.scrollbar.onDragEnd, d)) : (l.addEventListener(s.start, this.scrollbar.onDragStart, o), e.addEventListener(s.move, this.scrollbar.onDragMove, o), e.addEventListener(s.end, this.scrollbar.onDragEnd, d));
      }
    },
    disableDraggable: function disableDraggable() {
      if (this.params.scrollbar.el) {
        var e = r(),
            t = this.scrollbar,
            i = this.touchEventsTouch,
            s = this.touchEventsDesktop,
            a = this.params,
            n = this.support,
            l = t.$el[0],
            o = !(!n.passiveListener || !a.passiveListeners) && {
          passive: !1,
          capture: !1
        },
            d = !(!n.passiveListener || !a.passiveListeners) && {
          passive: !0,
          capture: !1
        };
        n.touch ? (l.removeEventListener(i.start, this.scrollbar.onDragStart, o), l.removeEventListener(i.move, this.scrollbar.onDragMove, o), l.removeEventListener(i.end, this.scrollbar.onDragEnd, d)) : (l.removeEventListener(s.start, this.scrollbar.onDragStart, o), e.removeEventListener(s.move, this.scrollbar.onDragMove, o), e.removeEventListener(s.end, this.scrollbar.onDragEnd, d));
      }
    },
    init: function init() {
      if (this.params.scrollbar.el) {
        var e = this.scrollbar,
            t = this.$el,
            i = this.params.scrollbar,
            s = m(i.el);
        this.params.uniqueNavElements && "string" == typeof i.el && s.length > 1 && 1 === t.find(i.el).length && (s = t.find(i.el));
        var a = s.find("." + this.params.scrollbar.dragClass);
        0 === a.length && (a = m('<div class="' + this.params.scrollbar.dragClass + '"></div>'), s.append(a)), S(e, {
          $el: s,
          el: s[0],
          $dragEl: a,
          dragEl: a[0]
        }), i.draggable && e.enableDraggable();
      }
    },
    destroy: function destroy() {
      this.scrollbar.disableDraggable();
    }
  },
      Q = {
    setTransform: function setTransform(e, t) {
      var i = this.rtl,
          s = m(e),
          a = i ? -1 : 1,
          r = s.attr("data-swiper-parallax") || "0",
          n = s.attr("data-swiper-parallax-x"),
          l = s.attr("data-swiper-parallax-y"),
          o = s.attr("data-swiper-parallax-scale"),
          d = s.attr("data-swiper-parallax-opacity");

      if (n || l ? (n = n || "0", l = l || "0") : this.isHorizontal() ? (n = r, l = "0") : (l = r, n = "0"), n = n.indexOf("%") >= 0 ? parseInt(n, 10) * t * a + "%" : n * t * a + "px", l = l.indexOf("%") >= 0 ? parseInt(l, 10) * t + "%" : l * t + "px", null != d) {
        var h = d - (d - 1) * (1 - Math.abs(t));
        s[0].style.opacity = h;
      }

      if (null == o) s.transform("translate3d(" + n + ", " + l + ", 0px)");else {
        var p = o - (o - 1) * (1 - Math.abs(t));
        s.transform("translate3d(" + n + ", " + l + ", 0px) scale(" + p + ")");
      }
    },
    setTranslate: function setTranslate() {
      var e = this,
          t = e.$el,
          i = e.slides,
          s = e.progress,
          a = e.snapGrid;
      t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {
        e.parallax.setTransform(t, s);
      }), i.each(function (t, i) {
        var r = t.progress;
        e.params.slidesPerGroup > 1 && "auto" !== e.params.slidesPerView && (r += Math.ceil(i / 2) - s * (a.length - 1)), r = Math.min(Math.max(r, -1), 1), m(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {
          e.parallax.setTransform(t, r);
        });
      });
    },
    setTransition: function setTransition(e) {
      void 0 === e && (e = this.params.speed);
      this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function (t) {
        var i = m(t),
            s = parseInt(i.attr("data-swiper-parallax-duration"), 10) || e;
        0 === e && (s = 0), i.transition(s);
      });
    }
  },
      ee = {
    getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
      if (e.targetTouches.length < 2) return 1;
      var t = e.targetTouches[0].pageX,
          i = e.targetTouches[0].pageY,
          s = e.targetTouches[1].pageX,
          a = e.targetTouches[1].pageY;
      return Math.sqrt(Math.pow(s - t, 2) + Math.pow(a - i, 2));
    },
    onGestureStart: function onGestureStart(e) {
      var t = this.support,
          i = this.params.zoom,
          s = this.zoom,
          a = s.gesture;

      if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !t.gestures) {
        if ("touchstart" !== e.type || "touchstart" === e.type && e.targetTouches.length < 2) return;
        s.fakeGestureTouched = !0, a.scaleStart = ee.getDistanceBetweenTouches(e);
      }

      a.$slideEl && a.$slideEl.length || (a.$slideEl = m(e.target).closest("." + this.params.slideClass), 0 === a.$slideEl.length && (a.$slideEl = this.slides.eq(this.activeIndex)), a.$imageEl = a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), a.$imageWrapEl = a.$imageEl.parent("." + i.containerClass), a.maxRatio = a.$imageWrapEl.attr("data-swiper-zoom") || i.maxRatio, 0 !== a.$imageWrapEl.length) ? (a.$imageEl && a.$imageEl.transition(0), this.zoom.isScaling = !0) : a.$imageEl = void 0;
    },
    onGestureChange: function onGestureChange(e) {
      var t = this.support,
          i = this.params.zoom,
          s = this.zoom,
          a = s.gesture;

      if (!t.gestures) {
        if ("touchmove" !== e.type || "touchmove" === e.type && e.targetTouches.length < 2) return;
        s.fakeGestureMoved = !0, a.scaleMove = ee.getDistanceBetweenTouches(e);
      }

      a.$imageEl && 0 !== a.$imageEl.length ? (t.gestures ? s.scale = e.scale * s.currentScale : s.scale = a.scaleMove / a.scaleStart * s.currentScale, s.scale > a.maxRatio && (s.scale = a.maxRatio - 1 + Math.pow(s.scale - a.maxRatio + 1, .5)), s.scale < i.minRatio && (s.scale = i.minRatio + 1 - Math.pow(i.minRatio - s.scale + 1, .5)), a.$imageEl.transform("translate3d(0,0,0) scale(" + s.scale + ")")) : "gesturechange" === e.type && s.onGestureStart(e);
    },
    onGestureEnd: function onGestureEnd(e) {
      var t = this.device,
          i = this.support,
          s = this.params.zoom,
          a = this.zoom,
          r = a.gesture;

      if (!i.gestures) {
        if (!a.fakeGestureTouched || !a.fakeGestureMoved) return;
        if ("touchend" !== e.type || "touchend" === e.type && e.changedTouches.length < 2 && !t.android) return;
        a.fakeGestureTouched = !1, a.fakeGestureMoved = !1;
      }

      r.$imageEl && 0 !== r.$imageEl.length && (a.scale = Math.max(Math.min(a.scale, r.maxRatio), s.minRatio), r.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale(" + a.scale + ")"), a.currentScale = a.scale, a.isScaling = !1, 1 === a.scale && (r.$slideEl = void 0));
    },
    onTouchStart: function onTouchStart(e) {
      var t = this.device,
          i = this.zoom,
          s = i.gesture,
          a = i.image;
      s.$imageEl && 0 !== s.$imageEl.length && (a.isTouched || (t.android && e.cancelable && e.preventDefault(), a.isTouched = !0, a.touchesStart.x = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX, a.touchesStart.y = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY));
    },
    onTouchMove: function onTouchMove(e) {
      var t = this.zoom,
          i = t.gesture,
          s = t.image,
          a = t.velocity;

      if (i.$imageEl && 0 !== i.$imageEl.length && (this.allowClick = !1, s.isTouched && i.$slideEl)) {
        s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = T(i.$imageWrapEl[0], "x") || 0, s.startY = T(i.$imageWrapEl[0], "y") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), this.rtl && (s.startX = -s.startX, s.startY = -s.startY));
        var r = s.width * t.scale,
            n = s.height * t.scale;

        if (!(r < i.slideWidth && n < i.slideHeight)) {
          if (s.minX = Math.min(i.slideWidth / 2 - r / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - n / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !t.isScaling) {
            if (this.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1);
            if (!this.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1);
          }

          e.cancelable && e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), a.prevPositionX || (a.prevPositionX = s.touchesCurrent.x), a.prevPositionY || (a.prevPositionY = s.touchesCurrent.y), a.prevTime || (a.prevTime = Date.now()), a.x = (s.touchesCurrent.x - a.prevPositionX) / (Date.now() - a.prevTime) / 2, a.y = (s.touchesCurrent.y - a.prevPositionY) / (Date.now() - a.prevTime) / 2, Math.abs(s.touchesCurrent.x - a.prevPositionX) < 2 && (a.x = 0), Math.abs(s.touchesCurrent.y - a.prevPositionY) < 2 && (a.y = 0), a.prevPositionX = s.touchesCurrent.x, a.prevPositionY = s.touchesCurrent.y, a.prevTime = Date.now(), i.$imageWrapEl.transform("translate3d(" + s.currentX + "px, " + s.currentY + "px,0)");
        }
      }
    },
    onTouchEnd: function onTouchEnd() {
      var e = this.zoom,
          t = e.gesture,
          i = e.image,
          s = e.velocity;

      if (t.$imageEl && 0 !== t.$imageEl.length) {
        if (!i.isTouched || !i.isMoved) return i.isTouched = !1, void (i.isMoved = !1);
        i.isTouched = !1, i.isMoved = !1;
        var a = 300,
            r = 300,
            n = s.x * a,
            l = i.currentX + n,
            o = s.y * r,
            d = i.currentY + o;
        0 !== s.x && (a = Math.abs((l - i.currentX) / s.x)), 0 !== s.y && (r = Math.abs((d - i.currentY) / s.y));
        var h = Math.max(a, r);
        i.currentX = l, i.currentY = d;
        var p = i.width * e.scale,
            u = i.height * e.scale;
        i.minX = Math.min(t.slideWidth / 2 - p / 2, 0), i.maxX = -i.minX, i.minY = Math.min(t.slideHeight / 2 - u / 2, 0), i.maxY = -i.minY, i.currentX = Math.max(Math.min(i.currentX, i.maxX), i.minX), i.currentY = Math.max(Math.min(i.currentY, i.maxY), i.minY), t.$imageWrapEl.transition(h).transform("translate3d(" + i.currentX + "px, " + i.currentY + "px,0)");
      }
    },
    onTransitionEnd: function onTransitionEnd() {
      var e = this.zoom,
          t = e.gesture;
      t.$slideEl && this.previousIndex !== this.activeIndex && (t.$imageEl && t.$imageEl.transform("translate3d(0,0,0) scale(1)"), t.$imageWrapEl && t.$imageWrapEl.transform("translate3d(0,0,0)"), e.scale = 1, e.currentScale = 1, t.$slideEl = void 0, t.$imageEl = void 0, t.$imageWrapEl = void 0);
    },
    toggle: function toggle(e) {
      var t = this.zoom;
      t.scale && 1 !== t.scale ? t.out() : t.in(e);
    },
    in: function _in(e) {
      var t,
          i,
          s,
          a,
          r,
          n,
          l,
          o,
          d,
          h,
          p,
          u,
          c,
          v,
          f,
          m,
          g = this.zoom,
          w = this.params.zoom,
          b = g.gesture,
          y = g.image;
      (b.$slideEl || (this.params.virtual && this.params.virtual.enabled && this.virtual ? b.$slideEl = this.$wrapperEl.children("." + this.params.slideActiveClass) : b.$slideEl = this.slides.eq(this.activeIndex), b.$imageEl = b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), b.$imageWrapEl = b.$imageEl.parent("." + w.containerClass)), b.$imageEl && 0 !== b.$imageEl.length) && (b.$slideEl.addClass("" + w.zoomedSlideClass), void 0 === y.touchesStart.x && e ? (t = "touchend" === e.type ? e.changedTouches[0].pageX : e.pageX, i = "touchend" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = y.touchesStart.x, i = y.touchesStart.y), g.scale = b.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, g.currentScale = b.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, e ? (f = b.$slideEl[0].offsetWidth, m = b.$slideEl[0].offsetHeight, s = b.$slideEl.offset().left + f / 2 - t, a = b.$slideEl.offset().top + m / 2 - i, l = b.$imageEl[0].offsetWidth, o = b.$imageEl[0].offsetHeight, d = l * g.scale, h = o * g.scale, c = -(p = Math.min(f / 2 - d / 2, 0)), v = -(u = Math.min(m / 2 - h / 2, 0)), (r = s * g.scale) < p && (r = p), r > c && (r = c), (n = a * g.scale) < u && (n = u), n > v && (n = v)) : (r = 0, n = 0), b.$imageWrapEl.transition(300).transform("translate3d(" + r + "px, " + n + "px,0)"), b.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + g.scale + ")"));
    },
    out: function out() {
      var e = this.zoom,
          t = this.params.zoom,
          i = e.gesture;
      i.$slideEl || (this.params.virtual && this.params.virtual.enabled && this.virtual ? i.$slideEl = this.$wrapperEl.children("." + this.params.slideActiveClass) : i.$slideEl = this.slides.eq(this.activeIndex), i.$imageEl = i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), i.$imageWrapEl = i.$imageEl.parent("." + t.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (e.scale = 1, e.currentScale = 1, i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"), i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"), i.$slideEl.removeClass("" + t.zoomedSlideClass), i.$slideEl = void 0);
    },
    toggleGestures: function toggleGestures(e) {
      var t = this.zoom,
          i = t.slideSelector,
          s = t.passiveListener;
      this.$wrapperEl[e]("gesturestart", i, t.onGestureStart, s), this.$wrapperEl[e]("gesturechange", i, t.onGestureChange, s), this.$wrapperEl[e]("gestureend", i, t.onGestureEnd, s);
    },
    enableGestures: function enableGestures() {
      this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures("on"));
    },
    disableGestures: function disableGestures() {
      this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures("off"));
    },
    enable: function enable() {
      var e = this.support,
          t = this.zoom;

      if (!t.enabled) {
        t.enabled = !0;
        var i = !("touchstart" !== this.touchEvents.start || !e.passiveListener || !this.params.passiveListeners) && {
          passive: !0,
          capture: !1
        },
            s = !e.passiveListener || {
          passive: !1,
          capture: !0
        },
            a = "." + this.params.slideClass;
        this.zoom.passiveListener = i, this.zoom.slideSelector = a, e.gestures ? (this.$wrapperEl.on(this.touchEvents.start, this.zoom.enableGestures, i), this.$wrapperEl.on(this.touchEvents.end, this.zoom.disableGestures, i)) : "touchstart" === this.touchEvents.start && (this.$wrapperEl.on(this.touchEvents.start, a, t.onGestureStart, i), this.$wrapperEl.on(this.touchEvents.move, a, t.onGestureChange, s), this.$wrapperEl.on(this.touchEvents.end, a, t.onGestureEnd, i), this.touchEvents.cancel && this.$wrapperEl.on(this.touchEvents.cancel, a, t.onGestureEnd, i)), this.$wrapperEl.on(this.touchEvents.move, "." + this.params.zoom.containerClass, t.onTouchMove, s);
      }
    },
    disable: function disable() {
      var e = this.zoom;

      if (e.enabled) {
        var t = this.support;
        this.zoom.enabled = !1;
        var i = !("touchstart" !== this.touchEvents.start || !t.passiveListener || !this.params.passiveListeners) && {
          passive: !0,
          capture: !1
        },
            s = !t.passiveListener || {
          passive: !1,
          capture: !0
        },
            a = "." + this.params.slideClass;
        t.gestures ? (this.$wrapperEl.off(this.touchEvents.start, this.zoom.enableGestures, i), this.$wrapperEl.off(this.touchEvents.end, this.zoom.disableGestures, i)) : "touchstart" === this.touchEvents.start && (this.$wrapperEl.off(this.touchEvents.start, a, e.onGestureStart, i), this.$wrapperEl.off(this.touchEvents.move, a, e.onGestureChange, s), this.$wrapperEl.off(this.touchEvents.end, a, e.onGestureEnd, i), this.touchEvents.cancel && this.$wrapperEl.off(this.touchEvents.cancel, a, e.onGestureEnd, i)), this.$wrapperEl.off(this.touchEvents.move, "." + this.params.zoom.containerClass, e.onTouchMove, s);
      }
    }
  },
      te = {
    loadInSlide: function loadInSlide(e, t) {
      void 0 === t && (t = !0);
      var i = this,
          s = i.params.lazy;

      if (void 0 !== e && 0 !== i.slides.length) {
        var a = i.virtual && i.params.virtual.enabled ? i.$wrapperEl.children("." + i.params.slideClass + '[data-swiper-slide-index="' + e + '"]') : i.slides.eq(e),
            r = a.find("." + s.elementClass + ":not(." + s.loadedClass + "):not(." + s.loadingClass + ")");
        !a.hasClass(s.elementClass) || a.hasClass(s.loadedClass) || a.hasClass(s.loadingClass) || r.push(a[0]), 0 !== r.length && r.each(function (e) {
          var r = m(e);
          r.addClass(s.loadingClass);
          var n = r.attr("data-background"),
              l = r.attr("data-src"),
              o = r.attr("data-srcset"),
              d = r.attr("data-sizes"),
              h = r.parent("picture");
          i.loadImage(r[0], l || n, o, d, !1, function () {
            if (null != i && i && (!i || i.params) && !i.destroyed) {
              if (n ? (r.css("background-image", 'url("' + n + '")'), r.removeAttr("data-background")) : (o && (r.attr("srcset", o), r.removeAttr("data-srcset")), d && (r.attr("sizes", d), r.removeAttr("data-sizes")), h.length && h.children("source").each(function (e) {
                var t = m(e);
                t.attr("data-srcset") && (t.attr("srcset", t.attr("data-srcset")), t.removeAttr("data-srcset"));
              }), l && (r.attr("src", l), r.removeAttr("data-src"))), r.addClass(s.loadedClass).removeClass(s.loadingClass), a.find("." + s.preloaderClass).remove(), i.params.loop && t) {
                var e = a.attr("data-swiper-slide-index");

                if (a.hasClass(i.params.slideDuplicateClass)) {
                  var p = i.$wrapperEl.children('[data-swiper-slide-index="' + e + '"]:not(.' + i.params.slideDuplicateClass + ")");
                  i.lazy.loadInSlide(p.index(), !1);
                } else {
                  var u = i.$wrapperEl.children("." + i.params.slideDuplicateClass + '[data-swiper-slide-index="' + e + '"]');
                  i.lazy.loadInSlide(u.index(), !1);
                }
              }

              i.emit("lazyImageReady", a[0], r[0]), i.params.autoHeight && i.updateAutoHeight();
            }
          }), i.emit("lazyImageLoad", a[0], r[0]);
        });
      }
    },
    load: function load() {
      var e = this,
          t = e.$wrapperEl,
          i = e.params,
          s = e.slides,
          a = e.activeIndex,
          r = e.virtual && i.virtual.enabled,
          n = i.lazy,
          l = i.slidesPerView;

      function o(e) {
        if (r) {
          if (t.children("." + i.slideClass + '[data-swiper-slide-index="' + e + '"]').length) return !0;
        } else if (s[e]) return !0;

        return !1;
      }

      function d(e) {
        return r ? m(e).attr("data-swiper-slide-index") : m(e).index();
      }

      if ("auto" === l && (l = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) t.children("." + i.slideVisibleClass).each(function (t) {
        var i = r ? m(t).attr("data-swiper-slide-index") : m(t).index();
        e.lazy.loadInSlide(i);
      });else if (l > 1) for (var h = a; h < a + l; h += 1) {
        o(h) && e.lazy.loadInSlide(h);
      } else e.lazy.loadInSlide(a);
      if (n.loadPrevNext) if (l > 1 || n.loadPrevNextAmount && n.loadPrevNextAmount > 1) {
        for (var p = n.loadPrevNextAmount, u = l, c = Math.min(a + u + Math.max(p, u), s.length), v = Math.max(a - Math.max(u, p), 0), f = a + l; f < c; f += 1) {
          o(f) && e.lazy.loadInSlide(f);
        }

        for (var g = v; g < a; g += 1) {
          o(g) && e.lazy.loadInSlide(g);
        }
      } else {
        var w = t.children("." + i.slideNextClass);
        w.length > 0 && e.lazy.loadInSlide(d(w));
        var b = t.children("." + i.slidePrevClass);
        b.length > 0 && e.lazy.loadInSlide(d(b));
      }
    }
  },
      ie = {
    LinearSpline: function LinearSpline(e, t) {
      var i,
          s,
          a,
          r,
          n,
          l = function l(e, t) {
        for (s = -1, i = e.length; i - s > 1;) {
          e[a = i + s >> 1] <= t ? s = a : i = a;
        }

        return i;
      };

      return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {
        return e ? (n = l(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0;
      }, this;
    },
    getInterpolateFunction: function getInterpolateFunction(e) {
      this.controller.spline || (this.controller.spline = this.params.loop ? new ie.LinearSpline(this.slidesGrid, e.slidesGrid) : new ie.LinearSpline(this.snapGrid, e.snapGrid));
    },
    setTranslate: function setTranslate(e, t) {
      var i,
          s,
          a = this,
          r = a.controller.control,
          n = a.constructor;

      function l(e) {
        var t = a.rtlTranslate ? -a.translate : a.translate;
        "slide" === a.params.controller.by && (a.controller.getInterpolateFunction(e), s = -a.controller.spline.interpolate(-t)), s && "container" !== a.params.controller.by || (i = (e.maxTranslate() - e.minTranslate()) / (a.maxTranslate() - a.minTranslate()), s = (t - a.minTranslate()) * i + e.minTranslate()), a.params.controller.inverse && (s = e.maxTranslate() - s), e.updateProgress(s), e.setTranslate(s, a), e.updateActiveIndex(), e.updateSlidesClasses();
      }

      if (Array.isArray(r)) for (var o = 0; o < r.length; o += 1) {
        r[o] !== t && r[o] instanceof n && l(r[o]);
      } else r instanceof n && t !== r && l(r);
    },
    setTransition: function setTransition(e, t) {
      var i,
          s = this,
          a = s.constructor,
          r = s.controller.control;

      function n(t) {
        t.setTransition(e, s), 0 !== e && (t.transitionStart(), t.params.autoHeight && E(function () {
          t.updateAutoHeight();
        }), t.$wrapperEl.transitionEnd(function () {
          r && (t.params.loop && "slide" === s.params.controller.by && t.loopFix(), t.transitionEnd());
        }));
      }

      if (Array.isArray(r)) for (i = 0; i < r.length; i += 1) {
        r[i] !== t && r[i] instanceof a && n(r[i]);
      } else r instanceof a && t !== r && n(r);
    }
  },
      se = {
    makeElFocusable: function makeElFocusable(e) {
      return e.attr("tabIndex", "0"), e;
    },
    makeElNotFocusable: function makeElNotFocusable(e) {
      return e.attr("tabIndex", "-1"), e;
    },
    addElRole: function addElRole(e, t) {
      return e.attr("role", t), e;
    },
    addElLabel: function addElLabel(e, t) {
      return e.attr("aria-label", t), e;
    },
    disableEl: function disableEl(e) {
      return e.attr("aria-disabled", !0), e;
    },
    enableEl: function enableEl(e) {
      return e.attr("aria-disabled", !1), e;
    },
    onEnterKey: function onEnterKey(e) {
      var t = this.params.a11y;

      if (13 === e.keyCode) {
        var i = m(e.target);
        this.navigation && this.navigation.$nextEl && i.is(this.navigation.$nextEl) && (this.isEnd && !this.params.loop || this.slideNext(), this.isEnd ? this.a11y.notify(t.lastSlideMessage) : this.a11y.notify(t.nextSlideMessage)), this.navigation && this.navigation.$prevEl && i.is(this.navigation.$prevEl) && (this.isBeginning && !this.params.loop || this.slidePrev(), this.isBeginning ? this.a11y.notify(t.firstSlideMessage) : this.a11y.notify(t.prevSlideMessage)), this.pagination && i.is("." + this.params.pagination.bulletClass) && i[0].click();
      }
    },
    notify: function notify(e) {
      var t = this.a11y.liveRegion;
      0 !== t.length && (t.html(""), t.html(e));
    },
    updateNavigation: function updateNavigation() {
      if (!this.params.loop && this.navigation) {
        var e = this.navigation,
            t = e.$nextEl,
            i = e.$prevEl;
        i && i.length > 0 && (this.isBeginning ? (this.a11y.disableEl(i), this.a11y.makeElNotFocusable(i)) : (this.a11y.enableEl(i), this.a11y.makeElFocusable(i))), t && t.length > 0 && (this.isEnd ? (this.a11y.disableEl(t), this.a11y.makeElNotFocusable(t)) : (this.a11y.enableEl(t), this.a11y.makeElFocusable(t)));
      }
    },
    updatePagination: function updatePagination() {
      var e = this,
          t = e.params.a11y;
      e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each(function (i) {
        var s = m(i);
        e.a11y.makeElFocusable(s), e.a11y.addElRole(s, "button"), e.a11y.addElLabel(s, t.paginationBulletMessage.replace(/\{\{index\}\}/, s.index() + 1));
      });
    },
    init: function init() {
      this.$el.append(this.a11y.liveRegion);
      var e,
          t,
          i = this.params.a11y;
      this.navigation && this.navigation.$nextEl && (e = this.navigation.$nextEl), this.navigation && this.navigation.$prevEl && (t = this.navigation.$prevEl), e && (this.a11y.makeElFocusable(e), this.a11y.addElRole(e, "button"), this.a11y.addElLabel(e, i.nextSlideMessage), e.on("keydown", this.a11y.onEnterKey)), t && (this.a11y.makeElFocusable(t), this.a11y.addElRole(t, "button"), this.a11y.addElLabel(t, i.prevSlideMessage), t.on("keydown", this.a11y.onEnterKey)), this.pagination && this.params.pagination.clickable && this.pagination.bullets && this.pagination.bullets.length && this.pagination.$el.on("keydown", "." + this.params.pagination.bulletClass, this.a11y.onEnterKey);
    },
    destroy: function destroy() {
      var e, t;
      this.a11y.liveRegion && this.a11y.liveRegion.length > 0 && this.a11y.liveRegion.remove(), this.navigation && this.navigation.$nextEl && (e = this.navigation.$nextEl), this.navigation && this.navigation.$prevEl && (t = this.navigation.$prevEl), e && e.off("keydown", this.a11y.onEnterKey), t && t.off("keydown", this.a11y.onEnterKey), this.pagination && this.params.pagination.clickable && this.pagination.bullets && this.pagination.bullets.length && this.pagination.$el.off("keydown", "." + this.params.pagination.bulletClass, this.a11y.onEnterKey);
    }
  },
      ae = {
    init: function init() {
      var e = l();

      if (this.params.history) {
        if (!e.history || !e.history.pushState) return this.params.history.enabled = !1, void (this.params.hashNavigation.enabled = !0);
        var t = this.history;
        t.initialized = !0, t.paths = ae.getPathValues(this.params.url), (t.paths.key || t.paths.value) && (t.scrollToSlide(0, t.paths.value, this.params.runCallbacksOnInit), this.params.history.replaceState || e.addEventListener("popstate", this.history.setHistoryPopState));
      }
    },
    destroy: function destroy() {
      var e = l();
      this.params.history.replaceState || e.removeEventListener("popstate", this.history.setHistoryPopState);
    },
    setHistoryPopState: function setHistoryPopState() {
      this.history.paths = ae.getPathValues(this.params.url), this.history.scrollToSlide(this.params.speed, this.history.paths.value, !1);
    },
    getPathValues: function getPathValues(e) {
      var t = l(),
          i = (e ? new URL(e) : t.location).pathname.slice(1).split("/").filter(function (e) {
        return "" !== e;
      }),
          s = i.length;
      return {
        key: i[s - 2],
        value: i[s - 1]
      };
    },
    setHistory: function setHistory(e, t) {
      var i = l();

      if (this.history.initialized && this.params.history.enabled) {
        var s;
        s = this.params.url ? new URL(this.params.url) : i.location;
        var a = this.slides.eq(t),
            r = ae.slugify(a.attr("data-history"));
        s.pathname.includes(e) || (r = e + "/" + r);
        var n = i.history.state;
        n && n.value === r || (this.params.history.replaceState ? i.history.replaceState({
          value: r
        }, null, r) : i.history.pushState({
          value: r
        }, null, r));
      }
    },
    slugify: function slugify(e) {
      return e.toString().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
    },
    scrollToSlide: function scrollToSlide(e, t, i) {
      if (t) for (var s = 0, a = this.slides.length; s < a; s += 1) {
        var r = this.slides.eq(s);

        if (ae.slugify(r.attr("data-history")) === t && !r.hasClass(this.params.slideDuplicateClass)) {
          var n = r.index();
          this.slideTo(n, e, i);
        }
      } else this.slideTo(0, e, i);
    }
  },
      re = {
    onHashCange: function onHashCange() {
      var e = r();
      this.emit("hashChange");
      var t = e.location.hash.replace("#", "");

      if (t !== this.slides.eq(this.activeIndex).attr("data-hash")) {
        var i = this.$wrapperEl.children("." + this.params.slideClass + '[data-hash="' + t + '"]').index();
        if (void 0 === i) return;
        this.slideTo(i);
      }
    },
    setHash: function setHash() {
      var e = l(),
          t = r();
      if (this.hashNavigation.initialized && this.params.hashNavigation.enabled) if (this.params.hashNavigation.replaceState && e.history && e.history.replaceState) e.history.replaceState(null, null, "#" + this.slides.eq(this.activeIndex).attr("data-hash") || ""), this.emit("hashSet");else {
        var i = this.slides.eq(this.activeIndex),
            s = i.attr("data-hash") || i.attr("data-history");
        t.location.hash = s || "", this.emit("hashSet");
      }
    },
    init: function init() {
      var e = r(),
          t = l();

      if (!(!this.params.hashNavigation.enabled || this.params.history && this.params.history.enabled)) {
        this.hashNavigation.initialized = !0;
        var i = e.location.hash.replace("#", "");
        if (i) for (var s = 0, a = this.slides.length; s < a; s += 1) {
          var n = this.slides.eq(s);

          if ((n.attr("data-hash") || n.attr("data-history")) === i && !n.hasClass(this.params.slideDuplicateClass)) {
            var o = n.index();
            this.slideTo(o, 0, this.params.runCallbacksOnInit, !0);
          }
        }
        this.params.hashNavigation.watchState && m(t).on("hashchange", this.hashNavigation.onHashCange);
      }
    },
    destroy: function destroy() {
      var e = l();
      this.params.hashNavigation.watchState && m(e).off("hashchange", this.hashNavigation.onHashCange);
    }
  },
      ne = {
    run: function run() {
      var e = this,
          t = e.slides.eq(e.activeIndex),
          i = e.params.autoplay.delay;
      t.attr("data-swiper-autoplay") && (i = t.attr("data-swiper-autoplay") || e.params.autoplay.delay), clearTimeout(e.autoplay.timeout), e.autoplay.timeout = E(function () {
        e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.params.loop ? (e.loopFix(), e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(0, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")), e.params.cssMode && e.autoplay.running && e.autoplay.run();
      }, i);
    },
    start: function start() {
      return void 0 === this.autoplay.timeout && !this.autoplay.running && (this.autoplay.running = !0, this.emit("autoplayStart"), this.autoplay.run(), !0);
    },
    stop: function stop() {
      return !!this.autoplay.running && void 0 !== this.autoplay.timeout && (this.autoplay.timeout && (clearTimeout(this.autoplay.timeout), this.autoplay.timeout = void 0), this.autoplay.running = !1, this.emit("autoplayStop"), !0);
    },
    pause: function pause(e) {
      this.autoplay.running && (this.autoplay.paused || (this.autoplay.timeout && clearTimeout(this.autoplay.timeout), this.autoplay.paused = !0, 0 !== e && this.params.autoplay.waitForTransition ? (this.$wrapperEl[0].addEventListener("transitionend", this.autoplay.onTransitionEnd), this.$wrapperEl[0].addEventListener("webkitTransitionEnd", this.autoplay.onTransitionEnd)) : (this.autoplay.paused = !1, this.autoplay.run())));
    },
    onVisibilityChange: function onVisibilityChange() {
      var e = r();
      "hidden" === e.visibilityState && this.autoplay.running && this.autoplay.pause(), "visible" === e.visibilityState && this.autoplay.paused && (this.autoplay.run(), this.autoplay.paused = !1);
    },
    onTransitionEnd: function onTransitionEnd(e) {
      this && !this.destroyed && this.$wrapperEl && e.target === this.$wrapperEl[0] && (this.$wrapperEl[0].removeEventListener("transitionend", this.autoplay.onTransitionEnd), this.$wrapperEl[0].removeEventListener("webkitTransitionEnd", this.autoplay.onTransitionEnd), this.autoplay.paused = !1, this.autoplay.running ? this.autoplay.run() : this.autoplay.stop());
    }
  },
      le = {
    setTranslate: function setTranslate() {
      for (var e = this.slides, t = 0; t < e.length; t += 1) {
        var i = this.slides.eq(t),
            s = -i[0].swiperSlideOffset;
        this.params.virtualTranslate || (s -= this.translate);
        var a = 0;
        this.isHorizontal() || (a = s, s = 0);
        var r = this.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);
        i.css({
          opacity: r
        }).transform("translate3d(" + s + "px, " + a + "px, 0px)");
      }
    },
    setTransition: function setTransition(e) {
      var t = this,
          i = t.slides,
          s = t.$wrapperEl;

      if (i.transition(e), t.params.virtualTranslate && 0 !== e) {
        var a = !1;
        i.transitionEnd(function () {
          if (!a && t && !t.destroyed) {
            a = !0, t.animating = !1;

            for (var e = ["webkitTransitionEnd", "transitionend"], i = 0; i < e.length; i += 1) {
              s.trigger(e[i]);
            }
          }
        });
      }
    }
  },
      oe = {
    setTranslate: function setTranslate() {
      var e,
          t = this.$el,
          i = this.$wrapperEl,
          s = this.slides,
          a = this.width,
          r = this.height,
          n = this.rtlTranslate,
          l = this.size,
          o = this.browser,
          d = this.params.cubeEffect,
          h = this.isHorizontal(),
          p = this.virtual && this.params.virtual.enabled,
          u = 0;
      d.shadow && (h ? (0 === (e = i.find(".swiper-cube-shadow")).length && (e = m('<div class="swiper-cube-shadow"></div>'), i.append(e)), e.css({
        height: a + "px"
      })) : 0 === (e = t.find(".swiper-cube-shadow")).length && (e = m('<div class="swiper-cube-shadow"></div>'), t.append(e)));

      for (var c = 0; c < s.length; c += 1) {
        var v = s.eq(c),
            f = c;
        p && (f = parseInt(v.attr("data-swiper-slide-index"), 10));
        var g = 90 * f,
            w = Math.floor(g / 360);
        n && (g = -g, w = Math.floor(-g / 360));
        var b = Math.max(Math.min(v[0].progress, 1), -1),
            y = 0,
            E = 0,
            x = 0;
        f % 4 == 0 ? (y = 4 * -w * l, x = 0) : (f - 1) % 4 == 0 ? (y = 0, x = 4 * -w * l) : (f - 2) % 4 == 0 ? (y = l + 4 * w * l, x = l) : (f - 3) % 4 == 0 && (y = -l, x = 3 * l + 4 * l * w), n && (y = -y), h || (E = y, y = 0);
        var T = "rotateX(" + (h ? 0 : -g) + "deg) rotateY(" + (h ? g : 0) + "deg) translate3d(" + y + "px, " + E + "px, " + x + "px)";

        if (b <= 1 && b > -1 && (u = 90 * f + 90 * b, n && (u = 90 * -f - 90 * b)), v.transform(T), d.slideShadows) {
          var C = h ? v.find(".swiper-slide-shadow-left") : v.find(".swiper-slide-shadow-top"),
              S = h ? v.find(".swiper-slide-shadow-right") : v.find(".swiper-slide-shadow-bottom");
          0 === C.length && (C = m('<div class="swiper-slide-shadow-' + (h ? "left" : "top") + '"></div>'), v.append(C)), 0 === S.length && (S = m('<div class="swiper-slide-shadow-' + (h ? "right" : "bottom") + '"></div>'), v.append(S)), C.length && (C[0].style.opacity = Math.max(-b, 0)), S.length && (S[0].style.opacity = Math.max(b, 0));
        }
      }

      if (i.css({
        "-webkit-transform-origin": "50% 50% -" + l / 2 + "px",
        "-moz-transform-origin": "50% 50% -" + l / 2 + "px",
        "-ms-transform-origin": "50% 50% -" + l / 2 + "px",
        "transform-origin": "50% 50% -" + l / 2 + "px"
      }), d.shadow) if (h) e.transform("translate3d(0px, " + (a / 2 + d.shadowOffset) + "px, " + -a / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + d.shadowScale + ")");else {
        var M = Math.abs(u) - 90 * Math.floor(Math.abs(u) / 90),
            z = 1.5 - (Math.sin(2 * M * Math.PI / 360) / 2 + Math.cos(2 * M * Math.PI / 360) / 2),
            P = d.shadowScale,
            k = d.shadowScale / z,
            $ = d.shadowOffset;
        e.transform("scale3d(" + P + ", 1, " + k + ") translate3d(0px, " + (r / 2 + $) + "px, " + -r / 2 / k + "px) rotateX(-90deg)");
      }
      var L = o.isSafari || o.isWebView ? -l / 2 : 0;
      i.transform("translate3d(0px,0," + L + "px) rotateX(" + (this.isHorizontal() ? 0 : u) + "deg) rotateY(" + (this.isHorizontal() ? -u : 0) + "deg)");
    },
    setTransition: function setTransition(e) {
      var t = this.$el;
      this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), this.params.cubeEffect.shadow && !this.isHorizontal() && t.find(".swiper-cube-shadow").transition(e);
    }
  },
      de = {
    setTranslate: function setTranslate() {
      for (var e = this.slides, t = this.rtlTranslate, i = 0; i < e.length; i += 1) {
        var s = e.eq(i),
            a = s[0].progress;
        this.params.flipEffect.limitRotation && (a = Math.max(Math.min(s[0].progress, 1), -1));
        var r = -180 * a,
            n = 0,
            l = -s[0].swiperSlideOffset,
            o = 0;

        if (this.isHorizontal() ? t && (r = -r) : (o = l, l = 0, n = -r, r = 0), s[0].style.zIndex = -Math.abs(Math.round(a)) + e.length, this.params.flipEffect.slideShadows) {
          var d = this.isHorizontal() ? s.find(".swiper-slide-shadow-left") : s.find(".swiper-slide-shadow-top"),
              h = this.isHorizontal() ? s.find(".swiper-slide-shadow-right") : s.find(".swiper-slide-shadow-bottom");
          0 === d.length && (d = m('<div class="swiper-slide-shadow-' + (this.isHorizontal() ? "left" : "top") + '"></div>'), s.append(d)), 0 === h.length && (h = m('<div class="swiper-slide-shadow-' + (this.isHorizontal() ? "right" : "bottom") + '"></div>'), s.append(h)), d.length && (d[0].style.opacity = Math.max(-a, 0)), h.length && (h[0].style.opacity = Math.max(a, 0));
        }

        s.transform("translate3d(" + l + "px, " + o + "px, 0px) rotateX(" + n + "deg) rotateY(" + r + "deg)");
      }
    },
    setTransition: function setTransition(e) {
      var t = this,
          i = t.slides,
          s = t.activeIndex,
          a = t.$wrapperEl;

      if (i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), t.params.virtualTranslate && 0 !== e) {
        var r = !1;
        i.eq(s).transitionEnd(function () {
          if (!r && t && !t.destroyed) {
            r = !0, t.animating = !1;

            for (var e = ["webkitTransitionEnd", "transitionend"], i = 0; i < e.length; i += 1) {
              a.trigger(e[i]);
            }
          }
        });
      }
    }
  },
      he = {
    setTranslate: function setTranslate() {
      for (var e = this.width, t = this.height, i = this.slides, s = this.slidesSizesGrid, a = this.params.coverflowEffect, r = this.isHorizontal(), n = this.translate, l = r ? e / 2 - n : t / 2 - n, o = r ? a.rotate : -a.rotate, d = a.depth, h = 0, p = i.length; h < p; h += 1) {
        var u = i.eq(h),
            c = s[h],
            v = (l - u[0].swiperSlideOffset - c / 2) / c * a.modifier,
            f = r ? o * v : 0,
            g = r ? 0 : o * v,
            w = -d * Math.abs(v),
            b = a.stretch;
        "string" == typeof b && -1 !== b.indexOf("%") && (b = parseFloat(a.stretch) / 100 * c);
        var y = r ? 0 : b * v,
            E = r ? b * v : 0,
            x = 1 - (1 - a.scale) * Math.abs(v);
        Math.abs(E) < .001 && (E = 0), Math.abs(y) < .001 && (y = 0), Math.abs(w) < .001 && (w = 0), Math.abs(f) < .001 && (f = 0), Math.abs(g) < .001 && (g = 0), Math.abs(x) < .001 && (x = 0);
        var T = "translate3d(" + E + "px," + y + "px," + w + "px)  rotateX(" + g + "deg) rotateY(" + f + "deg) scale(" + x + ")";

        if (u.transform(T), u[0].style.zIndex = 1 - Math.abs(Math.round(v)), a.slideShadows) {
          var C = r ? u.find(".swiper-slide-shadow-left") : u.find(".swiper-slide-shadow-top"),
              S = r ? u.find(".swiper-slide-shadow-right") : u.find(".swiper-slide-shadow-bottom");
          0 === C.length && (C = m('<div class="swiper-slide-shadow-' + (r ? "left" : "top") + '"></div>'), u.append(C)), 0 === S.length && (S = m('<div class="swiper-slide-shadow-' + (r ? "right" : "bottom") + '"></div>'), u.append(S)), C.length && (C[0].style.opacity = v > 0 ? v : 0), S.length && (S[0].style.opacity = -v > 0 ? -v : 0);
        }
      }
    },
    setTransition: function setTransition(e) {
      this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e);
    }
  },
      pe = {
    init: function init() {
      var e = this.params.thumbs;
      if (this.thumbs.initialized) return !1;
      this.thumbs.initialized = !0;
      var t = this.constructor;
      return e.swiper instanceof t ? (this.thumbs.swiper = e.swiper, S(this.thumbs.swiper.originalParams, {
        watchSlidesProgress: !0,
        slideToClickedSlide: !1
      }), S(this.thumbs.swiper.params, {
        watchSlidesProgress: !0,
        slideToClickedSlide: !1
      })) : C(e.swiper) && (this.thumbs.swiper = new t(S({}, e.swiper, {
        watchSlidesVisibility: !0,
        watchSlidesProgress: !0,
        slideToClickedSlide: !1
      })), this.thumbs.swiperCreated = !0), this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass), this.thumbs.swiper.on("tap", this.thumbs.onThumbClick), !0;
    },
    onThumbClick: function onThumbClick() {
      var e = this.thumbs.swiper;

      if (e) {
        var t = e.clickedIndex,
            i = e.clickedSlide;

        if (!(i && m(i).hasClass(this.params.thumbs.slideThumbActiveClass) || null == t)) {
          var s;

          if (s = e.params.loop ? parseInt(m(e.clickedSlide).attr("data-swiper-slide-index"), 10) : t, this.params.loop) {
            var a = this.activeIndex;
            this.slides.eq(a).hasClass(this.params.slideDuplicateClass) && (this.loopFix(), this._clientLeft = this.$wrapperEl[0].clientLeft, a = this.activeIndex);
            var r = this.slides.eq(a).prevAll('[data-swiper-slide-index="' + s + '"]').eq(0).index(),
                n = this.slides.eq(a).nextAll('[data-swiper-slide-index="' + s + '"]').eq(0).index();
            s = void 0 === r ? n : void 0 === n ? r : n - a < a - r ? n : r;
          }

          this.slideTo(s);
        }
      }
    },
    update: function update(e) {
      var t = this.thumbs.swiper;

      if (t) {
        var i = "auto" === t.params.slidesPerView ? t.slidesPerViewDynamic() : t.params.slidesPerView,
            s = this.params.thumbs.autoScrollOffset,
            a = s && !t.params.loop;

        if (this.realIndex !== t.realIndex || a) {
          var r,
              n,
              l = t.activeIndex;

          if (t.params.loop) {
            t.slides.eq(l).hasClass(t.params.slideDuplicateClass) && (t.loopFix(), t._clientLeft = t.$wrapperEl[0].clientLeft, l = t.activeIndex);
            var o = t.slides.eq(l).prevAll('[data-swiper-slide-index="' + this.realIndex + '"]').eq(0).index(),
                d = t.slides.eq(l).nextAll('[data-swiper-slide-index="' + this.realIndex + '"]').eq(0).index();
            r = void 0 === o ? d : void 0 === d ? o : d - l == l - o ? l : d - l < l - o ? d : o, n = this.activeIndex > this.previousIndex ? "next" : "prev";
          } else n = (r = this.realIndex) > this.previousIndex ? "next" : "prev";

          a && (r += "next" === n ? s : -1 * s), t.visibleSlidesIndexes && t.visibleSlidesIndexes.indexOf(r) < 0 && (t.params.centeredSlides ? r = r > l ? r - Math.floor(i / 2) + 1 : r + Math.floor(i / 2) - 1 : r > l && (r = r - i + 1), t.slideTo(r, e ? 0 : void 0));
        }

        var h = 1,
            p = this.params.thumbs.slideThumbActiveClass;
        if (this.params.slidesPerView > 1 && !this.params.centeredSlides && (h = this.params.slidesPerView), this.params.thumbs.multipleActiveThumbs || (h = 1), h = Math.floor(h), t.slides.removeClass(p), t.params.loop || t.params.virtual && t.params.virtual.enabled) for (var u = 0; u < h; u += 1) {
          t.$wrapperEl.children('[data-swiper-slide-index="' + (this.realIndex + u) + '"]').addClass(p);
        } else for (var c = 0; c < h; c += 1) {
          t.slides.eq(this.realIndex + c).addClass(p);
        }
      }
    }
  },
      ue = [q, _, {
    name: "mousewheel",
    params: {
      mousewheel: {
        enabled: !1,
        releaseOnEdges: !1,
        invert: !1,
        forceToAxis: !1,
        sensitivity: 1,
        eventsTarget: "container",
        thresholdDelta: null,
        thresholdTime: null
      }
    },
    create: function create() {
      M(this, {
        mousewheel: {
          enabled: !1,
          lastScrollTime: x(),
          lastEventBeforeSnap: void 0,
          recentWheelEvents: [],
          enable: U.enable,
          disable: U.disable,
          handle: U.handle,
          handleMouseEnter: U.handleMouseEnter,
          handleMouseLeave: U.handleMouseLeave,
          animateSlider: U.animateSlider,
          releaseScroll: U.releaseScroll
        }
      });
    },
    on: {
      init: function init(e) {
        !e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable();
      },
      destroy: function destroy(e) {
        e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable();
      }
    }
  }, {
    name: "navigation",
    params: {
      navigation: {
        nextEl: null,
        prevEl: null,
        hideOnClick: !1,
        disabledClass: "swiper-button-disabled",
        hiddenClass: "swiper-button-hidden",
        lockClass: "swiper-button-lock"
      }
    },
    create: function create() {
      M(this, {
        navigation: t({}, K)
      });
    },
    on: {
      init: function init(e) {
        e.navigation.init(), e.navigation.update();
      },
      toEdge: function toEdge(e) {
        e.navigation.update();
      },
      fromEdge: function fromEdge(e) {
        e.navigation.update();
      },
      destroy: function destroy(e) {
        e.navigation.destroy();
      },
      click: function click(e, t) {
        var i,
            s = e.navigation,
            a = s.$nextEl,
            r = s.$prevEl;
        !e.params.navigation.hideOnClick || m(t.target).is(r) || m(t.target).is(a) || (a ? i = a.hasClass(e.params.navigation.hiddenClass) : r && (i = r.hasClass(e.params.navigation.hiddenClass)), !0 === i ? e.emit("navigationShow") : e.emit("navigationHide"), a && a.toggleClass(e.params.navigation.hiddenClass), r && r.toggleClass(e.params.navigation.hiddenClass));
      }
    }
  }, {
    name: "pagination",
    params: {
      pagination: {
        el: null,
        bulletElement: "span",
        clickable: !1,
        hideOnClick: !1,
        renderBullet: null,
        renderProgressbar: null,
        renderFraction: null,
        renderCustom: null,
        progressbarOpposite: !1,
        type: "bullets",
        dynamicBullets: !1,
        dynamicMainBullets: 1,
        formatFractionCurrent: function formatFractionCurrent(e) {
          return e;
        },
        formatFractionTotal: function formatFractionTotal(e) {
          return e;
        },
        bulletClass: "swiper-pagination-bullet",
        bulletActiveClass: "swiper-pagination-bullet-active",
        modifierClass: "swiper-pagination-",
        currentClass: "swiper-pagination-current",
        totalClass: "swiper-pagination-total",
        hiddenClass: "swiper-pagination-hidden",
        progressbarFillClass: "swiper-pagination-progressbar-fill",
        progressbarOppositeClass: "swiper-pagination-progressbar-opposite",
        clickableClass: "swiper-pagination-clickable",
        lockClass: "swiper-pagination-lock"
      }
    },
    create: function create() {
      M(this, {
        pagination: t({
          dynamicBulletIndex: 0
        }, Z)
      });
    },
    on: {
      init: function init(e) {
        e.pagination.init(), e.pagination.render(), e.pagination.update();
      },
      activeIndexChange: function activeIndexChange(e) {
        (e.params.loop || void 0 === e.snapIndex) && e.pagination.update();
      },
      snapIndexChange: function snapIndexChange(e) {
        e.params.loop || e.pagination.update();
      },
      slidesLengthChange: function slidesLengthChange(e) {
        e.params.loop && (e.pagination.render(), e.pagination.update());
      },
      snapGridLengthChange: function snapGridLengthChange(e) {
        e.params.loop || (e.pagination.render(), e.pagination.update());
      },
      destroy: function destroy(e) {
        e.pagination.destroy();
      },
      click: function click(e, t) {
        e.params.pagination.el && e.params.pagination.hideOnClick && e.pagination.$el.length > 0 && !m(t.target).hasClass(e.params.pagination.bulletClass) && (!0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit("paginationShow") : e.emit("paginationHide"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass));
      }
    }
  }, {
    name: "scrollbar",
    params: {
      scrollbar: {
        el: null,
        dragSize: "auto",
        hide: !1,
        draggable: !1,
        snapOnRelease: !0,
        lockClass: "swiper-scrollbar-lock",
        dragClass: "swiper-scrollbar-drag"
      }
    },
    create: function create() {
      M(this, {
        scrollbar: t({
          isTouched: !1,
          timeout: null,
          dragTimeout: null
        }, J)
      });
    },
    on: {
      init: function init(e) {
        e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate();
      },
      update: function update(e) {
        e.scrollbar.updateSize();
      },
      resize: function resize(e) {
        e.scrollbar.updateSize();
      },
      observerUpdate: function observerUpdate(e) {
        e.scrollbar.updateSize();
      },
      setTranslate: function setTranslate(e) {
        e.scrollbar.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        e.scrollbar.setTransition(t);
      },
      destroy: function destroy(e) {
        e.scrollbar.destroy();
      }
    }
  }, {
    name: "parallax",
    params: {
      parallax: {
        enabled: !1
      }
    },
    create: function create() {
      M(this, {
        parallax: t({}, Q)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);
      },
      init: function init(e) {
        e.params.parallax.enabled && e.parallax.setTranslate();
      },
      setTranslate: function setTranslate(e) {
        e.params.parallax.enabled && e.parallax.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        e.params.parallax.enabled && e.parallax.setTransition(t);
      }
    }
  }, {
    name: "zoom",
    params: {
      zoom: {
        enabled: !1,
        maxRatio: 3,
        minRatio: 1,
        toggle: !0,
        containerClass: "swiper-zoom-container",
        zoomedSlideClass: "swiper-slide-zoomed"
      }
    },
    create: function create() {
      var e = this;
      M(e, {
        zoom: t({
          enabled: !1,
          scale: 1,
          currentScale: 1,
          isScaling: !1,
          gesture: {
            $slideEl: void 0,
            slideWidth: void 0,
            slideHeight: void 0,
            $imageEl: void 0,
            $imageWrapEl: void 0,
            maxRatio: 3
          },
          image: {
            isTouched: void 0,
            isMoved: void 0,
            currentX: void 0,
            currentY: void 0,
            minX: void 0,
            minY: void 0,
            maxX: void 0,
            maxY: void 0,
            width: void 0,
            height: void 0,
            startX: void 0,
            startY: void 0,
            touchesStart: {},
            touchesCurrent: {}
          },
          velocity: {
            x: void 0,
            y: void 0,
            prevPositionX: void 0,
            prevPositionY: void 0,
            prevTime: void 0
          }
        }, ee)
      });
      var i = 1;
      Object.defineProperty(e.zoom, "scale", {
        get: function get() {
          return i;
        },
        set: function set(t) {
          if (i !== t) {
            var s = e.zoom.gesture.$imageEl ? e.zoom.gesture.$imageEl[0] : void 0,
                a = e.zoom.gesture.$slideEl ? e.zoom.gesture.$slideEl[0] : void 0;
            e.emit("zoomChange", t, s, a);
          }

          i = t;
        }
      });
    },
    on: {
      init: function init(e) {
        e.params.zoom.enabled && e.zoom.enable();
      },
      destroy: function destroy(e) {
        e.zoom.disable();
      },
      touchStart: function touchStart(e, t) {
        e.zoom.enabled && e.zoom.onTouchStart(t);
      },
      touchEnd: function touchEnd(e, t) {
        e.zoom.enabled && e.zoom.onTouchEnd(t);
      },
      doubleTap: function doubleTap(e, t) {
        e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t);
      },
      transitionEnd: function transitionEnd(e) {
        e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd();
      },
      slideChange: function slideChange(e) {
        e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd();
      }
    }
  }, {
    name: "lazy",
    params: {
      lazy: {
        enabled: !1,
        loadPrevNext: !1,
        loadPrevNextAmount: 1,
        loadOnTransitionStart: !1,
        elementClass: "swiper-lazy",
        loadingClass: "swiper-lazy-loading",
        loadedClass: "swiper-lazy-loaded",
        preloaderClass: "swiper-lazy-preloader"
      }
    },
    create: function create() {
      M(this, {
        lazy: t({
          initialImageLoaded: !1
        }, te)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1);
      },
      init: function init(e) {
        e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && e.lazy.load();
      },
      scroll: function scroll(e) {
        e.params.freeMode && !e.params.freeModeSticky && e.lazy.load();
      },
      resize: function resize(e) {
        e.params.lazy.enabled && e.lazy.load();
      },
      scrollbarDragMove: function scrollbarDragMove(e) {
        e.params.lazy.enabled && e.lazy.load();
      },
      transitionStart: function transitionStart(e) {
        e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load();
      },
      transitionEnd: function transitionEnd(e) {
        e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load();
      },
      slideChange: function slideChange(e) {
        e.params.lazy.enabled && e.params.cssMode && e.lazy.load();
      }
    }
  }, {
    name: "controller",
    params: {
      controller: {
        control: void 0,
        inverse: !1,
        by: "slide"
      }
    },
    create: function create() {
      M(this, {
        controller: t({
          control: this.params.controller.control
        }, ie)
      });
    },
    on: {
      update: function update(e) {
        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);
      },
      resize: function resize(e) {
        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);
      },
      observerUpdate: function observerUpdate(e) {
        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);
      },
      setTranslate: function setTranslate(e, t, i) {
        e.controller.control && e.controller.setTranslate(t, i);
      },
      setTransition: function setTransition(e, t, i) {
        e.controller.control && e.controller.setTransition(t, i);
      }
    }
  }, {
    name: "a11y",
    params: {
      a11y: {
        enabled: !0,
        notificationClass: "swiper-notification",
        prevSlideMessage: "Previous slide",
        nextSlideMessage: "Next slide",
        firstSlideMessage: "This is the first slide",
        lastSlideMessage: "This is the last slide",
        paginationBulletMessage: "Go to slide {{index}}"
      }
    },
    create: function create() {
      M(this, {
        a11y: t(t({}, se), {}, {
          liveRegion: m('<span class="' + this.params.a11y.notificationClass + '" aria-live="assertive" aria-atomic="true"></span>')
        })
      });
    },
    on: {
      init: function init(e) {
        e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation());
      },
      toEdge: function toEdge(e) {
        e.params.a11y.enabled && e.a11y.updateNavigation();
      },
      fromEdge: function fromEdge(e) {
        e.params.a11y.enabled && e.a11y.updateNavigation();
      },
      paginationUpdate: function paginationUpdate(e) {
        e.params.a11y.enabled && e.a11y.updatePagination();
      },
      destroy: function destroy(e) {
        e.params.a11y.enabled && e.a11y.destroy();
      }
    }
  }, {
    name: "history",
    params: {
      history: {
        enabled: !1,
        replaceState: !1,
        key: "slides"
      }
    },
    create: function create() {
      M(this, {
        history: t({}, ae)
      });
    },
    on: {
      init: function init(e) {
        e.params.history.enabled && e.history.init();
      },
      destroy: function destroy(e) {
        e.params.history.enabled && e.history.destroy();
      },
      transitionEnd: function transitionEnd(e) {
        e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex);
      },
      slideChange: function slideChange(e) {
        e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex);
      }
    }
  }, {
    name: "hash-navigation",
    params: {
      hashNavigation: {
        enabled: !1,
        replaceState: !1,
        watchState: !1
      }
    },
    create: function create() {
      M(this, {
        hashNavigation: t({
          initialized: !1
        }, re)
      });
    },
    on: {
      init: function init(e) {
        e.params.hashNavigation.enabled && e.hashNavigation.init();
      },
      destroy: function destroy(e) {
        e.params.hashNavigation.enabled && e.hashNavigation.destroy();
      },
      transitionEnd: function transitionEnd(e) {
        e.hashNavigation.initialized && e.hashNavigation.setHash();
      },
      slideChange: function slideChange(e) {
        e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash();
      }
    }
  }, {
    name: "autoplay",
    params: {
      autoplay: {
        enabled: !1,
        delay: 3e3,
        waitForTransition: !0,
        disableOnInteraction: !0,
        stopOnLastSlide: !1,
        reverseDirection: !1
      }
    },
    create: function create() {
      M(this, {
        autoplay: t(t({}, ne), {}, {
          running: !1,
          paused: !1
        })
      });
    },
    on: {
      init: function init(e) {
        e.params.autoplay.enabled && (e.autoplay.start(), r().addEventListener("visibilitychange", e.autoplay.onVisibilityChange));
      },
      beforeTransitionStart: function beforeTransitionStart(e, t, i) {
        e.autoplay.running && (i || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop());
      },
      sliderFirstMove: function sliderFirstMove(e) {
        e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause());
      },
      touchEnd: function touchEnd(e) {
        e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run();
      },
      destroy: function destroy(e) {
        e.autoplay.running && e.autoplay.stop(), r().removeEventListener("visibilitychange", e.autoplay.onVisibilityChange);
      }
    }
  }, {
    name: "effect-fade",
    params: {
      fadeEffect: {
        crossFade: !1
      }
    },
    create: function create() {
      M(this, {
        fadeEffect: t({}, le)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        if ("fade" === e.params.effect) {
          e.classNames.push(e.params.containerModifierClass + "fade");
          var t = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: !0,
            spaceBetween: 0,
            virtualTranslate: !0
          };
          S(e.params, t), S(e.originalParams, t);
        }
      },
      setTranslate: function setTranslate(e) {
        "fade" === e.params.effect && e.fadeEffect.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        "fade" === e.params.effect && e.fadeEffect.setTransition(t);
      }
    }
  }, {
    name: "effect-cube",
    params: {
      cubeEffect: {
        slideShadows: !0,
        shadow: !0,
        shadowOffset: 20,
        shadowScale: .94
      }
    },
    create: function create() {
      M(this, {
        cubeEffect: t({}, oe)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        if ("cube" === e.params.effect) {
          e.classNames.push(e.params.containerModifierClass + "cube"), e.classNames.push(e.params.containerModifierClass + "3d");
          var t = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: !0,
            resistanceRatio: 0,
            spaceBetween: 0,
            centeredSlides: !1,
            virtualTranslate: !0
          };
          S(e.params, t), S(e.originalParams, t);
        }
      },
      setTranslate: function setTranslate(e) {
        "cube" === e.params.effect && e.cubeEffect.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        "cube" === e.params.effect && e.cubeEffect.setTransition(t);
      }
    }
  }, {
    name: "effect-flip",
    params: {
      flipEffect: {
        slideShadows: !0,
        limitRotation: !0
      }
    },
    create: function create() {
      M(this, {
        flipEffect: t({}, de)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        if ("flip" === e.params.effect) {
          e.classNames.push(e.params.containerModifierClass + "flip"), e.classNames.push(e.params.containerModifierClass + "3d");
          var t = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: !0,
            spaceBetween: 0,
            virtualTranslate: !0
          };
          S(e.params, t), S(e.originalParams, t);
        }
      },
      setTranslate: function setTranslate(e) {
        "flip" === e.params.effect && e.flipEffect.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        "flip" === e.params.effect && e.flipEffect.setTransition(t);
      }
    }
  }, {
    name: "effect-coverflow",
    params: {
      coverflowEffect: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        scale: 1,
        modifier: 1,
        slideShadows: !0
      }
    },
    create: function create() {
      M(this, {
        coverflowEffect: t({}, he)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        "coverflow" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + "coverflow"), e.classNames.push(e.params.containerModifierClass + "3d"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);
      },
      setTranslate: function setTranslate(e) {
        "coverflow" === e.params.effect && e.coverflowEffect.setTranslate();
      },
      setTransition: function setTransition(e, t) {
        "coverflow" === e.params.effect && e.coverflowEffect.setTransition(t);
      }
    }
  }, {
    name: "thumbs",
    params: {
      thumbs: {
        swiper: null,
        multipleActiveThumbs: !0,
        autoScrollOffset: 0,
        slideThumbActiveClass: "swiper-slide-thumb-active",
        thumbsContainerClass: "swiper-container-thumbs"
      }
    },
    create: function create() {
      M(this, {
        thumbs: t({
          swiper: null,
          initialized: !1
        }, pe)
      });
    },
    on: {
      beforeInit: function beforeInit(e) {
        var t = e.params.thumbs;
        t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0));
      },
      slideChange: function slideChange(e) {
        e.thumbs.swiper && e.thumbs.update();
      },
      update: function update(e) {
        e.thumbs.swiper && e.thumbs.update();
      },
      resize: function resize(e) {
        e.thumbs.swiper && e.thumbs.update();
      },
      observerUpdate: function observerUpdate(e) {
        e.thumbs.swiper && e.thumbs.update();
      },
      setTransition: function setTransition(e, t) {
        var i = e.thumbs.swiper;
        i && i.setTransition(t);
      },
      beforeDestroy: function beforeDestroy(e) {
        var t = e.thumbs.swiper;
        t && e.thumbs.swiperCreated && t && t.destroy();
      }
    }
  }];
  return W.use(ue), W;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXguanMiLCJzcmMvanMvSGVhdGhTY3JpcHQuanMiLCJzcmMvanMvY29udGFjdF9tZS5qcyIsInNyYy9qcy9qcUJvb3RzdHJhcFZhbGlkYXRpb24uanMiLCJzcmMvanMvbW9kdWxlcy9zaG93LW1vcmUtZmFkZWJhci9pbmRleC5qcyIsInNyYy9qcy9tb2R1bGVzL3Nob3ctbW9yZS1mYWRlYmFyL3Nob3ctbW9yZS5qcyIsInNyYy9qcy9zd2lwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLE9BQU8sQ0FBUCxrQkFBTyxDQUFQOztBQUNBLE9BQU8sQ0FBUCxnQ0FBTyxDQUFQOztBQUNBLE9BQU8sQ0FBUCw0QkFBTyxDQUFQOztBQUNBLE9BQU8sQ0FBUCxpQkFBTyxDQUFQOztBQUNBLE9BQU8sQ0FBUCxhQUFPLENBQVA7Ozs7QUNKQTs7Ozs7O0FBTUEsQ0FBQyxVQUFBLENBQUEsRUFBYTtBQUFBLGVBQUEsQ0FDRTtBQUVkOztBQUNBLE1BQUksT0FBTyxHQUFHLFFBQVEsQ0FBUixnQkFBQSxDQUFkLGlCQUFjLENBQWQ7QUFDQSxFQUFBLE9BQU8sQ0FBUCxPQUFBLENBQWdCLFVBQUEsSUFBQSxFQUFRO0FBQ3RCO0FBQ0EsUUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFELElBQUMsQ0FBRCxDQUFBLElBQUEsQ0FBZixlQUFlLENBQWY7QUFDQSxJQUFBLENBQUMsQ0FBRCxJQUFDLENBQUQsQ0FBQSxJQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQSxHQUFBLENBQUE7QUFSVSxHQUtaLEVBTFksQ0FXWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBQSxDQUFDLENBQUQsZ0RBQUMsQ0FBRCxDQUFBLEtBQUEsQ0FBMEQsWUFBWTtBQUNwRSxRQUNJLFFBQVEsQ0FBUixRQUFBLENBQUEsT0FB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LElBQUEsQ0FBQSxJQUFvQyxDQUFDLENBQXJDLE9BQW9DLEVBQXBDO0FBQ0Q7QUF4QkM7QUFuQkgsR0Exb0JFLENBcmtDUDtBQTZ2REEsU0FBTyxDQUFDLENBQUQsR0FBQSxDQUFBLEVBQUEsR0FBUCxDQUFBO0FBaGhJRixDQUFFLENBQUYiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJyZXF1aXJlKCcuL2pzL0hlYXRoU2NyaXB0JylcbnJlcXVpcmUoJy4vanMvbW9kdWxlcy9zaG93LW1vcmUtZmFkZWJhcicpXG5yZXF1aXJlKCcuL2pzL2pxQm9vdHN0cmFwVmFsaWRhdGlvbicpXG5yZXF1aXJlKCcuL2pzL2NvbnRhY3RfbWUnKVxucmVxdWlyZSgnLi9qcy9zd2lwZXInKVxuIiwiLyohXG4gKiBIZWF0aFNodWx0cy5jb20gLSBIZWF0aCBTaHVsdHMgdjEuMCAoaHR0cDovL2hlYXRoc2h1bHRzLmNvbSlcbiAqIENvcHlyaWdodCAyMDIwLTIwMjAgSGVhdGgtU2h1bHRzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9oZWF0aHNodWx0cy9oZWF0aHNodWx0cy5jb20vTElDRU5TRSlcbiAqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnOyAvLyBTdGFydCBvZiB1c2Ugc3RyaWN0XG5cbiAgLy8gPT09PT09IFJBTktJTkcgQkFSU1xuICB2YXIgdGhlQmFycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ocy1yYW5raW5nLWJhcicpXG4gIHRoZUJhcnMuZm9yRWFjaChhQmFyID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFyV2lkdGggPSAkKGFCYXIpLmF0dHIoJ2FyaWEtdmFsdWVub3cnKVxuICAgICQoYUJhcikuYXR0cignc3R5bGUnLCBgd2lkdGg6ICR7YmFyV2lkdGh9JWApO1xuICB9KTtcblxuICAvLyA9PT09PT0gTkFWIEpTID09PT09PSAvL1xuICAvLyBqUXVlcnkgZm9yIHBhZ2Ugc2Nyb2xsaW5nIGZlYXR1cmUgLSByZXF1aXJlcyBqUXVlcnkgRWFzaW5nIHBsdWdpblxuICAvLyAkKCdhLmpzLXBhZ2Utc2Nyb2xsJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gICB2YXIgJGFuY2hvciA9ICQodGhpcyk7XG4gIC8vICAgJCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcbiAgLy8gICAgIHNjcm9sbFRvcDogKCQoJGFuY2hvci5hdHRyKCdocmVmJykpLm9mZnNldCgpLnRvcCAtIDApIC8vSSBsZWZ0IHRoZSAtIDAgdGhlcmUgdG8gcmVtaW5kIG1lIGFib3V0IHVzaW5nIGl0IGlmIG5lZWQgYmVcbiAgLy8gICB9LCAxMjUwLCAnZWFzZUluT3V0RXhwbycpO1xuICAvLyAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIC8vIH0pO1xuXG4gICQoJ2EuanMtc2Nyb2xsLXRyaWdnZXJbaHJlZio9XCIjXCJdOm5vdChbaHJlZj1cIiNcIl0pJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChcbiAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sIFwiXCIpID09XG4gICAgICAgICAgICB0aGlzLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKSAmJlxuICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PSB0aGlzLmhvc3RuYW1lXG4gICAgKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMuaGFzaCk7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5sZW5ndGhcbiAgICAgICAgICAgID8gdGFyZ2V0XG4gICAgICAgICAgICA6ICQoXCJbbmFtZT1cIiArIHRoaXMuaGFzaC5zbGljZSgxKSArIFwiXVwiKTtcbiAgICAgICAgaWYgKHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IHRhcmdldC5vZmZzZXQoKS50b3AgLSA3MixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDEwMDAsXG4gICAgICAgICAgICAgICAgXCJlYXNlSW5PdXRFeHBvXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLy8gQ2xvc2VzIHJlc3BvbnNpdmUgbWVudSB3aGVuIGEgc2Nyb2xsIHRyaWdnZXIgbGluayBpcyBjbGlja2VkXG4kKFwiLmpzLXNjcm9sbC10cmlnZ2VyXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgJChcIi5uYXZiYXItY29sbGFwc2VcIikuY29sbGFwc2UoXCJoaWRlXCIpO1xufSk7XG5cblxuICAvLyBIaWdobGlnaHQgdGhlIHRvcCBuYXYgYXMgc2Nyb2xsaW5nIG9jY3Vyc1xuICAkKCdib2R5Jykuc2Nyb2xsc3B5KHtcbiAgICB0YXJnZXQ6ICcjbWFpbk5hdicsXG4gICAgb2Zmc2V0OiA3NFxuICB9KTtcblxuIC8vIENvbGxhcHNlIE5hdmJhclxuIHZhciBuYXZiYXJDb2xsYXBzZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCQoXCIjbWFpbk5hdlwiKS5vZmZzZXQoKS50b3AgPiA5MCkge1xuICAgICAgJChcIiNtYWluTmF2XCIpLmFkZENsYXNzKFwibmF2YmFyLXNocmlua1wiKTtcbiAgfSBlbHNlIHtcbiAgICAgICQoXCIjbWFpbk5hdlwiKS5yZW1vdmVDbGFzcyhcIm5hdmJhci1zaHJpbmtcIik7XG4gIH1cbn07XG4vLyBDb2xsYXBzZSBub3cgaWYgcGFnZSBpcyBub3QgYXQgdG9wXG5uYXZiYXJDb2xsYXBzZSgpO1xuLy8gQ29sbGFwc2UgdGhlIG5hdmJhciB3aGVuIHBhZ2UgaXMgc2Nyb2xsZWRcbiQod2luZG93KS5zY3JvbGwobmF2YmFyQ29sbGFwc2UpO1xuXG5cbiAgLy8gKiogPT09PT09IE1PREUgV0lESEVUID09PT09PSAqKiAvL1xuICB2YXIgZG1fYnRuID0gJCgnI21vZGVfd2lkZ2V0JylcbiAgdmFyIGxzR2V0TW9kZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkYXJrX21vZGUnKVxuXG4gIC8vIHNldCBidXR0b24gdGV4dFxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgIGlmIChsc0dldE1vZGUgPT09ICdmYXNsZScpIHtcbiAgICAgIHNldE1vZGVUZXh0KHRydWUpXG4gICAgICAvL2RtX2J0bi5odG1sKCc8c3BhbiBjbGFzcz1cIndoaWNoLW1vZGVcIj5EYXJrIE1vZGU8c3BhbiBpZD1cIm1vZGVfaWNvblwiIGNsYXNzPVwiZmEgZmEtbW9vbi1vIG1vZGUtaWNvblwiPjwvc3Bhbj48L3NwYW4+JylcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TW9kZVRleHQoZmFsc2UpXG4gICAgICAvLyBkbV9idG4uaHRtbCgnPHNwYW4gY2xhc3M9XCJ3aGljaC1tb2RlXCI+TGlnaHQgTW9kZTxzcGFuIGlkPVwibW9kZV9pY29uXCIgY2xhc3M9XCJmYSBmYS1zdW4tbyBtb2RlLWljb25cIj48L3NwYW4+PC9zcGFuPicpXG4gICAgfVxuICB9KVxuXG4gIGZ1bmN0aW9uIHNldE1vZGVUZXh0KG1vZGUpIHtcbiAgICBpZiAobW9kZSA9PT0gJ3RydWUnKSB7XG4gICAgICBkbV9idG4uaHRtbCgnPHNwYW4gY2xhc3M9XCJ3aGljaC1tb2RlXCI+IERhcmsgTW9kZTxpIGlkPVwibW9kZV9pY29uXCIgY2xhc3M9XCJmYSBmYS1tb29uIG1vZGUtaWNvblwiPjwvaT48L3NwYW4+JylcbiAgICB9IGVsc2Uge1xuICAgICAgZG1fYnRuLmh0bWwoJzxzcGFuIGNsYXNzPVwid2hpY2gtbW9kZVwiPiBMaWdodCBNb2RlPGkgaWQ9XCJtb2RlX2ljb25cIiBjbGFzcz1cImZhIGZhLXN1biBtb2RlLWljb25cIj48L2k+PC9zcGFuPicpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0TW9kZShtb2RlKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RhcmtfbW9kZScsIGAke21vZGV9YClcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGFya21vZGUnKS5kaXNhYmxlZCA9IG1vZGU7XG5cbiAgICBpZiAobW9kZSA9PT0gJ3RydWUnKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGFya21vZGUnKS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgZG1fYnRuLmh0bWwoJzxzcGFuIGNsYXNzPVwid2hpY2gtbW9kZVwiPiBEYXJrIE1vZGU8aSBpZD1cIm1vZGVfaWNvblwiIGNsYXNzPVwiZmEgZmEtbW9vbiBtb2RlLWljb25cIj48L2k+PC9zcGFuPicpXG5cbiAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xpbmtbaHJlZj1cImNzcy90aGVtZS1kYXJrLW1vZGUuY3NzXCJdJykuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG1fYnRuLmh0bWwoJzxzcGFuIGNsYXNzPVwid2hpY2gtbW9kZVwiPiBMaWdodCBNb2RlPGkgaWQ9XCJtb2RlX2ljb25cIiBjbGFzcz1cImZhIGZhLXN1biBtb2RlLWljb25cIj48L2k+PC9zcGFuPicpXG4gICAgfVxuICAgIHJldHVybiBzZXRNb2RlVGV4dChtb2RlKVxuICB9XG5cbiAgLy8gVGhlbWUgc3dpdGNoZXJcbiAgZG1fYnRuLmNsaWNrKChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhcmtfbW9kZScpID09PSAndHJ1ZScpIHtcbiAgICAgIHNldE1vZGUoJ2ZhbHNlJyksIGNvbnNvbGUubG9nKCdzZXQgdG8gZmFsc2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRNb2RlKCd0cnVlJyksIGNvbnNvbGUubG9nKCdzZXQgdG8gdHJ1ZScpXG4gICAgfVxuICAgIHJldHVyblxuICB9KVxuXG5cbiAgIC8vID09PT09PSBTSE9XTU9SRSA9PT09IC8vXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBsZXQgU2hvd01vcmVTZXR0aW5ncyA9IHtcbiAgICBib3hIZWlnaHQ6ICcxMDB2aCcsXG4gICAgZmJTdGFydENvbG9yOiAncmdiYSgwLDAsMCwuNzUpJyxcbiAgICBmYkVuZENvbG9yOiAncmdiYSgwLDAsMCwuNzUpJyxcbiAgICBmYkJvdHRvbUJvcmRlcjogJzFweCBzb2xpZCAjMmUyZTJlJyxcbiAgICBmYkluaXRCdXR0b25UZXh0OiAnU2hvdyBNb3JlJyxcbiAgICBmYk9wZW5CdXR0b25UZXh0OiAnU2hvdyBMZXNzJyxcbiAgICBmYkJ1dHRvblBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBmYkJ1dHRvbkJhY2tncm91bmQ6ICcjMTUxNTE1JyxcbiAgICBmYkJ1dHRvbkJhY2tncm91bmRIb3ZlcjogJyMzMzMzMzM7JyxcbiAgICBmYkJ1dHRvblRleHRDb2xvcjogJyNmZmZmZmYnLFxuICAgIGZiQnV0dG9uVGV4dENvbG9ySG92ZXI6ICcjZmZmZmZmJyxcbiAgICBmYkJ1dHRvblRleHRDb2xvckZvY3VzOiAnI0ZGRicsXG4gICAgZmJCdXR0b25Cb3JkZXJDb2xvcjogJyMwMDAwMDAnLFxuICAgIGZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1czogJyMzMzMzMzMnLFxuICB9XG5cbn0pKGpRdWVyeSk7IC8vIEVuZCBvZiB1c2Ugc3RyaWN0XG4iLCIvLyBDb250YWN0IEZvcm0gU2NyaXB0c1xyXG5cclxuJChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAkKFwiI2NvbnRhY3RGb3JtIGlucHV0LCNjb250YWN0Rm9ybSB0ZXh0YXJlYVwiKS5qcUJvb3RzdHJhcFZhbGlkYXRpb24oe1xyXG4gICAgICAgIHByZXZlbnRTdWJtaXQ6IHRydWUsXHJcbiAgICAgICAgc3VibWl0RXJyb3I6IGZ1bmN0aW9uKCRmb3JtLCBldmVudCwgZXJyb3JzKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZGl0aW9uYWwgZXJyb3IgbWVzc2FnZXMgb3IgZXZlbnRzXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWJtaXRTdWNjZXNzOiBmdW5jdGlvbigkZm9ybSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBkZWZhdWx0IHN1Ym1pdCBiZWhhdmlvdXJcclxuICAgICAgICAgICAgLy8gZ2V0IHZhbHVlcyBmcm9tIEZPUk1cclxuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKFwiaW5wdXQjbmFtZVwiKS52YWwoKTtcclxuICAgICAgICAgICAgdmFyIGVtYWlsID0gJChcImlucHV0I2VtYWlsXCIpLnZhbCgpO1xyXG4gICAgICAgICAgICB2YXIgcGhvbmUgPSAkKFwiaW5wdXQjcGhvbmVcIikudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJChcInRleHRhcmVhI21lc3NhZ2VcIikudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdE5hbWUgPSBuYW1lOyAvLyBGb3IgU3VjY2Vzcy9GYWlsdXJlIE1lc3NhZ2VcclxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHdoaXRlIHNwYWNlIGluIG5hbWUgZm9yIFN1Y2Nlc3MvRmFpbCBtZXNzYWdlXHJcbiAgICAgICAgICAgIGlmIChmaXJzdE5hbWUuaW5kZXhPZignICcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZSA9IG5hbWUuc3BsaXQoJyAnKS5zbGljZSgwLCAtMSkuam9pbignICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiLi8uL21haWwvY29udGFjdF9tZS5waHBcIixcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VjY2VzcyBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N1Y2Nlc3MnKS5odG1sKFwiPGRpdiBjbGFzcz0nYWxlcnQgYWxlcnQtc3VjY2Vzcyc+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdWNjZXNzID4gLmFsZXJ0LXN1Y2Nlc3MnKS5odG1sKFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdjbG9zZScgZGF0YS1kaXNtaXNzPSdhbGVydCcgYXJpYS1oaWRkZW49J3RydWUnPiZ0aW1lcztcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcIjwvYnV0dG9uPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3VjY2VzcyA+IC5hbGVydC1zdWNjZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcIjxzdHJvbmc+WW91ciBtZXNzYWdlIGhhcyBiZWVuIHNlbnQuIDwvc3Ryb25nPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3VjY2VzcyA+IC5hbGVydC1zdWNjZXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnPC9kaXY+Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2xlYXIgYWxsIGZpZWxkc1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNjb250YWN0Rm9ybScpLnRyaWdnZXIoXCJyZXNldFwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmFpbCBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N1Y2Nlc3MnKS5odG1sKFwiPGRpdiBjbGFzcz0nYWxlcnQgYWxlcnQtZGFuZ2VyJz5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N1Y2Nlc3MgPiAuYWxlcnQtZGFuZ2VyJykuaHRtbChcIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nYWxlcnQnIGFyaWEtaGlkZGVuPSd0cnVlJz4mdGltZXM7XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCI8L2J1dHRvbj5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3N1Y2Nlc3MgPiAuYWxlcnQtZGFuZ2VyJykuYXBwZW5kKFwiPHN0cm9uZz5Tb3JyeSBcIiArIGZpcnN0TmFtZSArIFwiLCBpdCBzZWVtcyB0aGF0IG15IG1haWwgc2VydmVyIGlzIG5vdCByZXNwb25kaW5nLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3VjY2VzcyA+IC5hbGVydC1kYW5nZXInKS5hcHBlbmQoJzwvZGl2PicpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2xlYXIgYWxsIGZpZWxkc1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNjb250YWN0Rm9ybScpLnRyaWdnZXIoXCJyZXNldFwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICQodGhpcykuaXMoXCI6dmlzaWJsZVwiKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgJChcImFbZGF0YS10b2dnbGU9XFxcInRhYlxcXCJdXCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgJCh0aGlzKS50YWIoXCJzaG93XCIpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbi8qV2hlbiBjbGlja2luZyBvbiBGdWxsIGhpZGUgZmFpbC9zdWNjZXNzIGJveGVzICovXHJcbiQoJyNuYW1lJykuZm9jdXMoZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcjc3VjY2VzcycpLmh0bWwoJycpO1xyXG59KTtcclxuIiwiLyoganFCb290c3RyYXBWYWxpZGF0aW9uXHJcbiAqIEEgcGx1Z2luIGZvciBhdXRvbWF0aW5nIHZhbGlkYXRpb24gb24gVHdpdHRlciBCb290c3RyYXAgZm9ybWF0dGVkIGZvcm1zLlxyXG4gKlxyXG4gKiB2MS4zLjZcclxuICpcclxuICogTGljZW5zZTogTUlUIDxodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwPiAtIHNlZSBMSUNFTlNFIGZpbGVcclxuICpcclxuICogaHR0cDovL1JlYWN0aXZlUmF2ZW4uZ2l0aHViLmNvbS9qcUJvb3RzdHJhcFZhbGlkYXRpb24vXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCAkICl7XHJcblxyXG5cdHZhciBjcmVhdGVkRWxlbWVudHMgPSBbXTtcclxuXHJcblx0dmFyIGRlZmF1bHRzID0ge1xyXG5cdFx0b3B0aW9uczoge1xyXG5cdFx0XHRwcmVwZW5kRXhpc3RpbmdIZWxwQmxvY2s6IGZhbHNlLFxyXG5cdFx0XHRzbmlmZkh0bWw6IHRydWUsIC8vIHNuaWZmIGZvciAncmVxdWlyZWQnLCAnbWF4bGVuZ3RoJywgZXRjXHJcblx0XHRcdHByZXZlbnRTdWJtaXQ6IHRydWUsIC8vIHN0b3AgdGhlIGZvcm0gc3VibWl0IGV2ZW50IGZyb20gZmlyaW5nIGlmIHZhbGlkYXRpb24gZmFpbHNcclxuXHRcdFx0c3VibWl0RXJyb3I6IGZhbHNlLCAvLyBmdW5jdGlvbiBjYWxsZWQgaWYgdGhlcmUgaXMgYW4gZXJyb3Igd2hlbiB0cnlpbmcgdG8gc3VibWl0XHJcblx0XHRcdHN1Ym1pdFN1Y2Nlc3M6IGZhbHNlLCAvLyBmdW5jdGlvbiBjYWxsZWQganVzdCBiZWZvcmUgYSBzdWNjZXNzZnVsIHN1Ym1pdCBldmVudCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgc2VtYW50aWNhbGx5U3RyaWN0OiBmYWxzZSwgLy8gc2V0IHRvIHRydWUgdG8gdGlkeSB1cCBnZW5lcmF0ZWQgSFRNTCBvdXRwdXRcclxuXHRcdFx0YXV0b0FkZDoge1xyXG5cdFx0XHRcdGhlbHBCbG9ja3M6IHRydWVcclxuXHRcdFx0fSxcclxuICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gJCh0aGlzKS5pcyhcIjp2aXNpYmxlXCIpOyAvLyBvbmx5IHZhbGlkYXRlIGVsZW1lbnRzIHlvdSBjYW4gc2VlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gdmFsaWRhdGUgZXZlcnl0aGluZ1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICBpbml0IDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cyk7XHJcblxyXG4gICAgICAgIHNldHRpbmdzLm9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBzZXR0aW5ncy5vcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdmFyICRzaWJsaW5nRWxlbWVudHMgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgdW5pcXVlRm9ybXMgPSAkLnVuaXF1ZShcclxuICAgICAgICAgICRzaWJsaW5nRWxlbWVudHMubWFwKCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLnBhcmVudHMoXCJmb3JtXCIpWzBdO1xyXG4gICAgICAgICAgfSkudG9BcnJheSgpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgJCh1bmlxdWVGb3JtcykuYmluZChcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgdmFyICRmb3JtID0gJCh0aGlzKTtcclxuICAgICAgICAgIHZhciB3YXJuaW5nc0ZvdW5kID0gMDtcclxuICAgICAgICAgIHZhciAkaW5wdXRzID0gJGZvcm0uZmluZChcImlucHV0LHRleHRhcmVhLHNlbGVjdFwiKS5ub3QoXCJbdHlwZT1zdWJtaXRdLFt0eXBlPWltYWdlXVwiKS5maWx0ZXIoc2V0dGluZ3Mub3B0aW9ucy5maWx0ZXIpO1xyXG4gICAgICAgICAgJGlucHV0cy50cmlnZ2VyKFwic3VibWl0LnZhbGlkYXRpb25cIikudHJpZ2dlcihcInZhbGlkYXRpb25Mb3N0Rm9jdXMudmFsaWRhdGlvblwiKTtcclxuXHJcbiAgICAgICAgICAkaW5wdXRzLmVhY2goZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQoZWwpLFxyXG4gICAgICAgICAgICAgICRjb250cm9sR3JvdXAgPSAkdGhpcy5wYXJlbnRzKFwiLmZvcm0tZ3JvdXBcIikuZmlyc3QoKTtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICRjb250cm9sR3JvdXAuaGFzQ2xhc3MoXCJ3YXJuaW5nXCIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICRjb250cm9sR3JvdXAucmVtb3ZlQ2xhc3MoXCJ3YXJuaW5nXCIpLmFkZENsYXNzKFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgd2FybmluZ3NGb3VuZCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAkaW5wdXRzLnRyaWdnZXIoXCJ2YWxpZGF0aW9uTG9zdEZvY3VzLnZhbGlkYXRpb25cIik7XHJcblxyXG4gICAgICAgICAgaWYgKHdhcm5pbmdzRm91bmQpIHtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm9wdGlvbnMucHJldmVudFN1Ym1pdCkge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkZm9ybS5hZGRDbGFzcyhcImVycm9yXCIpO1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHNldHRpbmdzLm9wdGlvbnMuc3VibWl0RXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgc2V0dGluZ3Mub3B0aW9ucy5zdWJtaXRFcnJvcigkZm9ybSwgZSwgJGlucHV0cy5qcUJvb3RzdHJhcFZhbGlkYXRpb24oXCJjb2xsZWN0RXJyb3JzXCIsIHRydWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJGZvcm0ucmVtb3ZlQ2xhc3MoXCJlcnJvclwiKTtcclxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihzZXR0aW5ncy5vcHRpb25zLnN1Ym1pdFN1Y2Nlc3MpKSB7XHJcbiAgICAgICAgICAgICAgc2V0dGluZ3Mub3B0aW9ucy5zdWJtaXRTdWNjZXNzKCRmb3JtLCBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHJlZmVyZW5jZXMgdG8gZXZlcnl0aGluZyB3ZSdyZSBpbnRlcmVzdGVkIGluXHJcbiAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAkY29udHJvbEdyb3VwID0gJHRoaXMucGFyZW50cyhcIi5mb3JtLWdyb3VwXCIpLmZpcnN0KCksXHJcbiAgICAgICAgICAgICRoZWxwQmxvY2sgPSAkY29udHJvbEdyb3VwLmZpbmQoXCIuaGVscC1ibG9ja1wiKS5maXJzdCgpLFxyXG4gICAgICAgICAgICAkZm9ybSA9ICR0aGlzLnBhcmVudHMoXCJmb3JtXCIpLmZpcnN0KCksXHJcbiAgICAgICAgICAgIHZhbGlkYXRvck5hbWVzID0gW107XHJcblxyXG4gICAgICAgICAgLy8gY3JlYXRlIG1lc3NhZ2UgY29udGFpbmVyIGlmIG5vdCBleGlzdHNcclxuICAgICAgICAgIGlmICghJGhlbHBCbG9jay5sZW5ndGggJiYgc2V0dGluZ3Mub3B0aW9ucy5hdXRvQWRkICYmIHNldHRpbmdzLm9wdGlvbnMuYXV0b0FkZC5oZWxwQmxvY2tzKSB7XHJcbiAgICAgICAgICAgICAgJGhlbHBCbG9jayA9ICQoJzxkaXYgY2xhc3M9XCJoZWxwLWJsb2NrXCIgLz4nKTtcclxuICAgICAgICAgICAgICAkY29udHJvbEdyb3VwLmZpbmQoJy5jb250cm9scycpLmFwcGVuZCgkaGVscEJsb2NrKTtcclxuXHRcdFx0XHRcdFx0XHRjcmVhdGVkRWxlbWVudHMucHVzaCgkaGVscEJsb2NrWzBdKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTTklGRiBIVE1MIEZPUiBWQUxJREFUT1JTXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgLy8gKnNub3J0IHNuaWZmIHNudWZmbGUqXHJcblxyXG4gICAgICAgICAgaWYgKHNldHRpbmdzLm9wdGlvbnMuc25pZmZIdG1sKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJcIjtcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEFUVEVSTlxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgaWYgKCR0aGlzLmF0dHIoXCJwYXR0ZXJuXCIpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJOb3QgaW4gdGhlIGV4cGVjdGVkIGZvcm1hdDwhLS0gZGF0YS12YWxpZGF0aW9uLXBhdHRlcm4tbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIjtcclxuICAgICAgICAgICAgICBpZiAoJHRoaXMuZGF0YShcInZhbGlkYXRpb25QYXR0ZXJuTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uUGF0dGVybk1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uUGF0dGVybk1lc3NhZ2VcIiwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25QYXR0ZXJuUmVnZXhcIiwgJHRoaXMuYXR0cihcInBhdHRlcm5cIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNQVhcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwibWF4XCIpICE9PSB1bmRlZmluZWQgfHwgJHRoaXMuYXR0cihcImFyaWEtdmFsdWVtYXhcIikgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIHZhciBtYXggPSAoJHRoaXMuYXR0cihcIm1heFwiKSAhPT0gdW5kZWZpbmVkID8gJHRoaXMuYXR0cihcIm1heFwiKSA6ICR0aGlzLmF0dHIoXCJhcmlhLXZhbHVlbWF4XCIpKTtcclxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJUb28gaGlnaDogTWF4aW11bSBvZiAnXCIgKyBtYXggKyBcIic8IS0tIGRhdGEtdmFsaWRhdGlvbi1tYXgtbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIjtcclxuICAgICAgICAgICAgICBpZiAoJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhNZXNzYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhNZXNzYWdlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1heE1lc3NhZ2VcIiwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhNYXhcIiwgbWF4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUlOXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBpZiAoJHRoaXMuYXR0cihcIm1pblwiKSAhPT0gdW5kZWZpbmVkIHx8ICR0aGlzLmF0dHIoXCJhcmlhLXZhbHVlbWluXCIpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICB2YXIgbWluID0gKCR0aGlzLmF0dHIoXCJtaW5cIikgIT09IHVuZGVmaW5lZCA/ICR0aGlzLmF0dHIoXCJtaW5cIikgOiAkdGhpcy5hdHRyKFwiYXJpYS12YWx1ZW1pblwiKSk7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVG9vIGxvdzogTWluaW11bSBvZiAnXCIgKyBtaW4gKyBcIic8IS0tIGRhdGEtdmFsaWRhdGlvbi1taW4tbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIjtcclxuICAgICAgICAgICAgICBpZiAoJHRoaXMuZGF0YShcInZhbGlkYXRpb25NaW5NZXNzYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJHRoaXMuZGF0YShcInZhbGlkYXRpb25NaW5NZXNzYWdlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1pbk1lc3NhZ2VcIiwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25NaW5NaW5cIiwgbWluKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUFYTEVOR1RIXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBpZiAoJHRoaXMuYXR0cihcIm1heGxlbmd0aFwiKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVG9vIGxvbmc6IE1heGltdW0gb2YgJ1wiICsgJHRoaXMuYXR0cihcIm1heGxlbmd0aFwiKSArIFwiJyBjaGFyYWN0ZXJzPCEtLSBkYXRhLXZhbGlkYXRpb24tbWF4bGVuZ3RoLW1lc3NhZ2UgdG8gb3ZlcnJpZGUgLS0+XCI7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWF4bGVuZ3RoTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWF4bGVuZ3RoTWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhsZW5ndGhNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWF4bGVuZ3RoTWF4bGVuZ3RoXCIsICR0aGlzLmF0dHIoXCJtYXhsZW5ndGhcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNSU5MRU5HVEhcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwibWlubGVuZ3RoXCIpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJUb28gc2hvcnQ6IE1pbmltdW0gb2YgJ1wiICsgJHRoaXMuYXR0cihcIm1pbmxlbmd0aFwiKSArIFwiJyBjaGFyYWN0ZXJzPCEtLSBkYXRhLXZhbGlkYXRpb24tbWlubGVuZ3RoLW1lc3NhZ2UgdG8gb3ZlcnJpZGUgLS0+XCI7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWlubGVuZ3RoTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWlubGVuZ3RoTWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25NaW5sZW5ndGhNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWlubGVuZ3RoTWlubGVuZ3RoXCIsICR0aGlzLmF0dHIoXCJtaW5sZW5ndGhcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVRVUlSRURcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwicmVxdWlyZWRcIikgIT09IHVuZGVmaW5lZCB8fCAkdGhpcy5hdHRyKFwiYXJpYS1yZXF1aXJlZFwiKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IHNldHRpbmdzLmJ1aWx0SW5WYWxpZGF0b3JzLnJlcXVpcmVkLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uUmVxdWlyZWRNZXNzYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJHRoaXMuZGF0YShcInZhbGlkYXRpb25SZXF1aXJlZE1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uUmVxdWlyZWRNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOVU1CRVJcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwidHlwZVwiKSAhPT0gdW5kZWZpbmVkICYmICR0aGlzLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICBtZXNzYWdlID0gc2V0dGluZ3MuYnVpbHRJblZhbGlkYXRvcnMubnVtYmVyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTnVtYmVyTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTnVtYmVyTWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25OdW1iZXJNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRU1BSUxcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwidHlwZVwiKSAhPT0gdW5kZWZpbmVkICYmICR0aGlzLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwiZW1haWxcIikge1xyXG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIk5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3M8IS0tIGRhdGEtdmFsaWRhdG9yLXZhbGlkZW1haWwtbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIjtcclxuICAgICAgICAgICAgICBpZiAoJHRoaXMuZGF0YShcInZhbGlkYXRpb25WYWxpZGVtYWlsTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uVmFsaWRlbWFpbE1lc3NhZ2VcIik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5kYXRhKFwidmFsaWRhdGlvbkVtYWlsTWVzc2FnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uRW1haWxNZXNzYWdlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblZhbGlkZW1haWxNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1JTkNIRUNLRURcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwibWluY2hlY2tlZFwiKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiTm90IGVub3VnaCBvcHRpb25zIGNoZWNrZWQ7IE1pbmltdW0gb2YgJ1wiICsgJHRoaXMuYXR0cihcIm1pbmNoZWNrZWRcIikgKyBcIicgcmVxdWlyZWQ8IS0tIGRhdGEtdmFsaWRhdGlvbi1taW5jaGVja2VkLW1lc3NhZ2UgdG8gb3ZlcnJpZGUgLS0+XCI7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWluY2hlY2tlZE1lc3NhZ2VcIikpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1pbmNoZWNrZWRNZXNzYWdlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1pbmNoZWNrZWRNZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uTWluY2hlY2tlZE1pbmNoZWNrZWRcIiwgJHRoaXMuYXR0cihcIm1pbmNoZWNrZWRcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1BWENIRUNLRURcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKFwibWF4Y2hlY2tlZFwiKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVG9vIG1hbnkgb3B0aW9ucyBjaGVja2VkOyBNYXhpbXVtIG9mICdcIiArICR0aGlzLmF0dHIoXCJtYXhjaGVja2VkXCIpICsgXCInIHJlcXVpcmVkPCEtLSBkYXRhLXZhbGlkYXRpb24tbWF4Y2hlY2tlZC1tZXNzYWdlIHRvIG92ZXJyaWRlIC0tPlwiO1xyXG4gICAgICAgICAgICAgIGlmICgkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1heGNoZWNrZWRNZXNzYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhjaGVja2VkTWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25NYXhjaGVja2VkTWVzc2FnZVwiLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvbk1heGNoZWNrZWRNYXhjaGVja2VkXCIsICR0aGlzLmF0dHIoXCJtYXhjaGVja2VkXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09MTEVDVCBWQUxJREFUT1IgTkFNRVNcclxuICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAvLyBHZXQgbmFtZWQgdmFsaWRhdG9yc1xyXG4gICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uXCIpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yTmFtZXMgPSAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiKS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gR2V0IGV4dHJhIG9uZXMgZGVmaW5lZCBvbiB0aGUgZWxlbWVudCdzIGRhdGEgYXR0cmlidXRlc1xyXG4gICAgICAgICAgJC5lYWNoKCR0aGlzLmRhdGEoKSwgZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGkucmVwbGFjZSgvKFtBLVpdKS9nLCBcIiwkMVwiKS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0c1swXSA9PT0gXCJ2YWxpZGF0aW9uXCIgJiYgcGFydHNbMV0pIHtcclxuICAgICAgICAgICAgICB2YWxpZGF0b3JOYW1lcy5wdXNoKHBhcnRzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTk9STUFMSVNFIFZBTElEQVRPUiBOQU1FU1xyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgIHZhciB2YWxpZGF0b3JOYW1lc1RvSW5zcGVjdCA9IHZhbGlkYXRvck5hbWVzO1xyXG4gICAgICAgICAgdmFyIG5ld1ZhbGlkYXRvck5hbWVzVG9JbnNwZWN0ID0gW107XHJcblxyXG4gICAgICAgICAgZG8gLy8gcmVwZWF0ZWRseSBleHBhbmQgJ3Nob3J0Y3V0JyB2YWxpZGF0b3JzIGludG8gdGhlaXIgcmVhbCB2YWxpZGF0b3JzXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFVwcGVyY2FzZSBvbmx5IHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCBuYW1lXHJcbiAgICAgICAgICAgICQuZWFjaCh2YWxpZGF0b3JOYW1lcywgZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICAgICAgdmFsaWRhdG9yTmFtZXNbaV0gPSBmb3JtYXRWYWxpZGF0b3JOYW1lKGVsKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlIHZhbGlkYXRvciBuYW1lc1xyXG4gICAgICAgICAgICB2YWxpZGF0b3JOYW1lcyA9ICQudW5pcXVlKHZhbGlkYXRvck5hbWVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFB1bGwgb3V0IHRoZSBuZXcgdmFsaWRhdG9yIG5hbWVzIGZyb20gZWFjaCBzaG9ydGN1dFxyXG4gICAgICAgICAgICBuZXdWYWxpZGF0b3JOYW1lc1RvSW5zcGVjdCA9IFtdO1xyXG4gICAgICAgICAgICAkLmVhY2godmFsaWRhdG9yTmFtZXNUb0luc3BlY3QsIGZ1bmN0aW9uKGksIGVsKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uXCIgKyBlbCArIFwiU2hvcnRjdXRcIikgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQXJlIHRoZXNlIGN1c3RvbSB2YWxpZGF0b3JzP1xyXG4gICAgICAgICAgICAgICAgLy8gUHVsbCB0aGVtIG91dCFcclxuICAgICAgICAgICAgICAgICQuZWFjaCgkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgZWwgKyBcIlNob3J0Y3V0XCIpLnNwbGl0KFwiLFwiKSwgZnVuY3Rpb24oaTIsIGVsMikge1xyXG4gICAgICAgICAgICAgICAgICBuZXdWYWxpZGF0b3JOYW1lc1RvSW5zcGVjdC5wdXNoKGVsMik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNldHRpbmdzLmJ1aWx0SW5WYWxpZGF0b3JzW2VsLnRvTG93ZXJDYXNlKCldKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJcyB0aGlzIGEgcmVjb2duaXNlZCBidWlsdC1pbj9cclxuICAgICAgICAgICAgICAgIC8vIFB1bGwgaXQgb3V0IVxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRvciA9IHNldHRpbmdzLmJ1aWx0SW5WYWxpZGF0b3JzW2VsLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvci50eXBlLnRvTG93ZXJDYXNlKCkgPT09IFwic2hvcnRjdXRcIikge1xyXG4gICAgICAgICAgICAgICAgICAkLmVhY2godmFsaWRhdG9yLnNob3J0Y3V0LnNwbGl0KFwiLFwiKSwgZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBmb3JtYXRWYWxpZGF0b3JOYW1lKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWxpZGF0b3JOYW1lc1RvSW5zcGVjdC5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JOYW1lcy5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhbGlkYXRvck5hbWVzVG9JbnNwZWN0ID0gbmV3VmFsaWRhdG9yTmFtZXNUb0luc3BlY3Q7XHJcblxyXG4gICAgICAgICAgfSB3aGlsZSAodmFsaWRhdG9yTmFtZXNUb0luc3BlY3QubGVuZ3RoID4gMClcclxuXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFVCBVUCBWQUxJREFUT1IgQVJSQVlTXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgdmFyIHZhbGlkYXRvcnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAkLmVhY2godmFsaWRhdG9yTmFtZXMsIGZ1bmN0aW9uIChpLCBlbCkge1xyXG4gICAgICAgICAgICAvLyBTZXQgdXAgdGhlICdvdmVycmlkZScgbWVzc2FnZVxyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uXCIgKyBlbCArIFwiTWVzc2FnZVwiKTtcclxuICAgICAgICAgICAgdmFyIGhhc092ZXJyaWRlTWVzc2FnZSA9IChtZXNzYWdlICE9PSB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB2YXIgZm91bmRWYWxpZGF0b3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgbWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICA/IG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgOiBcIidcIiArIGVsICsgXCInIHZhbGlkYXRpb24gZmFpbGVkIDwhLS0gQWRkIGF0dHJpYnV0ZSAnZGF0YS12YWxpZGF0aW9uLVwiICsgZWwudG9Mb3dlckNhc2UoKSArIFwiLW1lc3NhZ2UnIHRvIGlucHV0IHRvIGNoYW5nZSB0aGlzIG1lc3NhZ2UgLS0+XCJcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIDtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChcclxuICAgICAgICAgICAgICBzZXR0aW5ncy52YWxpZGF0b3JUeXBlcyxcclxuICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsaWRhdG9yVHlwZSwgdmFsaWRhdG9yVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3JzW3ZhbGlkYXRvclR5cGVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yc1t2YWxpZGF0b3JUeXBlXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZFZhbGlkYXRvciAmJiAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgZWwgKyBmb3JtYXRWYWxpZGF0b3JOYW1lKHZhbGlkYXRvclRlbXBsYXRlLm5hbWUpKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnNbdmFsaWRhdG9yVHlwZV0ucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChcclxuICAgICAgICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZvcm1hdFZhbGlkYXRvck5hbWUodmFsaWRhdG9yVGVtcGxhdGUubmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JUZW1wbGF0ZS5pbml0KCR0aGlzLCBlbClcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIGZvdW5kVmFsaWRhdG9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZvdW5kVmFsaWRhdG9yICYmIHNldHRpbmdzLmJ1aWx0SW5WYWxpZGF0b3JzW2VsLnRvTG93ZXJDYXNlKCldKSB7XHJcblxyXG4gICAgICAgICAgICAgIHZhciB2YWxpZGF0b3IgPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2V0dGluZ3MuYnVpbHRJblZhbGlkYXRvcnNbZWwudG9Mb3dlckNhc2UoKV0pO1xyXG4gICAgICAgICAgICAgIGlmIChoYXNPdmVycmlkZU1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvci5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdmFyIHZhbGlkYXRvclR5cGUgPSB2YWxpZGF0b3IudHlwZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdG9yVHlwZSA9PT0gXCJzaG9ydGN1dFwiKSB7XHJcbiAgICAgICAgICAgICAgICBmb3VuZFZhbGlkYXRvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQuZWFjaChcclxuICAgICAgICAgICAgICAgICAgc2V0dGluZ3MudmFsaWRhdG9yVHlwZXMsXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWxpZGF0b3JUZW1wbGF0ZVR5cGUsIHZhbGlkYXRvclRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvcnNbdmFsaWRhdG9yVGVtcGxhdGVUeXBlXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzW3ZhbGlkYXRvclRlbXBsYXRlVHlwZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZFZhbGlkYXRvciAmJiB2YWxpZGF0b3JUeXBlID09PSB2YWxpZGF0b3JUZW1wbGF0ZVR5cGUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIGVsICsgZm9ybWF0VmFsaWRhdG9yTmFtZSh2YWxpZGF0b3JUZW1wbGF0ZS5uYW1lKSwgdmFsaWRhdG9yW3ZhbGlkYXRvclRlbXBsYXRlLm5hbWUudG9Mb3dlckNhc2UoKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yc1t2YWxpZGF0b3JUeXBlXS5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yVGVtcGxhdGUuaW5pdCgkdGhpcywgZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3VuZFZhbGlkYXRvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCEgZm91bmRWYWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAkLmVycm9yKFwiQ2Fubm90IGZpbmQgdmFsaWRhdGlvbiBpbmZvIGZvciAnXCIgKyBlbCArIFwiJ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNUT1JFIEZBTExCQUNLIFZBTFVFU1xyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICRoZWxwQmxvY2suZGF0YShcclxuICAgICAgICAgICAgXCJvcmlnaW5hbC1jb250ZW50c1wiLFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgJGhlbHBCbG9jay5kYXRhKFwib3JpZ2luYWwtY29udGVudHNcIilcclxuICAgICAgICAgICAgICAgID8gJGhlbHBCbG9jay5kYXRhKFwib3JpZ2luYWwtY29udGVudHNcIilcclxuICAgICAgICAgICAgICAgIDogJGhlbHBCbG9jay5odG1sKClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAkaGVscEJsb2NrLmRhdGEoXHJcbiAgICAgICAgICAgIFwib3JpZ2luYWwtcm9sZVwiLFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgJGhlbHBCbG9jay5kYXRhKFwib3JpZ2luYWwtcm9sZVwiKVxyXG4gICAgICAgICAgICAgICAgPyAkaGVscEJsb2NrLmRhdGEoXCJvcmlnaW5hbC1yb2xlXCIpXHJcbiAgICAgICAgICAgICAgICA6ICRoZWxwQmxvY2suYXR0cihcInJvbGVcIilcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAkY29udHJvbEdyb3VwLmRhdGEoXHJcbiAgICAgICAgICAgIFwib3JpZ2luYWwtY2xhc3Nlc1wiLFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgJGNvbnRyb2xHcm91cC5kYXRhKFwib3JpZ2luYWwtY2xhc2VzXCIpXHJcbiAgICAgICAgICAgICAgICA/ICRjb250cm9sR3JvdXAuZGF0YShcIm9yaWdpbmFsLWNsYXNzZXNcIilcclxuICAgICAgICAgICAgICAgIDogJGNvbnRyb2xHcm91cC5hdHRyKFwiY2xhc3NcIilcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAkdGhpcy5kYXRhKFxyXG4gICAgICAgICAgICBcIm9yaWdpbmFsLWFyaWEtaW52YWxpZFwiLFxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgJHRoaXMuZGF0YShcIm9yaWdpbmFsLWFyaWEtaW52YWxpZFwiKVxyXG4gICAgICAgICAgICAgICAgPyAkdGhpcy5kYXRhKFwib3JpZ2luYWwtYXJpYS1pbnZhbGlkXCIpXHJcbiAgICAgICAgICAgICAgICA6ICR0aGlzLmF0dHIoXCJhcmlhLWludmFsaWRcIilcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWQUxJREFUSU9OXHJcbiAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgJHRoaXMuYmluZChcclxuICAgICAgICAgICAgXCJ2YWxpZGF0aW9uLnZhbGlkYXRpb25cIixcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50LCBwYXJhbXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUoJHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgYSBsaXN0IG9mIHRoZSBlcnJvcnMgdG8gYXBwbHlcclxuICAgICAgICAgICAgICB2YXIgZXJyb3JzRm91bmQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgJC5lYWNoKHZhbGlkYXRvcnMsIGZ1bmN0aW9uICh2YWxpZGF0b3JUeXBlLCB2YWxpZGF0b3JUeXBlQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggfHwgKHBhcmFtcyAmJiBwYXJhbXMuaW5jbHVkZUVtcHR5KSB8fCAoISFzZXR0aW5ncy52YWxpZGF0b3JUeXBlc1t2YWxpZGF0b3JUeXBlXS5ibG9ja1N1Ym1pdCAmJiBwYXJhbXMgJiYgISFwYXJhbXMuc3VibWl0dGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgJC5lYWNoKHZhbGlkYXRvclR5cGVBcnJheSwgZnVuY3Rpb24gKGksIHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy52YWxpZGF0b3JUeXBlc1t2YWxpZGF0b3JUeXBlXS52YWxpZGF0ZSgkdGhpcywgdmFsdWUsIHZhbGlkYXRvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGVycm9yc0ZvdW5kLnB1c2godmFsaWRhdG9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHJldHVybiBlcnJvcnNGb3VuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAkdGhpcy5iaW5kKFxyXG4gICAgICAgICAgICBcImdldFZhbGlkYXRvcnMudmFsaWRhdGlvblwiLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRvcnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXQVRDSCBGT1IgQ0hBTkdFU1xyXG4gICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgICAgJHRoaXMuYmluZChcclxuICAgICAgICAgICAgXCJzdWJtaXQudmFsaWRhdGlvblwiLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXJIYW5kbGVyKFwiY2hhbmdlLnZhbGlkYXRpb25cIiwge3N1Ym1pdHRpbmc6IHRydWV9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgICR0aGlzLmJpbmQoXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICBcImtleXVwXCIsXHJcbiAgICAgICAgICAgICAgXCJmb2N1c1wiLFxyXG4gICAgICAgICAgICAgIFwiYmx1clwiLFxyXG4gICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICBcImtleWRvd25cIixcclxuICAgICAgICAgICAgICBcImtleXByZXNzXCIsXHJcbiAgICAgICAgICAgICAgXCJjaGFuZ2VcIlxyXG4gICAgICAgICAgICBdLmpvaW4oXCIudmFsaWRhdGlvbiBcIikgKyBcIi52YWxpZGF0aW9uXCIsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBwYXJhbXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUoJHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgZXJyb3JzRm91bmQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgJGNvbnRyb2xHcm91cC5maW5kKFwiaW5wdXQsdGV4dGFyZWEsc2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkQ291bnQgPSBlcnJvcnNGb3VuZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2goJChlbCkudHJpZ2dlckhhbmRsZXIoXCJ2YWxpZGF0aW9uLnZhbGlkYXRpb25cIiwgcGFyYW1zKSwgZnVuY3Rpb24gKGosIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgZXJyb3JzRm91bmQucHVzaChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yc0ZvdW5kLmxlbmd0aCA+IG9sZENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICQoZWwpLmF0dHIoXCJhcmlhLWludmFsaWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsID0gJHRoaXMuZGF0YShcIm9yaWdpbmFsLWFyaWEtaW52YWxpZFwiKTtcclxuICAgICAgICAgICAgICAgICAgJChlbCkuYXR0cihcImFyaWEtaW52YWxpZFwiLCAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCA/IG9yaWdpbmFsIDogZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgJGZvcm0uZmluZChcImlucHV0LHNlbGVjdCx0ZXh0YXJlYVwiKS5ub3QoJHRoaXMpLm5vdChcIltuYW1lPVxcXCJcIiArICR0aGlzLmF0dHIoXCJuYW1lXCIpICsgXCJcXFwiXVwiKS50cmlnZ2VyKFwidmFsaWRhdGlvbkxvc3RGb2N1cy52YWxpZGF0aW9uXCIpO1xyXG5cclxuICAgICAgICAgICAgICBlcnJvcnNGb3VuZCA9ICQudW5pcXVlKGVycm9yc0ZvdW5kLnNvcnQoKSk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIFdlcmUgdGhlcmUgYW55IGVycm9ycz9cclxuICAgICAgICAgICAgICBpZiAoZXJyb3JzRm91bmQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBCZXR0ZXIgZmxhZyBpdCB1cCBhcyBhIHdhcm5pbmcuXHJcbiAgICAgICAgICAgICAgICAkY29udHJvbEdyb3VwLnJlbW92ZUNsYXNzKFwic3VjY2VzcyBlcnJvclwiKS5hZGRDbGFzcyhcIndhcm5pbmdcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgZXJyb3JzIGRpZCB3ZSBmaW5kP1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLm9wdGlvbnMuc2VtYW50aWNhbGx5U3RyaWN0ICYmIGVycm9yc0ZvdW5kLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IG9uZT8gQmVpbmcgc3RyaWN0PyBKdXN0IG91dHB1dCBpdC5cclxuICAgICAgICAgICAgICAgICAgJGhlbHBCbG9jay5odG1sKGVycm9yc0ZvdW5kWzBdICsgXHJcbiAgICAgICAgICAgICAgICAgICAgKCBzZXR0aW5ncy5vcHRpb25zLnByZXBlbmRFeGlzdGluZ0hlbHBCbG9jayA/ICRoZWxwQmxvY2suZGF0YShcIm9yaWdpbmFsLWNvbnRlbnRzXCIpIDogXCJcIiApKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIE11bHRpcGxlPyBCZWluZyBzbG9wcHk/IEdsdWUgdGhlbSB0b2dldGhlciBpbnRvIGFuIFVMLlxyXG4gICAgICAgICAgICAgICAgICAkaGVscEJsb2NrLmh0bWwoXCI8dWwgcm9sZT1cXFwiYWxlcnRcXFwiPjxsaT5cIiArIGVycm9yc0ZvdW5kLmpvaW4oXCI8L2xpPjxsaT5cIikgKyBcIjwvbGk+PC91bD5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgKCBzZXR0aW5ncy5vcHRpb25zLnByZXBlbmRFeGlzdGluZ0hlbHBCbG9jayA/ICRoZWxwQmxvY2suZGF0YShcIm9yaWdpbmFsLWNvbnRlbnRzXCIpIDogXCJcIiApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRyb2xHcm91cC5yZW1vdmVDbGFzcyhcIndhcm5pbmcgZXJyb3Igc3VjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICRjb250cm9sR3JvdXAuYWRkQ2xhc3MoXCJzdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJGhlbHBCbG9jay5odG1sKCRoZWxwQmxvY2suZGF0YShcIm9yaWdpbmFsLWNvbnRlbnRzXCIpKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwiYmx1clwiKSB7XHJcbiAgICAgICAgICAgICAgICAkY29udHJvbEdyb3VwLnJlbW92ZUNsYXNzKFwic3VjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICAkdGhpcy5iaW5kKFwidmFsaWRhdGlvbkxvc3RGb2N1cy52YWxpZGF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGNvbnRyb2xHcm91cC5yZW1vdmVDbGFzcyhcInN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgZGVzdHJveSA6IGZ1bmN0aW9uKCApIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChcclxuICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyXHJcbiAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICRjb250cm9sR3JvdXAgPSAkdGhpcy5wYXJlbnRzKFwiLmZvcm0tZ3JvdXBcIikuZmlyc3QoKSxcclxuICAgICAgICAgICAgICAkaGVscEJsb2NrID0gJGNvbnRyb2xHcm91cC5maW5kKFwiLmhlbHAtYmxvY2tcIikuZmlyc3QoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvdXIgZXZlbnRzXHJcbiAgICAgICAgICAgICR0aGlzLnVuYmluZCgnLnZhbGlkYXRpb24nKTsgLy8gZXZlbnRzIGFyZSBuYW1lc3BhY2VkLlxyXG4gICAgICAgICAgICAvLyByZXNldCBoZWxwIHRleHRcclxuICAgICAgICAgICAgJGhlbHBCbG9jay5odG1sKCRoZWxwQmxvY2suZGF0YShcIm9yaWdpbmFsLWNvbnRlbnRzXCIpKTtcclxuICAgICAgICAgICAgLy8gcmVzZXQgY2xhc3Nlc1xyXG4gICAgICAgICAgICAkY29udHJvbEdyb3VwLmF0dHIoXCJjbGFzc1wiLCAkY29udHJvbEdyb3VwLmRhdGEoXCJvcmlnaW5hbC1jbGFzc2VzXCIpKTtcclxuICAgICAgICAgICAgLy8gcmVzZXQgYXJpYVxyXG4gICAgICAgICAgICAkdGhpcy5hdHRyKFwiYXJpYS1pbnZhbGlkXCIsICR0aGlzLmRhdGEoXCJvcmlnaW5hbC1hcmlhLWludmFsaWRcIikpO1xyXG4gICAgICAgICAgICAvLyByZXNldCByb2xlXHJcbiAgICAgICAgICAgICRoZWxwQmxvY2suYXR0cihcInJvbGVcIiwgJHRoaXMuZGF0YShcIm9yaWdpbmFsLXJvbGVcIikpO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgYWxsIGVsZW1lbnRzIHdlIGNyZWF0ZWRcclxuXHRcdFx0XHRcdFx0aWYgKGNyZWF0ZWRFbGVtZW50cy5pbmRleE9mKCRoZWxwQmxvY2tbMF0pID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHQkaGVscEJsb2NrLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICB9LFxyXG4gICAgICBjb2xsZWN0RXJyb3JzIDogZnVuY3Rpb24oaW5jbHVkZUVtcHR5KSB7XHJcblxyXG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0ge307XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xyXG4gICAgICAgICAgdmFyICRlbCA9ICQoZWwpO1xyXG4gICAgICAgICAgdmFyIG5hbWUgPSAkZWwuYXR0cihcIm5hbWVcIik7XHJcbiAgICAgICAgICB2YXIgZXJyb3JzID0gJGVsLnRyaWdnZXJIYW5kbGVyKFwidmFsaWRhdGlvbi52YWxpZGF0aW9uXCIsIHtpbmNsdWRlRW1wdHk6IHRydWV9KTtcclxuICAgICAgICAgIGVycm9yTWVzc2FnZXNbbmFtZV0gPSAkLmV4dGVuZCh0cnVlLCBlcnJvcnMsIGVycm9yTWVzc2FnZXNbbmFtZV0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLmVhY2goZXJyb3JNZXNzYWdlcywgZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgICBpZiAoZWwubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBlcnJvck1lc3NhZ2VzW2ldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlcztcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIGhhc0Vycm9yczogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2VzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuICAgICAgICAgIGVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzLmNvbmNhdChcclxuICAgICAgICAgICAgJChlbCkudHJpZ2dlckhhbmRsZXIoXCJnZXRWYWxpZGF0b3JzLnZhbGlkYXRpb25cIikgPyAkKGVsKS50cmlnZ2VySGFuZGxlcihcInZhbGlkYXRpb24udmFsaWRhdGlvblwiLCB7c3VibWl0dGluZzogdHJ1ZX0pIDogW11cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiAoZXJyb3JNZXNzYWdlcy5sZW5ndGggPiAwKTtcclxuICAgICAgfSxcclxuICAgICAgb3ZlcnJpZGUgOiBmdW5jdGlvbiAobmV3RGVmYXVsdHMpIHtcclxuICAgICAgICBkZWZhdWx0cyA9ICQuZXh0ZW5kKHRydWUsIGRlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblx0XHR2YWxpZGF0b3JUeXBlczoge1xyXG4gICAgICBjYWxsYmFjazoge1xyXG4gICAgICAgIG5hbWU6IFwiY2FsbGJhY2tcIixcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoJHRoaXMsIG5hbWUpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvck5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgbmFtZSArIFwiQ2FsbGJhY2tcIiksXHJcbiAgICAgICAgICAgIGxhc3RWYWx1ZTogJHRoaXMudmFsKCksXHJcbiAgICAgICAgICAgIGxhc3RWYWxpZDogdHJ1ZSxcclxuICAgICAgICAgICAgbGFzdEZpbmlzaGVkOiB0cnVlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgkdGhpcywgdmFsdWUsIHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgaWYgKHZhbGlkYXRvci5sYXN0VmFsdWUgPT09IHZhbHVlICYmIHZhbGlkYXRvci5sYXN0RmluaXNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICF2YWxpZGF0b3IubGFzdFZhbGlkO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh2YWxpZGF0b3IubGFzdEZpbmlzaGVkID09PSB0cnVlKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3IubGFzdFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvci5sYXN0VmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YWxpZGF0b3IubGFzdEZpbmlzaGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgcnJqcWJ2VmFsaWRhdG9yID0gdmFsaWRhdG9yO1xyXG4gICAgICAgICAgICB2YXIgcnJqcWJ2VGhpcyA9ICR0aGlzO1xyXG4gICAgICAgICAgICBleGVjdXRlRnVuY3Rpb25CeU5hbWUoXHJcbiAgICAgICAgICAgICAgdmFsaWRhdG9yLmNhbGxiYWNrLFxyXG4gICAgICAgICAgICAgIHdpbmRvdyxcclxuICAgICAgICAgICAgICAkdGhpcyxcclxuICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJyanFidlZhbGlkYXRvci5sYXN0VmFsdWUgPT09IGRhdGEudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgcnJqcWJ2VmFsaWRhdG9yLmxhc3RWYWxpZCA9IGRhdGEudmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBycmpxYnZWYWxpZGF0b3IubWVzc2FnZSA9IGRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBycmpxYnZWYWxpZGF0b3IubGFzdEZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgcnJqcWJ2VGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgcnJqcWJ2VmFsaWRhdG9yLnZhbGlkYXRvck5hbWUgKyBcIk1lc3NhZ2VcIiwgcnJqcWJ2VmFsaWRhdG9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBUaW1lb3V0IGlzIHNldCB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIHRoZSBldmVudHMgYmVpbmcgY29uc2lkZXJlZCAnYWxyZWFkeSBmaXJlZCdcclxuICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnJqcWJ2VGhpcy50cmlnZ2VyKFwiY2hhbmdlLnZhbGlkYXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgIH0sIDEpOyAvLyBkb2Vzbid0IG5lZWQgYSBsb25nIHRpbWVvdXQsIGp1c3QgbG9uZyBlbm91Z2ggZm9yIHRoZSBldmVudCBidWJibGUgdG8gYnVyc3RcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGFqYXg6IHtcclxuICAgICAgICBuYW1lOiBcImFqYXhcIixcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoJHRoaXMsIG5hbWUpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvck5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIHVybDogJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIG5hbWUgKyBcIkFqYXhcIiksXHJcbiAgICAgICAgICAgIGxhc3RWYWx1ZTogJHRoaXMudmFsKCksXHJcbiAgICAgICAgICAgIGxhc3RWYWxpZDogdHJ1ZSxcclxuICAgICAgICAgICAgbGFzdEZpbmlzaGVkOiB0cnVlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgkdGhpcywgdmFsdWUsIHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgaWYgKFwiXCIrdmFsaWRhdG9yLmxhc3RWYWx1ZSA9PT0gXCJcIit2YWx1ZSAmJiB2YWxpZGF0b3IubGFzdEZpbmlzaGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0b3IubGFzdFZhbGlkID09PSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodmFsaWRhdG9yLmxhc3RGaW5pc2hlZCA9PT0gdHJ1ZSlcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yLmxhc3RWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB2YWxpZGF0b3IubGFzdFZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFsaWRhdG9yLmxhc3RGaW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgIHVybDogdmFsaWRhdG9yLnVybCxcclxuICAgICAgICAgICAgICBkYXRhOiBcInZhbHVlPVwiICsgdmFsdWUgKyBcIiZmaWVsZD1cIiArICR0aGlzLmF0dHIoXCJuYW1lXCIpLFxyXG4gICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFwiXCIrdmFsaWRhdG9yLmxhc3RWYWx1ZSA9PT0gXCJcIitkYXRhLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvci5sYXN0VmFsaWQgPSAhIShkYXRhLnZhbGlkKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvci5tZXNzYWdlID0gZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvci5sYXN0RmluaXNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgdmFsaWRhdG9yLnZhbGlkYXRvck5hbWUgKyBcIk1lc3NhZ2VcIiwgdmFsaWRhdG9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBUaW1lb3V0IGlzIHNldCB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIHRoZSBldmVudHMgYmVpbmcgY29uc2lkZXJlZCAnYWxyZWFkeSBmaXJlZCdcclxuICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcihcImNoYW5nZS52YWxpZGF0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICB9LCAxKTsgLy8gZG9lc24ndCBuZWVkIGEgbG9uZyB0aW1lb3V0LCBqdXN0IGxvbmcgZW5vdWdoIGZvciB0aGUgZXZlbnQgYnViYmxlIHRvIGJ1cnN0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IubGFzdFZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvci5tZXNzYWdlID0gXCJhamF4IGNhbGwgZmFpbGVkXCI7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IubGFzdEZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uXCIgKyB2YWxpZGF0b3IudmFsaWRhdG9yTmFtZSArIFwiTWVzc2FnZVwiLCB2YWxpZGF0b3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBUaW1lb3V0IGlzIHNldCB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIHRoZSBldmVudHMgYmVpbmcgY29uc2lkZXJlZCAnYWxyZWFkeSBmaXJlZCdcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKFwiY2hhbmdlLnZhbGlkYXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICB9LCAxKTsgLy8gZG9lc24ndCBuZWVkIGEgbG9uZyB0aW1lb3V0LCBqdXN0IGxvbmcgZW5vdWdoIGZvciB0aGUgZXZlbnQgYnViYmxlIHRvIGJ1cnN0XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHRcdFx0cmVnZXg6IHtcclxuXHRcdFx0XHRuYW1lOiBcInJlZ2V4XCIsXHJcblx0XHRcdFx0aW5pdDogZnVuY3Rpb24gKCR0aGlzLCBuYW1lKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4ge3JlZ2V4OiByZWdleEZyb21TdHJpbmcoJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIG5hbWUgKyBcIlJlZ2V4XCIpKX07XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2YWxpZGF0ZTogZnVuY3Rpb24gKCR0aGlzLCB2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKCF2YWxpZGF0b3IucmVnZXgudGVzdCh2YWx1ZSkgJiYgISB2YWxpZGF0b3IubmVnYXRpdmUpXHJcblx0XHRcdFx0XHRcdHx8ICh2YWxpZGF0b3IucmVnZXgudGVzdCh2YWx1ZSkgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdHJlcXVpcmVkOiB7XHJcblx0XHRcdFx0bmFtZTogXCJyZXF1aXJlZFwiLFxyXG5cdFx0XHRcdGluaXQ6IGZ1bmN0aW9uICgkdGhpcywgbmFtZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHt9O1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dmFsaWRhdGU6IGZ1bmN0aW9uICgkdGhpcywgdmFsdWUsIHZhbGlkYXRvcikge1xyXG5cdFx0XHRcdFx0cmV0dXJuICEhKHZhbHVlLmxlbmd0aCA9PT0gMCAgJiYgISB2YWxpZGF0b3IubmVnYXRpdmUpXHJcblx0XHRcdFx0XHRcdHx8ICEhKHZhbHVlLmxlbmd0aCA+IDAgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9LFxyXG4gICAgICAgIGJsb2NrU3VibWl0OiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdG1hdGNoOiB7XHJcblx0XHRcdFx0bmFtZTogXCJtYXRjaFwiLFxyXG5cdFx0XHRcdGluaXQ6IGZ1bmN0aW9uICgkdGhpcywgbmFtZSkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSAkdGhpcy5wYXJlbnRzKFwiZm9ybVwiKS5maXJzdCgpLmZpbmQoXCJbbmFtZT1cXFwiXCIgKyAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgbmFtZSArIFwiTWF0Y2hcIikgKyBcIlxcXCJdXCIpLmZpcnN0KCk7XHJcblx0XHRcdFx0XHRlbGVtZW50LmJpbmQoXCJ2YWxpZGF0aW9uLnZhbGlkYXRpb25cIiwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHQkdGhpcy50cmlnZ2VyKFwiY2hhbmdlLnZhbGlkYXRpb25cIiwge3N1Ym1pdHRpbmc6IHRydWV9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHtcImVsZW1lbnRcIjogZWxlbWVudH07XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2YWxpZGF0ZTogZnVuY3Rpb24gKCR0aGlzLCB2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKHZhbHVlICE9PSB2YWxpZGF0b3IuZWxlbWVudC52YWwoKSAmJiAhIHZhbGlkYXRvci5uZWdhdGl2ZSlcclxuXHRcdFx0XHRcdFx0fHwgKHZhbHVlID09PSB2YWxpZGF0b3IuZWxlbWVudC52YWwoKSAmJiB2YWxpZGF0b3IubmVnYXRpdmUpO1xyXG5cdFx0XHRcdH0sXHJcbiAgICAgICAgYmxvY2tTdWJtaXQ6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0bWF4OiB7XHJcblx0XHRcdFx0bmFtZTogXCJtYXhcIixcclxuXHRcdFx0XHRpbml0OiBmdW5jdGlvbiAoJHRoaXMsIG5hbWUpIHtcclxuXHRcdFx0XHRcdHJldHVybiB7bWF4OiAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgbmFtZSArIFwiTWF4XCIpfTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHZhbGlkYXRlOiBmdW5jdGlvbiAoJHRoaXMsIHZhbHVlLCB2YWxpZGF0b3IpIHtcclxuXHRcdFx0XHRcdHJldHVybiAocGFyc2VGbG9hdCh2YWx1ZSwgMTApID4gcGFyc2VGbG9hdCh2YWxpZGF0b3IubWF4LCAxMCkgJiYgISB2YWxpZGF0b3IubmVnYXRpdmUpXHJcblx0XHRcdFx0XHRcdHx8IChwYXJzZUZsb2F0KHZhbHVlLCAxMCkgPD0gcGFyc2VGbG9hdCh2YWxpZGF0b3IubWF4LCAxMCkgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdG1pbjoge1xyXG5cdFx0XHRcdG5hbWU6IFwibWluXCIsXHJcblx0XHRcdFx0aW5pdDogZnVuY3Rpb24gKCR0aGlzLCBuYW1lKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4ge21pbjogJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIG5hbWUgKyBcIk1pblwiKX07XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2YWxpZGF0ZTogZnVuY3Rpb24gKCR0aGlzLCB2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKHBhcnNlRmxvYXQodmFsdWUpIDwgcGFyc2VGbG9hdCh2YWxpZGF0b3IubWluKSAmJiAhIHZhbGlkYXRvci5uZWdhdGl2ZSlcclxuXHRcdFx0XHRcdFx0fHwgKHBhcnNlRmxvYXQodmFsdWUpID49IHBhcnNlRmxvYXQodmFsaWRhdG9yLm1pbikgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdG1heGxlbmd0aDoge1xyXG5cdFx0XHRcdG5hbWU6IFwibWF4bGVuZ3RoXCIsXHJcblx0XHRcdFx0aW5pdDogZnVuY3Rpb24gKCR0aGlzLCBuYW1lKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4ge21heGxlbmd0aDogJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIG5hbWUgKyBcIk1heGxlbmd0aFwiKX07XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2YWxpZGF0ZTogZnVuY3Rpb24gKCR0aGlzLCB2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKCh2YWx1ZS5sZW5ndGggPiB2YWxpZGF0b3IubWF4bGVuZ3RoKSAmJiAhIHZhbGlkYXRvci5uZWdhdGl2ZSlcclxuXHRcdFx0XHRcdFx0fHwgKCh2YWx1ZS5sZW5ndGggPD0gdmFsaWRhdG9yLm1heGxlbmd0aCkgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdG1pbmxlbmd0aDoge1xyXG5cdFx0XHRcdG5hbWU6IFwibWlubGVuZ3RoXCIsXHJcblx0XHRcdFx0aW5pdDogZnVuY3Rpb24gKCR0aGlzLCBuYW1lKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4ge21pbmxlbmd0aDogJHRoaXMuZGF0YShcInZhbGlkYXRpb25cIiArIG5hbWUgKyBcIk1pbmxlbmd0aFwiKX07XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2YWxpZGF0ZTogZnVuY3Rpb24gKCR0aGlzLCB2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKCh2YWx1ZS5sZW5ndGggPCB2YWxpZGF0b3IubWlubGVuZ3RoKSAmJiAhIHZhbGlkYXRvci5uZWdhdGl2ZSlcclxuXHRcdFx0XHRcdFx0fHwgKCh2YWx1ZS5sZW5ndGggPj0gdmFsaWRhdG9yLm1pbmxlbmd0aCkgJiYgdmFsaWRhdG9yLm5lZ2F0aXZlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdG1heGNoZWNrZWQ6IHtcclxuXHRcdFx0XHRuYW1lOiBcIm1heGNoZWNrZWRcIixcclxuXHRcdFx0XHRpbml0OiBmdW5jdGlvbiAoJHRoaXMsIG5hbWUpIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtZW50cyA9ICR0aGlzLnBhcmVudHMoXCJmb3JtXCIpLmZpcnN0KCkuZmluZChcIltuYW1lPVxcXCJcIiArICR0aGlzLmF0dHIoXCJuYW1lXCIpICsgXCJcXFwiXVwiKTtcclxuXHRcdFx0XHRcdGVsZW1lbnRzLmJpbmQoXCJjbGljay52YWxpZGF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0JHRoaXMudHJpZ2dlcihcImNoYW5nZS52YWxpZGF0aW9uXCIsIHtpbmNsdWRlRW1wdHk6IHRydWV9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHttYXhjaGVja2VkOiAkdGhpcy5kYXRhKFwidmFsaWRhdGlvblwiICsgbmFtZSArIFwiTWF4Y2hlY2tlZFwiKSwgZWxlbWVudHM6IGVsZW1lbnRzfTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHZhbGlkYXRlOiBmdW5jdGlvbiAoJHRoaXMsIHZhbHVlLCB2YWxpZGF0b3IpIHtcclxuXHRcdFx0XHRcdHJldHVybiAodmFsaWRhdG9yLmVsZW1lbnRzLmZpbHRlcihcIjpjaGVja2VkXCIpLmxlbmd0aCA+IHZhbGlkYXRvci5tYXhjaGVja2VkICYmICEgdmFsaWRhdG9yLm5lZ2F0aXZlKVxyXG5cdFx0XHRcdFx0XHR8fCAodmFsaWRhdG9yLmVsZW1lbnRzLmZpbHRlcihcIjpjaGVja2VkXCIpLmxlbmd0aCA8PSB2YWxpZGF0b3IubWF4Y2hlY2tlZCAmJiB2YWxpZGF0b3IubmVnYXRpdmUpO1xyXG5cdFx0XHRcdH0sXHJcbiAgICAgICAgYmxvY2tTdWJtaXQ6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0bWluY2hlY2tlZDoge1xyXG5cdFx0XHRcdG5hbWU6IFwibWluY2hlY2tlZFwiLFxyXG5cdFx0XHRcdGluaXQ6IGZ1bmN0aW9uICgkdGhpcywgbmFtZSkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW1lbnRzID0gJHRoaXMucGFyZW50cyhcImZvcm1cIikuZmlyc3QoKS5maW5kKFwiW25hbWU9XFxcIlwiICsgJHRoaXMuYXR0cihcIm5hbWVcIikgKyBcIlxcXCJdXCIpO1xyXG5cdFx0XHRcdFx0ZWxlbWVudHMuYmluZChcImNsaWNrLnZhbGlkYXRpb25cIiwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHQkdGhpcy50cmlnZ2VyKFwiY2hhbmdlLnZhbGlkYXRpb25cIiwge2luY2x1ZGVFbXB0eTogdHJ1ZX0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRyZXR1cm4ge21pbmNoZWNrZWQ6ICR0aGlzLmRhdGEoXCJ2YWxpZGF0aW9uXCIgKyBuYW1lICsgXCJNaW5jaGVja2VkXCIpLCBlbGVtZW50czogZWxlbWVudHN9O1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dmFsaWRhdGU6IGZ1bmN0aW9uICgkdGhpcywgdmFsdWUsIHZhbGlkYXRvcikge1xyXG5cdFx0XHRcdFx0cmV0dXJuICh2YWxpZGF0b3IuZWxlbWVudHMuZmlsdGVyKFwiOmNoZWNrZWRcIikubGVuZ3RoIDwgdmFsaWRhdG9yLm1pbmNoZWNrZWQgJiYgISB2YWxpZGF0b3IubmVnYXRpdmUpXHJcblx0XHRcdFx0XHRcdHx8ICh2YWxpZGF0b3IuZWxlbWVudHMuZmlsdGVyKFwiOmNoZWNrZWRcIikubGVuZ3RoID49IHZhbGlkYXRvci5taW5jaGVja2VkICYmIHZhbGlkYXRvci5uZWdhdGl2ZSk7XHJcblx0XHRcdFx0fSxcclxuICAgICAgICBibG9ja1N1Ym1pdDogdHJ1ZVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0YnVpbHRJblZhbGlkYXRvcnM6IHtcclxuXHRcdFx0ZW1haWw6IHtcclxuXHRcdFx0XHRuYW1lOiBcIkVtYWlsXCIsXHJcblx0XHRcdFx0dHlwZTogXCJzaG9ydGN1dFwiLFxyXG5cdFx0XHRcdHNob3J0Y3V0OiBcInZhbGlkZW1haWxcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR2YWxpZGVtYWlsOiB7XHJcblx0XHRcdFx0bmFtZTogXCJWYWxpZGVtYWlsXCIsXHJcblx0XHRcdFx0dHlwZTogXCJyZWdleFwiLFxyXG5cdFx0XHRcdHJlZ2V4OiBcIltBLVphLXowLTkuXyUrLV0rQFtBLVphLXowLTkuLV0rXFxcXFxcLltBLVphLXpdezIsNH1cIixcclxuXHRcdFx0XHRtZXNzYWdlOiBcIk5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3M8IS0tIGRhdGEtdmFsaWRhdG9yLXZhbGlkZW1haWwtbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwYXNzd29yZGFnYWluOiB7XHJcblx0XHRcdFx0bmFtZTogXCJQYXNzd29yZGFnYWluXCIsXHJcblx0XHRcdFx0dHlwZTogXCJtYXRjaFwiLFxyXG5cdFx0XHRcdG1hdGNoOiBcInBhc3N3b3JkXCIsXHJcblx0XHRcdFx0bWVzc2FnZTogXCJEb2VzIG5vdCBtYXRjaCB0aGUgZ2l2ZW4gcGFzc3dvcmQ8IS0tIGRhdGEtdmFsaWRhdG9yLXBhc3dvcmRhZ2Fpbi1tZXNzYWdlIHRvIG92ZXJyaWRlIC0tPlwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHBvc2l0aXZlOiB7XHJcblx0XHRcdFx0bmFtZTogXCJQb3NpdGl2ZVwiLFxyXG5cdFx0XHRcdHR5cGU6IFwic2hvcnRjdXRcIixcclxuXHRcdFx0XHRzaG9ydGN1dDogXCJudW1iZXIscG9zaXRpdmVudW1iZXJcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHRuZWdhdGl2ZToge1xyXG5cdFx0XHRcdG5hbWU6IFwiTmVnYXRpdmVcIixcclxuXHRcdFx0XHR0eXBlOiBcInNob3J0Y3V0XCIsXHJcblx0XHRcdFx0c2hvcnRjdXQ6IFwibnVtYmVyLG5lZ2F0aXZlbnVtYmVyXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0bnVtYmVyOiB7XHJcblx0XHRcdFx0bmFtZTogXCJOdW1iZXJcIixcclxuXHRcdFx0XHR0eXBlOiBcInJlZ2V4XCIsXHJcblx0XHRcdFx0cmVnZXg6IFwiKFsrLV0/XFxcXFxcZCsoXFxcXFxcLlxcXFxcXGQqKT8oW2VFXVsrLV0/WzAtOV0rKT8pP1wiLFxyXG5cdFx0XHRcdG1lc3NhZ2U6IFwiTXVzdCBiZSBhIG51bWJlcjwhLS0gZGF0YS12YWxpZGF0b3ItbnVtYmVyLW1lc3NhZ2UgdG8gb3ZlcnJpZGUgLS0+XCJcclxuXHRcdFx0fSxcclxuXHRcdFx0aW50ZWdlcjoge1xyXG5cdFx0XHRcdG5hbWU6IFwiSW50ZWdlclwiLFxyXG5cdFx0XHRcdHR5cGU6IFwicmVnZXhcIixcclxuXHRcdFx0XHRyZWdleDogXCJbKy1dP1xcXFxcXGQrXCIsXHJcblx0XHRcdFx0bWVzc2FnZTogXCJObyBkZWNpbWFsIHBsYWNlcyBhbGxvd2VkPCEtLSBkYXRhLXZhbGlkYXRvci1pbnRlZ2VyLW1lc3NhZ2UgdG8gb3ZlcnJpZGUgLS0+XCJcclxuXHRcdFx0fSxcclxuXHRcdFx0cG9zaXRpdmVudW1iZXI6IHtcclxuXHRcdFx0XHRuYW1lOiBcIlBvc2l0aXZlbnVtYmVyXCIsXHJcblx0XHRcdFx0dHlwZTogXCJtaW5cIixcclxuXHRcdFx0XHRtaW46IDAsXHJcblx0XHRcdFx0bWVzc2FnZTogXCJNdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyPCEtLSBkYXRhLXZhbGlkYXRvci1wb3NpdGl2ZW51bWJlci1tZXNzYWdlIHRvIG92ZXJyaWRlIC0tPlwiXHJcblx0XHRcdH0sXHJcblx0XHRcdG5lZ2F0aXZlbnVtYmVyOiB7XHJcblx0XHRcdFx0bmFtZTogXCJOZWdhdGl2ZW51bWJlclwiLFxyXG5cdFx0XHRcdHR5cGU6IFwibWF4XCIsXHJcblx0XHRcdFx0bWF4OiAwLFxyXG5cdFx0XHRcdG1lc3NhZ2U6IFwiTXVzdCBiZSBhIG5lZ2F0aXZlIG51bWJlcjwhLS0gZGF0YS12YWxpZGF0b3ItbmVnYXRpdmVudW1iZXItbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHRyZXF1aXJlZDoge1xyXG5cdFx0XHRcdG5hbWU6IFwiUmVxdWlyZWRcIixcclxuXHRcdFx0XHR0eXBlOiBcInJlcXVpcmVkXCIsXHJcblx0XHRcdFx0bWVzc2FnZTogXCJUaGlzIGlzIHJlcXVpcmVkPCEtLSBkYXRhLXZhbGlkYXRvci1yZXF1aXJlZC1tZXNzYWdlIHRvIG92ZXJyaWRlIC0tPlwiXHJcblx0XHRcdH0sXHJcblx0XHRcdGNoZWNrb25lOiB7XHJcblx0XHRcdFx0bmFtZTogXCJDaGVja29uZVwiLFxyXG5cdFx0XHRcdHR5cGU6IFwibWluY2hlY2tlZFwiLFxyXG5cdFx0XHRcdG1pbmNoZWNrZWQ6IDEsXHJcblx0XHRcdFx0bWVzc2FnZTogXCJDaGVjayBhdCBsZWFzdCBvbmUgb3B0aW9uPCEtLSBkYXRhLXZhbGlkYXRpb24tY2hlY2tvbmUtbWVzc2FnZSB0byBvdmVycmlkZSAtLT5cIlxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dmFyIGZvcm1hdFZhbGlkYXRvck5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG5cdFx0cmV0dXJuIG5hbWVcclxuXHRcdFx0LnRvTG93ZXJDYXNlKClcclxuXHRcdFx0LnJlcGxhY2UoXHJcblx0XHRcdFx0LyhefFxccykoW2Etel0pL2cgLFxyXG5cdFx0XHRcdGZ1bmN0aW9uKG0scDEscDIpIHtcclxuXHRcdFx0XHRcdHJldHVybiBwMStwMi50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0O1xyXG5cdH07XHJcblxyXG5cdHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uICgkdGhpcykge1xyXG5cdFx0Ly8gRXh0cmFjdCB0aGUgdmFsdWUgd2UncmUgdGFsa2luZyBhYm91dFxyXG5cdFx0dmFyIHZhbHVlID0gJHRoaXMudmFsKCk7XHJcblx0XHR2YXIgdHlwZSA9ICR0aGlzLmF0dHIoXCJ0eXBlXCIpO1xyXG5cdFx0aWYgKHR5cGUgPT09IFwiY2hlY2tib3hcIikge1xyXG5cdFx0XHR2YWx1ZSA9ICgkdGhpcy5pcyhcIjpjaGVja2VkXCIpID8gdmFsdWUgOiBcIlwiKTtcclxuXHRcdH1cclxuXHRcdGlmICh0eXBlID09PSBcInJhZGlvXCIpIHtcclxuXHRcdFx0dmFsdWUgPSAoJCgnaW5wdXRbbmFtZT1cIicgKyAkdGhpcy5hdHRyKFwibmFtZVwiKSArICdcIl06Y2hlY2tlZCcpLmxlbmd0aCA+IDAgPyB2YWx1ZSA6IFwiXCIpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH07XHJcblxyXG4gIGZ1bmN0aW9uIHJlZ2V4RnJvbVN0cmluZyhpbnB1dHN0cmluZykge1xyXG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAoXCJeXCIgKyBpbnB1dHN0cmluZyArIFwiJFwiKTtcclxuXHR9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoYW5rcyB0byBKYXNvbiBCdW50aW5nIHZpYSBTdGFja092ZXJmbG93LmNvbVxyXG4gICAqXHJcbiAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTk3ODgvaG93LXRvLWV4ZWN1dGUtYS1qYXZhc2NyaXB0LWZ1bmN0aW9uLXdoZW4taS1oYXZlLWl0cy1uYW1lLWFzLWEtc3RyaW5nI2Fuc3dlci0zNTk5MTBcclxuICAgKiBTaG9ydCBsaW5rOiBodHRwOi8vdGlueXVybC5jb20vZXhlY3V0ZUZ1bmN0aW9uQnlOYW1lXHJcbiAgKiovXHJcbiAgZnVuY3Rpb24gZXhlY3V0ZUZ1bmN0aW9uQnlOYW1lKGZ1bmN0aW9uTmFtZSwgY29udGV4dCAvKiwgYXJncyovKSB7XHJcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuc3BsaWNlKDIpO1xyXG4gICAgdmFyIG5hbWVzcGFjZXMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoXCIuXCIpO1xyXG4gICAgdmFyIGZ1bmMgPSBuYW1lc3BhY2VzLnBvcCgpO1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IG5hbWVzcGFjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29udGV4dCA9IGNvbnRleHRbbmFtZXNwYWNlc1tpXV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dFtmdW5jXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICB9XHJcblxyXG5cdCQuZm4uanFCb290c3RyYXBWYWxpZGF0aW9uID0gZnVuY3Rpb24oIG1ldGhvZCApIHtcclxuXHJcblx0XHRpZiAoIGRlZmF1bHRzLm1ldGhvZHNbbWV0aG9kXSApIHtcclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRzLm1ldGhvZHNbbWV0aG9kXS5hcHBseSggdGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApKTtcclxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICEgbWV0aG9kICkge1xyXG5cdFx0XHRyZXR1cm4gZGVmYXVsdHMubWV0aG9kcy5pbml0LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHQkLmVycm9yKCAnTWV0aG9kICcgKyAgbWV0aG9kICsgJyBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkuanFCb290c3RyYXBWYWxpZGF0aW9uJyApO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcbiAgJC5qcUJvb3RzdHJhcFZhbGlkYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgJChcIjppbnB1dFwiKS5ub3QoXCJbdHlwZT1pbWFnZV0sW3R5cGU9c3VibWl0XVwiKS5qcUJvb3RzdHJhcFZhbGlkYXRpb24uYXBwbHkodGhpcyxhcmd1bWVudHMpO1xyXG4gIH07XHJcblxyXG59KSggalF1ZXJ5ICk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zaG93LW1vcmUuanMnKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5sZXQgaGVpZ2h0O1xubGV0IEZhZGVCYXIgPSAoKSA9PiB7fTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBGYWRlQmFyID0gKCkgPT4ge1xuICBjb25zdCBWRVJTSU9OID0gJzAuMC4xJztcbiAgY29uc3QgTkFNRSA9ICdTaG93TW9yZV9GYWRlQmFyJztcbiAgY29uc29sZS5sb2coYE5vdyB1c2luZyAke05BTUV9IHZlcnNpb24gJHtWRVJTSU9OfWApO1xuICAvLyBwcmVwYXJlIHRoZSBzdHlsZSB0YWdlIGZvciBzb21lIGNzcyBsdXZpblxuICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgY29uc3QgaGVhZEVsID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuXG4gIGNvbnN0IG9wdGlvbnMgPSBzZXR0aW5ncygpO1xuICBjb25zdCBjc3NUZXh0ID0gRmFkZUJhckNTUyhvcHRpb25zKTtcbiAgLy8gY29uc29sZS5sb2cob3B0aW9ucyk7XG5cbiAgc3R5bGVFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2ZiQ1NTJyk7XG4gIHN0eWxlRWwudGV4dENvbnRlbnQgPSBjc3NUZXh0O1xuICBoZWFkRWwuYXBwZW5kKHN0eWxlRWwpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgdGhlRmFkZXJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmotc2hvd21vcmUnKSk7XG5cbiAgICB0aGVGYWRlcnMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgaGVpZ2h0ID0gbm9kZS5vZmZzZXRIZWlnaHQ7XG4gICAgICBjb25zb2xlLmxvZyhoZWlnaHQpXG4gICAgICBjb25zdCB0aGVDb250YWluZXIgPSBub2RlO1xuICAgICAgY29uc3QgdGhlRmFkZUJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29uc3QgdGhlU2hvd01vcmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuXG4gICAgICB0aGVGYWRlQmFyLmNsYXNzTGlzdC5hZGQoJ2otZmFkZXInKTtcbiAgICAgIHRoZVNob3dNb3JlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2otZmFkZXJfYnV0dG9uJyk7XG5cbiAgICAgIHRoZVNob3dNb3JlQnV0dG9uLmlubmVyVGV4dCA9IG9wdGlvbnMuZmJJbml0QnV0dG9uVGV4dDtcblxuICAgICAgdGhlRmFkZUJhci5hcHBlbmRDaGlsZCh0aGVTaG93TW9yZUJ1dHRvbik7XG4gICAgICB0aGVDb250YWluZXIuYXBwZW5kQ2hpbGQodGhlRmFkZUJhcik7XG5cbiAgICAgIHRoZVNob3dNb3JlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgZXYudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtdmlzaWJsZScpO1xuICAgICAgICBldi50YXJnZXQuY2xvc2VzdCgnLmotc2hvd21vcmUnKS5jbGFzc0xpc3QudG9nZ2xlKCdpcy12aXNpYmxlJyk7XG4gICAgICAgIGlmIChldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy12aXNpYmxlJykpe1xuICAgICAgICAgIGV2LnRhcmdldC5wYXJlbnRFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodFxuICAgICAgICB9XG4gICAgICAgIGlmKGV2LnRhcmdldC5pbm5lclRleHQgPT09IG9wdGlvbnMuZmJJbml0QnV0dG9uVGV4dCkge1xuICAgICAgICAgIGV2LnRhcmdldC5pbm5lclRleHQgPSBvcHRpb25zLmZiT3BlbkJ1dHRvblRleHRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldi50YXJnZXQuaW5uZXJUZXh0ID0gb3B0aW9ucy5mYkluaXRCdXR0b25UZXh0XG4gICAgICAgIH1cbiAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgdGhlU2hvd01vcmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoZXYpID0+IHtcbiAgICAgICAgZXYudGFyZ2V0LmJsdXIoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn0pO1xuLy8gbW9kdWxlLmV4cG9ydHMgPSBGYWRlQmFyO1xuXG5mdW5jdGlvbiBhcHBlbmRDU1Moc3R5bGVzKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgY29uc3QgaGVhZEVsID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIC8vIGNvbnN0IGNzc1N0eWxlcyA9IGNzc1xuXG4gICAgc3R5bGVFbC50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgICBoZWFkRWwuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG5cbiAgICBzdHlsZUVsLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIGlmIChzdHlsZUVsLnN0eWxlU2hlZXQpIHtcbiAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgZm9yIElFOCBhbmQgYmVsb3cuXG4gICAgICBzdHlsZUVsLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHN0eWxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHlsZXMpKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRzKCkge1xuICByZXR1cm4ge1xuICAgIGZiV2lkdGg6ICcxMDAlJyxcbiAgICBmYkhlaWdodDogJzUwcHgnLFxuICAgIGZiQm94SGVpZ2h0OiAnMzAwcHgnLFxuICAgIGZiU3RhcnRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIGZiRW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICBmYkJvdHRvbUJvcmRlcjogJzVweCBzb2xpZCAjZjJmMmYyJyxcbiAgICBmYkluaXRCdXR0b25UZXh0OiAnU2hvdyBNb3JlJyxcbiAgICBmYk9wZW5CdXR0b25UZXh0OiAnU2hvdyBMZXNzJyxcbiAgICBmYkJ1dHRvblBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBmYkJ1dHRvbkJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICBmYkJ1dHRvbkJhY2tncm91bmRIb3ZlcjogJyNmZmY7JyxcbiAgICBmYkJ1dHRvbkJhY2tncm91bmRGb2N1czogJyNmZmY7JyxcbiAgICBmYkJ1dHRvblRleHRDb2xvcjogJyMzMzMnLFxuICAgIGZiQnV0dG9uVGV4dENvbG9ySG92ZXI6ICcjMzMzJyxcbiAgICBmYkJ1dHRvbkxpbmVIZWlnaHQ6ICcxJyxcbiAgICBmYkJ1dHRvblRleHRDb2xvckZvY3VzOiAnIzMzMycsXG4gICAgZmJCdXR0b25Cb3JkZXJDb2xvcjogJyNmZmYnLFxuICAgIGZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1czogJyNkZWRlZGUnLFxuICAgIGZiQnV0dG9uV2lkdGg6ICcxMjBweCcsXG4gICAgZmJCdXR0b25IZWlnaHQ6ICcyMHB4JyxcbiAgICBmYkNsYXNzTGlzdDogJ3UtdGV4dC1jZW50ZXInLFxuICAgIGZiQnRuQ2xhc3NMaXN0OiAnYnRuIGJ0bi1wcmltYXJ5IG14LWF1dG8nLFxuICB9O1xufVxuZnVuY3Rpb24gc2V0dGluZ3Mob3B0cykge1xuICAvLyBsZXQgU2hvd01vcmVTZXR0aW5ncyA9IHR5cGVvZiBudWxsO1xuICBsZXQgZmJDb24gPSBbXTtcbiAgaWYgKHR5cGVvZiBTaG93TW9yZVNldHRpbmdzID09PSAndW5kZWZpbmVkJykge1xuICAgIGZiQ29uID0gZGVmYXVsdHMoKTtcbiAgfSBlbHNlIHtcbiAgICBmYkNvbiA9IFNob3dNb3JlU2V0dGluZ3M7XG4gIH1cblxuICBjb25zdCBzdHlsZXMgPSB7XG4gICAgY2xhc3NCYXNlOiAnYnV0dG9uLXNob3ctbW9yZScsXG4gICAgY2xhc3NBY3RpdmU6ICdpcy1mdWxseS1vcGVuZWQnLFxuICAgIGNsYXNzRm9jdXNlZDogJ2lzLWZvY3VzZWQnLFxuICAgIGZhZGViYXJDbGFzc0xpc3Q6ICdhbmltYXRlIHRleHQtY2VudGVyJyxcbiAgICBmYWRlYmFyYkJ1dHRvbkNsYXNzTGlzdDogJ2J0biBteC1hdXRvJyxcbiAgfTtcblxuICBjb25zdCBmYkFjdGlvbkJ0biA9IHtcbiAgICBzaG93TW9yZTogJ1Nob3cgTW9yZScsXG4gICAgc2hvd0xlc3M6ICdTaG93IExlc3MnLFxuICAgIHBvc2l0aW9uWDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb25ZOiAnYm90dG9tJyxcbiAgfTtcbiAgY29uc29sZS5sb2coJ3N0eWxlczonKVxuICBjb25zb2xlLmxvZyhzdHlsZXMpXG4gIGNvbnNvbGUubG9nKCdmYkFjdGlvbkJ0bjonKVxuICBjb25zb2xlLmxvZyhmYkFjdGlvbkJ0bilcbiAgY29uc29sZS5sb2coJ2ZiQ29uOicpXG4gIGNvbnNvbGUubG9nKGZiQ29uKVxuICBcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cygpLCBzdHlsZXMsIGZiQWN0aW9uQnRuLCBmYkNvbik7XG4gIC8vIGNzc0J1aWxkZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbiAgY2F0Y2goZSkge1xuICAgIGNvbnNvbGUubG9nKCdvYmplY3QgYXNzaWduIGVycm9yOiAnICsgZSlcbiAgfVxufVxubGV0IEZhZGVCYXJDU1MgPSAoKSA9PiB7fTtcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBGYWRlQmFyQ1NTID0gKCkgPT4ge1xuRmFkZUJhckNTUyA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGNzc1ZhbHVlcyA9IG9wdGlvbnM7XG5cbiAgY29uc3QgZmJDU1MgPSBgXG4gICAgLmotc2hvd21vcmUge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgaGVpZ2h0OiAke2Nzc1ZhbHVlcy5mYkJveEhlaWdodH07XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgcGFkZGluZy1ib3R0b206IDYwcHg7XG4gICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCA1MDBtcyBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgNTAwbXMgY3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNTUsIDEuMDAwKTtcbiAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDUwMG1zIGN1YmljLWJlemllcigwLjc3MCwgMC4wMDAsIDAuMTU1LCAxLjAwMCk7XG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCA1MDBtcyBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuXG4gICAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAtbW96LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgIC1vLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNTUsIDEuMDAwKTtcbiAgICB9XG4gICAgLmotc2hvd21vcmUuaXMtdmlzaWJsZSB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCA1MDBtcyBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgNTAwbXMgY3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNTUsIDEuMDAwKTtcbiAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDUwMG1zIGN1YmljLWJlemllcigwLjc3MCwgMC4wMDAsIDAuMTU1LCAxLjAwMCk7XG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCA1MDBtcyBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuXG4gICAgICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAtbW96LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgIC1vLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE1NSwgMS4wMDApO1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNTUsIDEuMDAwKTtcbiAgICB9XG4gICAgLmotc2hvd21vcmUgLmotZmFkZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgIHdpZHRoOiAke2Nzc1ZhbHVlcy5mYldpZHRofTtcbiAgICAgIGhlaWdodDogJHtjc3NWYWx1ZXMuZmJIZWlnaHR9O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGJvcmRlci1ib3R0b206ICR7Y3NzVmFsdWVzLmZiQm90dG9tQm9yZGVyfTtcbiAgICAgIGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgJHtjc3NWYWx1ZXMuZmJTdGFydENvbG9yfSwgJHtjc3NWYWx1ZXMuZmJFbmRDb2xvcn0gNjAlKTtcbiAgICAgIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwgJHtjc3NWYWx1ZXMuZmJTdGFydENvbG9yfSwgJHtjc3NWYWx1ZXMuZmJFbmRDb2xvcn0gNjAlKTtcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICR7Y3NzVmFsdWVzLmZiU3RhcnRDb2xvcn0sICR7Y3NzVmFsdWVzLmZiRW5kQ29sb3J9IDYwJSk7XG4gICAgICBmaWx0ZXI6IHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudCggc3RhcnRDb2xvcnN0cj0nJHtjc3NWYWx1ZXMuZmJTdGFydENvbG9yfScsIGVuZENvbG9yc3RyPScke2Nzc1ZhbHVlcy5mYkVuZENvbG9yfScsR3JhZGllbnRUeXBlPTAgKTtcbiAgICAgIGJveC1zaGFkb3c6IDBweCAtMnB4IDRweCAwcHggcmdiYSgwLCAwLCAwLCAwLjQ1KTtcbiAgICB9XG4gICAgLmhzLWNvZGUgLmotZmFkZXIge1xuICAgICAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICNmMmYyZjI7XG4gICAgICBiYWNrZ3JvdW5kOiAtbW96LWxpbmVhci1ncmFkaWVudCh0b3AsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42KSwgI2ZmZmZmZiA2MCUpO1xuICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNiksICNmZmZmZmYgNjAlKTtcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42KSwgI2ZmZmZmZiA2MCUpO1xuICAgICAgZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoIHN0YXJ0Q29sb3JzdHI9JyMwMGZmZmZmZicsIGVuZENvbG9yc3RyPScjZmZmZmZmJyxHcmFkaWVudFR5cGU9MCApO1xuICAgIH1cbiAgICAuai1zaG93bW9yZSAuai1mYWRlcl9idXR0b24ge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAtNnB4O1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICBwYWRkaW5nOiAycHggNnB4IDRweCA2cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Nzc1ZhbHVlcy5mYkJ1dHRvbkJhY2tncm91bmR9O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtjc3NWYWx1ZXMuZmJCdXR0b25Cb3JkZXJDb2xvcn07XG4gICAgICBib3JkZXItYm90dG9tOiA1cHggc29saWQgJHtjc3NWYWx1ZXMuZmJCdXR0b25Cb3JkZXJDb2xvcn07XG4gICAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgICAgIGNvbG9yOiAke2Nzc1ZhbHVlcy5mYkJ1dHRvblRleHRDb2xvcn07XG4gICAgICBsaW5lLWhlaWdodDogJHtjc3NWYWx1ZXMuZmJCdXR0b25MaW5lSGVpZ2h0fTtcbiAgICAgIHdpZHRoOiAke2Nzc1ZhbHVlcy5mYkJ1dHRvbldpZHRofTtcbiAgICAgIGhlaWdodDogJHtjc3NWYWx1ZXMuZmJCdXR0b25IZWlnaHR9O1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgIGJveC1zaGFkb3c6IDBweCAtMnB4IDRweCAwcHggcmdiYSgwLCAwLCAwLCAwLjQ1KTtcbiAgICB9XG4gICAgLmotc2hvd21vcmUgLmotZmFkZXJfYnV0dG9uOjpiZWZvcmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0b3A6IDUlO1xuICAgICAgei1pbmRleDogMTAwO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGNvbnRlbnQ6ICcke2Nzc1ZhbHVlcy5mYkluaXRCdXR0b25UZXh0fSc7XG4gICAgICBmb250LXNpemU6IDAuNzVyZW07XG4gICAgfVxuICAgIC5qLXNob3dtb3JlIC5qLWZhZGVyX2J1dHRvbi5pcy12aXNpYmxlOjpiZWZvcmUge1xuICAgICAgY29udGVudDogJyR7Y3NzVmFsdWVzLmZiT3BlbkJ1dHRvblRleHR9JztcbiAgICB9XG4gICAgLmotc2hvd21vcmUgLmotZmFkZXJfYnV0dG9uOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y3NzVmFsdWVzLmZiQnV0dG9uQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIGNvbG9yOiAke2Nzc1ZhbHVlcy5mYkJ1dHRvblRleHRDb2xvckhvdmVyfTtcbiAgICB9XG4gICAgLmotc2hvd21vcmUgLmotZmFkZXJfYnV0dG9uOmZvY3VzIHtcbiAgICAgIG91dGxpbmUtY29sb3I6ICR7Y3NzVmFsdWVzLmZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1c307XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Nzc1ZhbHVlcy5mYkJ1dHRvbkJvcmRlckNvbG9yRm9jdXN9O1xuICAgICAgY29sb3I6ICR7Y3NzVmFsdWVzLmZiQnV0dG9uVGV4dENvbG9yRm9jdXN9O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtjc3NWYWx1ZXMuZmJCdXR0b25Cb3JkZXJDb2xvckZvY3VzfTtcbiAgICAgIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCAke2Nzc1ZhbHVlcy5mYkJ1dHRvbkJvcmRlckNvbG9yRm9jdXN9O1xuICAgICAgYm94LXNoYWRvdzogdW5zZXQ7XG4gICAgfVxuICAgIC5qLXNob3dtb3JlIC5qLWZhZGVyX2J1dHRvbi5pcy12aXNpYmxlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y3NzVmFsdWVzLmZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1c307XG4gICAgICBjb2xvcjogJHtjc3NWYWx1ZXMuZmJCdXR0b25UZXh0Q29sb3JGb2N1c307XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAke2Nzc1ZhbHVlcy5mYkJ1dHRvbkJvcmRlckNvbG9yRm9jdXN9O1xuICAgICAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICR7Y3NzVmFsdWVzLmZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1c307XG4gICAgfVxuICAgIC5qLXNob3dtb3JlIC5qLWZhZGVyLmlzLXZpc2libGUge1xuICAgICAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICR7Y3NzVmFsdWVzLmZiQnV0dG9uQm9yZGVyQ29sb3JGb2N1c307XG4gICAgfVxuICAgIEBrZXlmcmFtZXMgc2xpZGVPcGVuIHtcbiAgICAgIGZyb20geyBoZWlnaHQ6IDMwMHB4OyB9XG4gICAgICB0byB7IGhlaWdodDogMTAwJTsgfVxuICAgIH1cbiAgICBAa2V5ZnJhbWVzIHNsaWRlQ2xvc2VkIHtcbiAgICAgIGZyb20geyBoZWlnaHQ6IDEwMCU7IH1cbiAgICAgIHRvIHsgaGVpZ2h0OiAzMDBweDsgfVxuICAgIH1cbiAgYDtcblxuICAvLyBhcHBlbmRDU1MoZmJDU1MpXG4gIHJldHVybiBmYkNTUztcbn07XG4iLCIvKipcbiAqIFN3aXBlciA2LjEuMVxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcbiAqIGh0dHA6Ly9zd2lwZXJqcy5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIwIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IEp1bHkgMzEsIDIwMjBcbiAqL1xuXG4hIGZ1bmN0aW9uIChlLCB0KSB7XG4gIFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSB0KCkgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKHQpIDogKGUgPSBlIHx8IHNlbGYpLlN3aXBlciA9IHQoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBmdW5jdGlvbiBlKGUsIHQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzID0gdFtpXTtcbiAgICAgIHMuZW51bWVyYWJsZSA9IHMuZW51bWVyYWJsZSB8fCAhMSwgcy5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIHMgJiYgKHMud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBzLmtleSwgcylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0KCkge1xuICAgIHJldHVybiAodCA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGZvciAodmFyIHQgPSAxOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgIHZhciBpID0gYXJndW1lbnRzW3RdO1xuICAgICAgICBmb3IgKHZhciBzIGluIGkpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLCBzKSAmJiAoZVtzXSA9IGlbc10pXG4gICAgICB9XG4gICAgICByZXR1cm4gZVxuICAgIH0pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIGkoZSkge1xuICAgIHJldHVybiBudWxsICE9PSBlICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgXCJjb25zdHJ1Y3RvclwiIGluIGUgJiYgZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0XG4gIH1cblxuICBmdW5jdGlvbiBzKGUsIHQpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSksIHZvaWQgMCA9PT0gdCAmJiAodCA9IHt9KSwgT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHZvaWQgMCA9PT0gZVthXSA/IGVbYV0gPSB0W2FdIDogaSh0W2FdKSAmJiBpKGVbYV0pICYmIE9iamVjdC5rZXlzKHRbYV0pLmxlbmd0aCA+IDAgJiYgcyhlW2FdLCB0W2FdKVxuICAgIH0pKVxuICB9XG4gIHZhciBhID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgIGJsdXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgbm9kZU5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluaXRFdmVudDogZnVuY3Rpb24gKCkge31cbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudE5TOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9LFxuICAgIGltcG9ydE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgaGFzaDogXCJcIixcbiAgICAgIGhvc3Q6IFwiXCIsXG4gICAgICBob3N0bmFtZTogXCJcIixcbiAgICAgIGhyZWY6IFwiXCIsXG4gICAgICBvcmlnaW46IFwiXCIsXG4gICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgIHByb3RvY29sOiBcIlwiLFxuICAgICAgc2VhcmNoOiBcIlwiXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHIoKSB7XG4gICAgdmFyIGUgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDoge307XG4gICAgcmV0dXJuIHMoZSwgYSksIGVcbiAgfVxuICB2YXIgbiA9IHtcbiAgICBkb2N1bWVudDogYSxcbiAgICBuYXZpZ2F0b3I6IHtcbiAgICAgIHVzZXJBZ2VudDogXCJcIlxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgIGhhc2g6IFwiXCIsXG4gICAgICBob3N0OiBcIlwiLFxuICAgICAgaG9zdG5hbWU6IFwiXCIsXG4gICAgICBocmVmOiBcIlwiLFxuICAgICAgb3JpZ2luOiBcIlwiLFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwcm90b2NvbDogXCJcIixcbiAgICAgIHNlYXJjaDogXCJcIlxuICAgIH0sXG4gICAgaGlzdG9yeToge1xuICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgICBnbzogZnVuY3Rpb24gKCkge30sXG4gICAgICBiYWNrOiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgSW1hZ2U6IGZ1bmN0aW9uICgpIHt9LFxuICAgIERhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKCkge30sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBtYXRjaE1lZGlhOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBzZXRUaW1lb3V0ID8gKGUoKSwgbnVsbCkgOiBzZXRUaW1lb3V0KGUsIDApXG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNldFRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KGUpXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGwoKSB7XG4gICAgdmFyIGUgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fTtcbiAgICByZXR1cm4gcyhlLCBuKSwgZVxuICB9XG5cbiAgZnVuY3Rpb24gbyhlKSB7XG4gICAgcmV0dXJuIChvID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSlcbiAgICB9KShlKVxuICB9XG5cbiAgZnVuY3Rpb24gZChlLCB0KSB7XG4gICAgcmV0dXJuIChkID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICByZXR1cm4gZS5fX3Byb3RvX18gPSB0LCBlXG4gICAgfSkoZSwgdClcbiAgfVxuXG4gIGZ1bmN0aW9uIGgoKSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIFJlZmxlY3QgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gITE7XG4gICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiAhMTtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBQcm94eSkgcmV0dXJuICEwO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgKGZ1bmN0aW9uICgpIHt9KSkpLCAhMFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAhMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHAoZSwgdCwgaSkge1xuICAgIHJldHVybiAocCA9IGgoKSA/IFJlZmxlY3QuY29uc3RydWN0IDogZnVuY3Rpb24gKGUsIHQsIGkpIHtcbiAgICAgIHZhciBzID0gW251bGxdO1xuICAgICAgcy5wdXNoLmFwcGx5KHMsIHQpO1xuICAgICAgdmFyIGEgPSBuZXcoRnVuY3Rpb24uYmluZC5hcHBseShlLCBzKSk7XG4gICAgICByZXR1cm4gaSAmJiBkKGEsIGkucHJvdG90eXBlKSwgYVxuICAgIH0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIHUoZSkge1xuICAgIHZhciB0ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBNYXAgPyBuZXcgTWFwIDogdm9pZCAwO1xuICAgIHJldHVybiAodSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAobnVsbCA9PT0gZSB8fCAoaSA9IGUsIC0xID09PSBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGkpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpKSkgcmV0dXJuIGU7XG4gICAgICB2YXIgaTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IHQpIHtcbiAgICAgICAgaWYgKHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7XG4gICAgICAgIHQuc2V0KGUsIHMpXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHMoKSB7XG4gICAgICAgIHJldHVybiBwKGUsIGFyZ3VtZW50cywgbyh0aGlzKS5jb25zdHJ1Y3RvcilcbiAgICAgIH1cbiAgICAgIHJldHVybiBzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogcyxcbiAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICB3cml0YWJsZTogITAsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgICAgICB9XG4gICAgICB9KSwgZChzLCBlKVxuICAgIH0pKGUpXG4gIH1cbiAgdmFyIGMgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciB0LCBpO1xuXG4gICAgZnVuY3Rpb24gcyh0KSB7XG4gICAgICB2YXIgaSwgcywgYTtcbiAgICAgIHJldHVybiBpID0gZS5jYWxsLmFwcGx5KGUsIFt0aGlzXS5jb25jYXQodCkpIHx8IHRoaXMsIHMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICAgIHJldHVybiBlXG4gICAgICB9KGkpLCBhID0gcy5fX3Byb3RvX18sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLCBcIl9fcHJvdG9fX1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBhXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBhLl9fcHJvdG9fXyA9IGVcbiAgICAgICAgfVxuICAgICAgfSksIGlcbiAgICB9XG4gICAgcmV0dXJuIGkgPSBlLCAodCA9IHMpLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLCB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQsIHQuX19wcm90b19fID0gaSwgc1xuICB9KHUoQXJyYXkpKTtcblxuICBmdW5jdGlvbiB2KGUpIHtcbiAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBbXSk7XG4gICAgdmFyIHQgPSBbXTtcbiAgICByZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgQXJyYXkuaXNBcnJheShlKSA/IHQucHVzaC5hcHBseSh0LCB2KGUpKSA6IHQucHVzaChlKVxuICAgIH0pKSwgdFxuICB9XG5cbiAgZnVuY3Rpb24gZihlLCB0KSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLCB0KVxuICB9XG5cbiAgZnVuY3Rpb24gbShlLCB0KSB7XG4gICAgdmFyIGkgPSBsKCksXG4gICAgICBzID0gcigpLFxuICAgICAgYSA9IFtdO1xuICAgIGlmICghdCAmJiBlIGluc3RhbmNlb2YgYykgcmV0dXJuIGU7XG4gICAgaWYgKCFlKSByZXR1cm4gbmV3IGMoYSk7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICAgIHZhciBuID0gZS50cmltKCk7XG4gICAgICBpZiAobi5pbmRleE9mKFwiPFwiKSA+PSAwICYmIG4uaW5kZXhPZihcIj5cIikgPj0gMCkge1xuICAgICAgICB2YXIgbyA9IFwiZGl2XCI7XG4gICAgICAgIDAgPT09IG4uaW5kZXhPZihcIjxsaVwiKSAmJiAobyA9IFwidWxcIiksIDAgPT09IG4uaW5kZXhPZihcIjx0clwiKSAmJiAobyA9IFwidGJvZHlcIiksIDAgIT09IG4uaW5kZXhPZihcIjx0ZFwiKSAmJiAwICE9PSBuLmluZGV4T2YoXCI8dGhcIikgfHwgKG8gPSBcInRyXCIpLCAwID09PSBuLmluZGV4T2YoXCI8dGJvZHlcIikgJiYgKG8gPSBcInRhYmxlXCIpLCAwID09PSBuLmluZGV4T2YoXCI8b3B0aW9uXCIpICYmIChvID0gXCJzZWxlY3RcIik7XG4gICAgICAgIHZhciBkID0gcy5jcmVhdGVFbGVtZW50KG8pO1xuICAgICAgICBkLmlubmVySFRNTCA9IG47XG4gICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgZC5jaGlsZE5vZGVzLmxlbmd0aDsgaCArPSAxKSBhLnB1c2goZC5jaGlsZE5vZGVzW2hdKVxuICAgICAgfSBlbHNlIGEgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSkgcmV0dXJuIFtlXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IFtdLCBzID0gdC5xdWVyeVNlbGVjdG9yQWxsKGUpLCBhID0gMDsgYSA8IHMubGVuZ3RoOyBhICs9IDEpIGkucHVzaChzW2FdKTtcbiAgICAgICAgcmV0dXJuIGlcbiAgICAgIH0oZS50cmltKCksIHQgfHwgcylcbiAgICB9IGVsc2UgaWYgKGUubm9kZVR5cGUgfHwgZSA9PT0gaSB8fCBlID09PSBzKSBhLnB1c2goZSk7XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBjKSByZXR1cm4gZTtcbiAgICAgIGEgPSBlXG4gICAgfVxuICAgIHJldHVybiBuZXcgYyhmdW5jdGlvbiAoZSkge1xuICAgICAgZm9yICh2YXIgdCA9IFtdLCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpICs9IDEpIC0gMSA9PT0gdC5pbmRleE9mKGVbaV0pICYmIHQucHVzaChlW2ldKTtcbiAgICAgIHJldHVybiB0XG4gICAgfShhKSlcbiAgfVxuICBtLmZuID0gYy5wcm90b3R5cGU7XG4gIHZhciBnLCB3LCBiLCB5ID0ge1xuICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCwgdCA9IG5ldyBBcnJheShlKSwgaSA9IDA7IGkgPCBlOyBpKyspIHRbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB2YXIgcyA9IHYodC5tYXAoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLnNwbGl0KFwiIFwiKVxuICAgICAgfSkpKTtcbiAgICAgIHJldHVybiB0aGlzLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICAodCA9IGUuY2xhc3NMaXN0KS5hZGQuYXBwbHkodCwgcylcbiAgICAgIH0pKSwgdGhpc1xuICAgIH0sXG4gICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoLCB0ID0gbmV3IEFycmF5KGUpLCBpID0gMDsgaSA8IGU7IGkrKykgdFtpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIHZhciBzID0gdih0Lm1hcCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUuc3BsaXQoXCIgXCIpXG4gICAgICB9KSkpO1xuICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgICh0ID0gZS5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseSh0LCBzKVxuICAgICAgfSkpLCB0aGlzXG4gICAgfSxcbiAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGgsIHQgPSBuZXcgQXJyYXkoZSksIGkgPSAwOyBpIDwgZTsgaSsrKSB0W2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgdmFyIHMgPSB2KHQubWFwKChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5zcGxpdChcIiBcIilcbiAgICAgIH0pKSk7XG4gICAgICByZXR1cm4gZih0aGlzLCAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHMuZmlsdGVyKChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBlLmNsYXNzTGlzdC5jb250YWlucyh0KVxuICAgICAgICB9KSkubGVuZ3RoID4gMFxuICAgICAgfSkpLmxlbmd0aCA+IDBcbiAgICB9LFxuICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCwgdCA9IG5ldyBBcnJheShlKSwgaSA9IDA7IGkgPCBlOyBpKyspIHRbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB2YXIgcyA9IHYodC5tYXAoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLnNwbGl0KFwiIFwiKVxuICAgICAgfSkpKTtcbiAgICAgIHRoaXMuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcy5mb3JFYWNoKChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGUuY2xhc3NMaXN0LnRvZ2dsZSh0KVxuICAgICAgICB9KSlcbiAgICAgIH0pKVxuICAgIH0sXG4gICAgYXR0cjogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIGlmICgxID09PSBhcmd1bWVudHMubGVuZ3RoICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5nZXRBdHRyaWJ1dGUoZSkgOiB2b2lkIDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpXG4gICAgICAgIGlmICgyID09PSBhcmd1bWVudHMubGVuZ3RoKSB0aGlzW2ldLnNldEF0dHJpYnV0ZShlLCB0KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGZvciAodmFyIHMgaW4gZSkgdGhpc1tpXVtzXSA9IGVbc10sIHRoaXNbaV0uc2V0QXR0cmlidXRlKHMsIGVbc10pO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0ICs9IDEpIHRoaXNbdF0ucmVtb3ZlQXR0cmlidXRlKGUpO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQgKz0gMSkgdGhpc1t0XS5zdHlsZS50cmFuc2Zvcm0gPSBlO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IGZ1bmN0aW9uIChlKSB7XG4gICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0ICs9IDEpIHRoaXNbdF0uc3R5bGUudHJhbnNpdGlvbiA9IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgPyBlICsgXCJtc1wiIDogZTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBvbjogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGgsIHQgPSBuZXcgQXJyYXkoZSksIGkgPSAwOyBpIDwgZTsgaSsrKSB0W2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgdmFyIHMgPSB0WzBdLFxuICAgICAgICBhID0gdFsxXSxcbiAgICAgICAgciA9IHRbMl0sXG4gICAgICAgIG4gPSB0WzNdO1xuXG4gICAgICBmdW5jdGlvbiBsKGUpIHtcbiAgICAgICAgdmFyIHQgPSBlLnRhcmdldDtcbiAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICB2YXIgaSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgICAgICAgaWYgKGkuaW5kZXhPZihlKSA8IDAgJiYgaS51bnNoaWZ0KGUpLCBtKHQpLmlzKGEpKSByLmFwcGx5KHQsIGkpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZvciAodmFyIHMgPSBtKHQpLnBhcmVudHMoKSwgbiA9IDA7IG4gPCBzLmxlbmd0aDsgbiArPSAxKSBtKHNbbl0pLmlzKGEpICYmIHIuYXBwbHkoc1tuXSwgaSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvKGUpIHtcbiAgICAgICAgdmFyIHQgPSBlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgICAgIHQuaW5kZXhPZihlKSA8IDAgJiYgdC51bnNoaWZ0KGUpLCByLmFwcGx5KHRoaXMsIHQpXG4gICAgICB9XG4gICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRbMV0gJiYgKHMgPSB0WzBdLCByID0gdFsxXSwgbiA9IHRbMl0sIGEgPSB2b2lkIDApLCBuIHx8IChuID0gITEpO1xuICAgICAgZm9yICh2YXIgZCwgaCA9IHMuc3BsaXQoXCIgXCIpLCBwID0gMDsgcCA8IHRoaXMubGVuZ3RoOyBwICs9IDEpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzW3BdO1xuICAgICAgICBpZiAoYSlcbiAgICAgICAgICBmb3IgKGQgPSAwOyBkIDwgaC5sZW5ndGg7IGQgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGMgPSBoW2RdO1xuICAgICAgICAgICAgdS5kb203TGl2ZUxpc3RlbmVycyB8fCAodS5kb203TGl2ZUxpc3RlbmVycyA9IHt9KSwgdS5kb203TGl2ZUxpc3RlbmVyc1tjXSB8fCAodS5kb203TGl2ZUxpc3RlbmVyc1tjXSA9IFtdKSwgdS5kb203TGl2ZUxpc3RlbmVyc1tjXS5wdXNoKHtcbiAgICAgICAgICAgICAgbGlzdGVuZXI6IHIsXG4gICAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGxcbiAgICAgICAgICAgIH0pLCB1LmFkZEV2ZW50TGlzdGVuZXIoYywgbCwgbilcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIGZvciAoZCA9IDA7IGQgPCBoLmxlbmd0aDsgZCArPSAxKSB7XG4gICAgICAgICAgICAgIHZhciB2ID0gaFtkXTtcbiAgICAgICAgICAgICAgdS5kb203TGlzdGVuZXJzIHx8ICh1LmRvbTdMaXN0ZW5lcnMgPSB7fSksIHUuZG9tN0xpc3RlbmVyc1t2XSB8fCAodS5kb203TGlzdGVuZXJzW3ZdID0gW10pLCB1LmRvbTdMaXN0ZW5lcnNbdl0ucHVzaCh7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXI6IHIsXG4gICAgICAgICAgICAgICAgcHJveHlMaXN0ZW5lcjogb1xuICAgICAgICAgICAgICB9KSwgdS5hZGRFdmVudExpc3RlbmVyKHYsIG8sIG4pXG4gICAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCwgdCA9IG5ldyBBcnJheShlKSwgaSA9IDA7IGkgPCBlOyBpKyspIHRbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB2YXIgcyA9IHRbMF0sXG4gICAgICAgIGEgPSB0WzFdLFxuICAgICAgICByID0gdFsyXSxcbiAgICAgICAgbiA9IHRbM107XG4gICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRbMV0gJiYgKHMgPSB0WzBdLCByID0gdFsxXSwgbiA9IHRbMl0sIGEgPSB2b2lkIDApLCBuIHx8IChuID0gITEpO1xuICAgICAgZm9yICh2YXIgbCA9IHMuc3BsaXQoXCIgXCIpLCBvID0gMDsgbyA8IGwubGVuZ3RoOyBvICs9IDEpXG4gICAgICAgIGZvciAodmFyIGQgPSBsW29dLCBoID0gMDsgaCA8IHRoaXMubGVuZ3RoOyBoICs9IDEpIHtcbiAgICAgICAgICB2YXIgcCA9IHRoaXNbaF0sXG4gICAgICAgICAgICB1ID0gdm9pZCAwO1xuICAgICAgICAgIGlmICghYSAmJiBwLmRvbTdMaXN0ZW5lcnMgPyB1ID0gcC5kb203TGlzdGVuZXJzW2RdIDogYSAmJiBwLmRvbTdMaXZlTGlzdGVuZXJzICYmICh1ID0gcC5kb203TGl2ZUxpc3RlbmVyc1tkXSksIHUgJiYgdS5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKHZhciBjID0gdS5sZW5ndGggLSAxOyBjID49IDA7IGMgLT0gMSkge1xuICAgICAgICAgICAgICB2YXIgdiA9IHVbY107XG4gICAgICAgICAgICAgIHIgJiYgdi5saXN0ZW5lciA9PT0gciB8fCByICYmIHYubGlzdGVuZXIgJiYgdi5saXN0ZW5lci5kb203cHJveHkgJiYgdi5saXN0ZW5lci5kb203cHJveHkgPT09IHIgPyAocC5yZW1vdmVFdmVudExpc3RlbmVyKGQsIHYucHJveHlMaXN0ZW5lciwgbiksIHUuc3BsaWNlKGMsIDEpKSA6IHIgfHwgKHAucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLCB2LnByb3h5TGlzdGVuZXIsIG4pLCB1LnNwbGljZShjLCAxKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGUgPSBsKCksIHQgPSBhcmd1bWVudHMubGVuZ3RoLCBpID0gbmV3IEFycmF5KHQpLCBzID0gMDsgcyA8IHQ7IHMrKykgaVtzXSA9IGFyZ3VtZW50c1tzXTtcbiAgICAgIGZvciAodmFyIGEgPSBpWzBdLnNwbGl0KFwiIFwiKSwgciA9IGlbMV0sIG4gPSAwOyBuIDwgYS5sZW5ndGg7IG4gKz0gMSlcbiAgICAgICAgZm9yICh2YXIgbyA9IGFbbl0sIGQgPSAwOyBkIDwgdGhpcy5sZW5ndGg7IGQgKz0gMSkge1xuICAgICAgICAgIHZhciBoID0gdGhpc1tkXTtcbiAgICAgICAgICBpZiAoZS5DdXN0b21FdmVudCkge1xuICAgICAgICAgICAgdmFyIHAgPSBuZXcgZS5DdXN0b21FdmVudChvLCB7XG4gICAgICAgICAgICAgIGRldGFpbDogcixcbiAgICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGguZG9tN0V2ZW50RGF0YSA9IGkuZmlsdGVyKChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICByZXR1cm4gdCA+IDBcbiAgICAgICAgICAgIH0pKSwgaC5kaXNwYXRjaEV2ZW50KHApLCBoLmRvbTdFdmVudERhdGEgPSBbXSwgZGVsZXRlIGguZG9tN0V2ZW50RGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICByZXR1cm4gZSAmJiB0Lm9uKFwidHJhbnNpdGlvbmVuZFwiLCAoZnVuY3Rpb24gaShzKSB7XG4gICAgICAgIHMudGFyZ2V0ID09PSB0aGlzICYmIChlLmNhbGwodGhpcywgcyksIHQub2ZmKFwidHJhbnNpdGlvbmVuZFwiLCBpKSlcbiAgICAgIH0pKSwgdGhpc1xuICAgIH0sXG4gICAgb3V0ZXJXaWR0aDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcIm1hcmdpbi1yaWdodFwiKSkgKyBwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcIm1hcmdpbi1sZWZ0XCIpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgb3V0ZXJIZWlnaHQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQodC5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLXRvcFwiKSkgKyBwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcIm1hcmdpbi1ib3R0b21cIikpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgc3R5bGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZSA9IGwoKTtcbiAgICAgIHJldHVybiB0aGlzWzBdID8gZS5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpIDoge31cbiAgICB9LFxuICAgIG9mZnNldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZSA9IGwoKSxcbiAgICAgICAgICB0ID0gcigpLFxuICAgICAgICAgIGkgPSB0aGlzWzBdLFxuICAgICAgICAgIHMgPSBpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIGEgPSB0LmJvZHksXG4gICAgICAgICAgbiA9IGkuY2xpZW50VG9wIHx8IGEuY2xpZW50VG9wIHx8IDAsXG4gICAgICAgICAgbyA9IGkuY2xpZW50TGVmdCB8fCBhLmNsaWVudExlZnQgfHwgMCxcbiAgICAgICAgICBkID0gaSA9PT0gZSA/IGUuc2Nyb2xsWSA6IGkuc2Nyb2xsVG9wLFxuICAgICAgICAgIGggPSBpID09PSBlID8gZS5zY3JvbGxYIDogaS5zY3JvbGxMZWZ0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogcy50b3AgKyBkIC0gbixcbiAgICAgICAgICBsZWZ0OiBzLmxlZnQgKyBoIC0gb1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgY3NzOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgdmFyIGksIHMgPSBsKCk7XG4gICAgICBpZiAoMSA9PT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKVxuICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBlKSB0aGlzW2ldLnN0eWxlW2FdID0gZVthXTtcbiAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gcy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUoZSlcbiAgICAgIH1cbiAgICAgIGlmICgyID09PSBhcmd1bWVudHMubGVuZ3RoICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHRoaXNbaV0uc3R5bGVbZV0gPSB0O1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIGVhY2g6IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSA/ICh0aGlzLmZvckVhY2goKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgIGUuYXBwbHkodCwgW3QsIGldKVxuICAgICAgfSkpLCB0aGlzKSA6IHRoaXNcbiAgICB9LFxuICAgIGh0bWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogbnVsbDtcbiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQgKz0gMSkgdGhpc1t0XS5pbm5lckhUTUwgPSBlO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIHRleHQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpIDogbnVsbDtcbiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5sZW5ndGg7IHQgKz0gMSkgdGhpc1t0XS50ZXh0Q29udGVudCA9IGU7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgaXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdCwgaSwgcyA9IGwoKSxcbiAgICAgICAgYSA9IHIoKSxcbiAgICAgICAgbiA9IHRoaXNbMF07XG4gICAgICBpZiAoIW4gfHwgdm9pZCAwID09PSBlKSByZXR1cm4gITE7XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkge1xuICAgICAgICBpZiAobi5tYXRjaGVzKSByZXR1cm4gbi5tYXRjaGVzKGUpO1xuICAgICAgICBpZiAobi53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBuLndlYmtpdE1hdGNoZXNTZWxlY3RvcihlKTtcbiAgICAgICAgaWYgKG4ubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBuLm1zTWF0Y2hlc1NlbGVjdG9yKGUpO1xuICAgICAgICBmb3IgKHQgPSBtKGUpLCBpID0gMDsgaSA8IHQubGVuZ3RoOyBpICs9IDEpXG4gICAgICAgICAgaWYgKHRbaV0gPT09IG4pIHJldHVybiAhMDtcbiAgICAgICAgcmV0dXJuICExXG4gICAgICB9XG4gICAgICBpZiAoZSA9PT0gYSkgcmV0dXJuIG4gPT09IGE7XG4gICAgICBpZiAoZSA9PT0gcykgcmV0dXJuIG4gPT09IHM7XG4gICAgICBpZiAoZS5ub2RlVHlwZSB8fCBlIGluc3RhbmNlb2YgYykge1xuICAgICAgICBmb3IgKHQgPSBlLm5vZGVUeXBlID8gW2VdIDogZSwgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAgICAgIGlmICh0W2ldID09PSBuKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMVxuICAgICAgfVxuICAgICAgcmV0dXJuICExXG4gICAgfSxcbiAgICBpbmRleDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGUsIHQgPSB0aGlzWzBdO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgZm9yIChlID0gMDsgbnVsbCAhPT0gKHQgPSB0LnByZXZpb3VzU2libGluZyk7KSAxID09PSB0Lm5vZGVUeXBlICYmIChlICs9IDEpO1xuICAgICAgICByZXR1cm4gZVxuICAgICAgfVxuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBlKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciB0ID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAoZSA+IHQgLSAxKSByZXR1cm4gbShbXSk7XG4gICAgICBpZiAoZSA8IDApIHtcbiAgICAgICAgdmFyIGkgPSB0ICsgZTtcbiAgICAgICAgcmV0dXJuIG0oaSA8IDAgPyBbXSA6IFt0aGlzW2ldXSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBtKFt0aGlzW2VdXSlcbiAgICB9LFxuICAgIGFwcGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgZSwgdCA9IHIoKSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHZvaWQgMCA6IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCB0aGlzLmxlbmd0aDsgcyArPSAxKVxuICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGZvciAoYS5pbm5lckhUTUwgPSBlOyBhLmZpcnN0Q2hpbGQ7KSB0aGlzW3NdLmFwcGVuZENoaWxkKGEuZmlyc3RDaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBjKVxuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4gKz0gMSkgdGhpc1tzXS5hcHBlbmRDaGlsZChlW25dKTtcbiAgICAgICAgZWxzZSB0aGlzW3NdLmFwcGVuZENoaWxkKGUpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgcHJlcGVuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0LCBpLCBzID0gcigpO1xuICAgICAgZm9yICh0ID0gMDsgdCA8IHRoaXMubGVuZ3RoOyB0ICs9IDEpXG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICAgICAgdmFyIGEgPSBzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgZm9yIChhLmlubmVySFRNTCA9IGUsIGkgPSBhLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHRoaXNbdF0uaW5zZXJ0QmVmb3JlKGEuY2hpbGROb2Rlc1tpXSwgdGhpc1t0XS5jaGlsZE5vZGVzWzBdKVxuICAgICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBjKVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkgKz0gMSkgdGhpc1t0XS5pbnNlcnRCZWZvcmUoZVtpXSwgdGhpc1t0XS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIGVsc2UgdGhpc1t0XS5pbnNlcnRCZWZvcmUoZSwgdGhpc1t0XS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBuZXh0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMCA/IGUgPyB0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiBtKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhlKSA/IG0oW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSkgOiBtKFtdKSA6IHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nID8gbShbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKSA6IG0oW10pIDogbShbXSlcbiAgICB9LFxuICAgIG5leHRBbGw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdCA9IFtdLFxuICAgICAgICBpID0gdGhpc1swXTtcbiAgICAgIGlmICghaSkgcmV0dXJuIG0oW10pO1xuICAgICAgZm9yICg7IGkubmV4dEVsZW1lbnRTaWJsaW5nOykge1xuICAgICAgICB2YXIgcyA9IGkubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBlID8gbShzKS5pcyhlKSAmJiB0LnB1c2gocykgOiB0LnB1c2gocyksIGkgPSBzXG4gICAgICB9XG4gICAgICByZXR1cm4gbSh0KVxuICAgIH0sXG4gICAgcHJldjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzWzBdO1xuICAgICAgICByZXR1cm4gZSA/IHQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBtKHQucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoZSkgPyBtKFt0LnByZXZpb3VzRWxlbWVudFNpYmxpbmddKSA6IG0oW10pIDogdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID8gbShbdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSkgOiBtKFtdKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG0oW10pXG4gICAgfSxcbiAgICBwcmV2QWxsOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHQgPSBbXSxcbiAgICAgICAgaSA9IHRoaXNbMF07XG4gICAgICBpZiAoIWkpIHJldHVybiBtKFtdKTtcbiAgICAgIGZvciAoOyBpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7KSB7XG4gICAgICAgIHZhciBzID0gaS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBlID8gbShzKS5pcyhlKSAmJiB0LnB1c2gocykgOiB0LnB1c2gocyksIGkgPSBzXG4gICAgICB9XG4gICAgICByZXR1cm4gbSh0KVxuICAgIH0sXG4gICAgcGFyZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgZm9yICh2YXIgdCA9IFtdLCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIG51bGwgIT09IHRoaXNbaV0ucGFyZW50Tm9kZSAmJiAoZSA/IG0odGhpc1tpXS5wYXJlbnROb2RlKS5pcyhlKSAmJiB0LnB1c2godGhpc1tpXS5wYXJlbnROb2RlKSA6IHQucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpKTtcbiAgICAgIHJldHVybiBtKHQpXG4gICAgfSxcbiAgICBwYXJlbnRzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgZm9yICh2YXIgdCA9IFtdLCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpXG4gICAgICAgIGZvciAodmFyIHMgPSB0aGlzW2ldLnBhcmVudE5vZGU7IHM7KSBlID8gbShzKS5pcyhlKSAmJiB0LnB1c2gocykgOiB0LnB1c2gocyksIHMgPSBzLnBhcmVudE5vZGU7XG4gICAgICByZXR1cm4gbSh0KVxuICAgIH0sXG4gICAgY2xvc2VzdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgPyBtKFtdKSA6ICh0LmlzKGUpIHx8ICh0ID0gdC5wYXJlbnRzKGUpLmVxKDApKSwgdClcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBmb3IgKHZhciB0ID0gW10sIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSlcbiAgICAgICAgZm9yICh2YXIgcyA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChlKSwgYSA9IDA7IGEgPCBzLmxlbmd0aDsgYSArPSAxKSB0LnB1c2goc1thXSk7XG4gICAgICByZXR1cm4gbSh0KVxuICAgIH0sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIChlKSB7XG4gICAgICBmb3IgKHZhciB0ID0gW10sIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSlcbiAgICAgICAgZm9yICh2YXIgcyA9IHRoaXNbaV0uY2hpbGRyZW4sIGEgPSAwOyBhIDwgcy5sZW5ndGg7IGEgKz0gMSkgZSAmJiAhbShzW2FdKS5pcyhlKSB8fCB0LnB1c2goc1thXSk7XG4gICAgICByZXR1cm4gbSh0KVxuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG0oZih0aGlzLCBlKSlcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0aGlzLmxlbmd0aDsgZSArPSAxKSB0aGlzW2VdLnBhcmVudE5vZGUgJiYgdGhpc1tlXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbZV0pO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gRShlLCB0KSB7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IDApLCBzZXRUaW1lb3V0KGUsIHQpXG4gIH1cblxuICBmdW5jdGlvbiB4KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpXG4gIH1cblxuICBmdW5jdGlvbiBUKGUsIHQpIHtcbiAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSBcInhcIik7XG4gICAgdmFyIGksIHMsIGEsIHIgPSBsKCksXG4gICAgICBuID0gci5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpO1xuICAgIHJldHVybiByLldlYktpdENTU01hdHJpeCA/ICgocyA9IG4udHJhbnNmb3JtIHx8IG4ud2Via2l0VHJhbnNmb3JtKS5zcGxpdChcIixcIikubGVuZ3RoID4gNiAmJiAocyA9IHMuc3BsaXQoXCIsIFwiKS5tYXAoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZS5yZXBsYWNlKFwiLFwiLCBcIi5cIilcbiAgICB9KSkuam9pbihcIiwgXCIpKSwgYSA9IG5ldyByLldlYktpdENTU01hdHJpeChcIm5vbmVcIiA9PT0gcyA/IFwiXCIgOiBzKSkgOiBpID0gKGEgPSBuLk1velRyYW5zZm9ybSB8fCBuLk9UcmFuc2Zvcm0gfHwgbi5Nc1RyYW5zZm9ybSB8fCBuLm1zVHJhbnNmb3JtIHx8IG4udHJhbnNmb3JtIHx8IG4uZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKS5yZXBsYWNlKFwidHJhbnNsYXRlKFwiLCBcIm1hdHJpeCgxLCAwLCAwLCAxLFwiKSkudG9TdHJpbmcoKS5zcGxpdChcIixcIiksIFwieFwiID09PSB0ICYmIChzID0gci5XZWJLaXRDU1NNYXRyaXggPyBhLm00MSA6IDE2ID09PSBpLmxlbmd0aCA/IHBhcnNlRmxvYXQoaVsxMl0pIDogcGFyc2VGbG9hdChpWzRdKSksIFwieVwiID09PSB0ICYmIChzID0gci5XZWJLaXRDU1NNYXRyaXggPyBhLm00MiA6IDE2ID09PSBpLmxlbmd0aCA/IHBhcnNlRmxvYXQoaVsxM10pIDogcGFyc2VGbG9hdChpWzVdKSksIHMgfHwgMFxuICB9XG5cbiAgZnVuY3Rpb24gQyhlKSB7XG4gICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSAmJiBlLmNvbnN0cnVjdG9yICYmIGUuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICB9XG5cbiAgZnVuY3Rpb24gUygpIHtcbiAgICBmb3IgKHZhciBlID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHZvaWQgMCA6IGFyZ3VtZW50c1swXSksIHQgPSAxOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCArPSAxKSB7XG4gICAgICB2YXIgaSA9IHQgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gdCA/IHZvaWQgMCA6IGFyZ3VtZW50c1t0XTtcbiAgICAgIGlmIChudWxsICE9IGkpXG4gICAgICAgIGZvciAodmFyIHMgPSBPYmplY3Qua2V5cyhPYmplY3QoaSkpLCBhID0gMCwgciA9IHMubGVuZ3RoOyBhIDwgcjsgYSArPSAxKSB7XG4gICAgICAgICAgdmFyIG4gPSBzW2FdLFxuICAgICAgICAgICAgbCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaSwgbik7XG4gICAgICAgICAgdm9pZCAwICE9PSBsICYmIGwuZW51bWVyYWJsZSAmJiAoQyhlW25dKSAmJiBDKGlbbl0pID8gUyhlW25dLCBpW25dKSA6ICFDKGVbbl0pICYmIEMoaVtuXSkgPyAoZVtuXSA9IHt9LCBTKGVbbl0sIGlbbl0pKSA6IGVbbl0gPSBpW25dKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlXG4gIH1cblxuICBmdW5jdGlvbiBNKGUsIHQpIHtcbiAgICBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbiAoaSkge1xuICAgICAgQyh0W2ldKSAmJiBPYmplY3Qua2V5cyh0W2ldKS5mb3JFYWNoKChmdW5jdGlvbiAocykge1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRbaV1bc10gJiYgKHRbaV1bc10gPSB0W2ldW3NdLmJpbmQoZSkpXG4gICAgICB9KSksIGVbaV0gPSB0W2ldXG4gICAgfSkpXG4gIH1cblxuICBmdW5jdGlvbiB6KCkge1xuICAgIHJldHVybiBnIHx8IChnID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGUgPSBsKCksXG4gICAgICAgIHQgPSByKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3VjaDogISEoXCJvbnRvdWNoc3RhcnRcIiBpbiBlIHx8IGUuRG9jdW1lbnRUb3VjaCAmJiB0IGluc3RhbmNlb2YgZS5Eb2N1bWVudFRvdWNoKSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogISFlLlBvaW50ZXJFdmVudCAmJiBcIm1heFRvdWNoUG9pbnRzXCIgaW4gZS5uYXZpZ2F0b3IgJiYgZS5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPj0gMCxcbiAgICAgICAgb2JzZXJ2ZXI6IFwiTXV0YXRpb25PYnNlcnZlclwiIGluIGUgfHwgXCJXZWJraXRNdXRhdGlvbk9ic2VydmVyXCIgaW4gZSxcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHQgPSAhMTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIFwicGFzc2l2ZVwiLCB7XG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHQgPSAhMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RQYXNzaXZlTGlzdGVuZXJcIiwgbnVsbCwgaSlcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgIHJldHVybiB0XG4gICAgICAgIH0oKSxcbiAgICAgICAgZ2VzdHVyZXM6IFwib25nZXN0dXJlc3RhcnRcIiBpbiBlXG4gICAgICB9XG4gICAgfSgpKSwgZ1xuICB9XG5cbiAgZnVuY3Rpb24gUChlKSB7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHt9KSwgdyB8fCAodyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdCA9ICh2b2lkIDAgPT09IGUgPyB7fSA6IGUpLnVzZXJBZ2VudCxcbiAgICAgICAgaSA9IHooKSxcbiAgICAgICAgcyA9IGwoKSxcbiAgICAgICAgYSA9IHMubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICByID0gdCB8fCBzLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIG4gPSB7XG4gICAgICAgICAgaW9zOiAhMSxcbiAgICAgICAgICBhbmRyb2lkOiAhMVxuICAgICAgICB9LFxuICAgICAgICBvID0gcy5zY3JlZW4ud2lkdGgsXG4gICAgICAgIGQgPSBzLnNjcmVlbi5oZWlnaHQsXG4gICAgICAgIGggPSByLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKSxcbiAgICAgICAgcCA9IHIubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKSxcbiAgICAgICAgdSA9IHIubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKSxcbiAgICAgICAgYyA9ICFwICYmIHIubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyksXG4gICAgICAgIHYgPSBcIldpbjMyXCIgPT09IGEsXG4gICAgICAgIGYgPSBcIk1hY0ludGVsXCIgPT09IGE7XG4gICAgICByZXR1cm4gIXAgJiYgZiAmJiBpLnRvdWNoICYmIFtcIjEwMjR4MTM2NlwiLCBcIjEzNjZ4MTAyNFwiLCBcIjgzNHgxMTk0XCIsIFwiMTE5NHg4MzRcIiwgXCI4MzR4MTExMlwiLCBcIjExMTJ4ODM0XCIsIFwiNzY4eDEwMjRcIiwgXCIxMDI0eDc2OFwiXS5pbmRleE9mKG8gKyBcInhcIiArIGQpID49IDAgJiYgKChwID0gci5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLykpIHx8IChwID0gWzAsIDEsIFwiMTNfMF8wXCJdKSwgZiA9ICExKSwgaCAmJiAhdiAmJiAobi5vcyA9IFwiYW5kcm9pZFwiLCBuLmFuZHJvaWQgPSAhMCksIChwIHx8IGMgfHwgdSkgJiYgKG4ub3MgPSBcImlvc1wiLCBuLmlvcyA9ICEwKSwgblxuICAgIH0oZSkpLCB3XG4gIH1cblxuICBmdW5jdGlvbiBrKCkge1xuICAgIHJldHVybiBiIHx8IChiID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGUsIHQgPSBsKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0VkZ2U6ICEhdC5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgICAgICBpc1NhZmFyaTogKGUgPSB0Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwgZS5pbmRleE9mKFwic2FmYXJpXCIpID49IDAgJiYgZS5pbmRleE9mKFwiY2hyb21lXCIpIDwgMCAmJiBlLmluZGV4T2YoXCJhbmRyb2lkXCIpIDwgMCksXG4gICAgICAgIGlzV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHQubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICAgIH1cbiAgICB9KCkpLCBiXG4gIH1cbiAgT2JqZWN0LmtleXMoeSkuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICBtLmZuW2VdID0geVtlXVxuICB9KSk7XG4gIHZhciAkID0ge1xuICAgICAgbmFtZTogXCJyZXNpemVcIixcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIFMoZSwge1xuICAgICAgICAgIHJlc2l6ZToge1xuICAgICAgICAgICAgcmVzaXplSGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBlICYmICFlLmRlc3Ryb3llZCAmJiBlLmluaXRpYWxpemVkICYmIChlLmVtaXQoXCJiZWZvcmVSZXNpemVcIiksIGUuZW1pdChcInJlc2l6ZVwiKSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZSAmJiAhZS5kZXN0cm95ZWQgJiYgZS5pbml0aWFsaXplZCAmJiBlLmVtaXQoXCJvcmllbnRhdGlvbmNoYW5nZVwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gbCgpO1xuICAgICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBlLnJlc2l6ZS5yZXNpemVIYW5kbGVyKSwgdC5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgZS5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gbCgpO1xuICAgICAgICAgIHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBlLnJlc2l6ZS5yZXNpemVIYW5kbGVyKSwgdC5yZW1vdmVFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgZS5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBMID0ge1xuICAgICAgYXR0YWNoOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSB7fSk7XG4gICAgICAgIHZhciBpID0gbCgpLFxuICAgICAgICAgIHMgPSB0aGlzLFxuICAgICAgICAgIGEgPSBuZXcoaS5NdXRhdGlvbk9ic2VydmVyIHx8IGkuV2Via2l0TXV0YXRpb25PYnNlcnZlcikoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoMSAhPT0gZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcy5lbWl0KFwib2JzZXJ2ZXJVcGRhdGVcIiwgZVswXSlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyBpLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0KSA6IGkuc2V0VGltZW91dCh0LCAwKVxuICAgICAgICAgICAgfSBlbHNlIHMuZW1pdChcIm9ic2VydmVyVXBkYXRlXCIsIGVbMF0pXG4gICAgICAgICAgfSkpO1xuICAgICAgICBhLm9ic2VydmUoZSwge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHZvaWQgMCA9PT0gdC5hdHRyaWJ1dGVzIHx8IHQuYXR0cmlidXRlcyxcbiAgICAgICAgICBjaGlsZExpc3Q6IHZvaWQgMCA9PT0gdC5jaGlsZExpc3QgfHwgdC5jaGlsZExpc3QsXG4gICAgICAgICAgY2hhcmFjdGVyRGF0YTogdm9pZCAwID09PSB0LmNoYXJhY3RlckRhdGEgfHwgdC5jaGFyYWN0ZXJEYXRhXG4gICAgICAgIH0pLCBzLm9ic2VydmVyLm9ic2VydmVycy5wdXNoKGEpXG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zdXBwb3J0Lm9ic2VydmVyICYmIHRoaXMucGFyYW1zLm9ic2VydmVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMucGFyYW1zLm9ic2VydmVQYXJlbnRzKVxuICAgICAgICAgICAgZm9yICh2YXIgZSA9IHRoaXMuJGVsLnBhcmVudHMoKSwgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCArPSAxKSB0aGlzLm9ic2VydmVyLmF0dGFjaChlW3RdKTtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLmF0dGFjaCh0aGlzLiRlbFswXSwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0aGlzLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgICAgICAgIH0pLCB0aGlzLm9ic2VydmVyLmF0dGFjaCh0aGlzLiR3cmFwcGVyRWxbMF0sIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6ICExXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmRpc2Nvbm5lY3QoKVxuICAgICAgICB9KSksIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW11cbiAgICAgIH1cbiAgICB9LFxuICAgIEkgPSB7XG4gICAgICBuYW1lOiBcIm9ic2VydmVyXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgb2JzZXJ2ZXI6ICExLFxuICAgICAgICBvYnNlcnZlUGFyZW50czogITEsXG4gICAgICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiAhMVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBvYnNlcnZlcjogdCh0KHt9LCBMKSwge30sIHtcbiAgICAgICAgICAgIG9ic2VydmVyczogW11cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5vYnNlcnZlci5pbml0KClcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLm9ic2VydmVyLmRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICBmdW5jdGlvbiBPKGUpIHtcbiAgICB2YXIgdCA9IHIoKSxcbiAgICAgIGkgPSBsKCksXG4gICAgICBzID0gdGhpcy50b3VjaEV2ZW50c0RhdGEsXG4gICAgICBhID0gdGhpcy5wYXJhbXMsXG4gICAgICBuID0gdGhpcy50b3VjaGVzO1xuICAgIGlmICghdGhpcy5hbmltYXRpbmcgfHwgIWEucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgICB2YXIgbyA9IGU7XG4gICAgICBvLm9yaWdpbmFsRXZlbnQgJiYgKG8gPSBvLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgdmFyIGQgPSBtKG8udGFyZ2V0KTtcbiAgICAgIGlmICgoXCJ3cmFwcGVyXCIgIT09IGEudG91Y2hFdmVudHNUYXJnZXQgfHwgZC5jbG9zZXN0KHRoaXMud3JhcHBlckVsKS5sZW5ndGgpICYmIChzLmlzVG91Y2hFdmVudCA9IFwidG91Y2hzdGFydFwiID09PSBvLnR5cGUsIChzLmlzVG91Y2hFdmVudCB8fCAhKFwid2hpY2hcIiBpbiBvKSB8fCAzICE9PSBvLndoaWNoKSAmJiAhKCFzLmlzVG91Y2hFdmVudCAmJiBcImJ1dHRvblwiIGluIG8gJiYgby5idXR0b24gPiAwIHx8IHMuaXNUb3VjaGVkICYmIHMuaXNNb3ZlZCkpKVxuICAgICAgICBpZiAoYS5ub1N3aXBpbmcgJiYgZC5jbG9zZXN0KGEubm9Td2lwaW5nU2VsZWN0b3IgPyBhLm5vU3dpcGluZ1NlbGVjdG9yIDogXCIuXCIgKyBhLm5vU3dpcGluZ0NsYXNzKVswXSkgdGhpcy5hbGxvd0NsaWNrID0gITA7XG4gICAgICAgIGVsc2UgaWYgKCFhLnN3aXBlSGFuZGxlciB8fCBkLmNsb3Nlc3QoYS5zd2lwZUhhbmRsZXIpWzBdKSB7XG4gICAgICAgIG4uY3VycmVudFggPSBcInRvdWNoc3RhcnRcIiA9PT0gby50eXBlID8gby50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogby5wYWdlWCwgbi5jdXJyZW50WSA9IFwidG91Y2hzdGFydFwiID09PSBvLnR5cGUgPyBvLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBvLnBhZ2VZO1xuICAgICAgICB2YXIgaCA9IG4uY3VycmVudFgsXG4gICAgICAgICAgcCA9IG4uY3VycmVudFksXG4gICAgICAgICAgdSA9IGEuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IGEuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uLFxuICAgICAgICAgIGMgPSBhLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBhLmlPU0VkZ2VTd2lwZVRocmVzaG9sZDtcbiAgICAgICAgaWYgKCF1IHx8ICEoaCA8PSBjIHx8IGggPj0gaS5zY3JlZW4ud2lkdGggLSBjKSkge1xuICAgICAgICAgIGlmIChTKHMsIHtcbiAgICAgICAgICAgICAgaXNUb3VjaGVkOiAhMCxcbiAgICAgICAgICAgICAgaXNNb3ZlZDogITEsXG4gICAgICAgICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6ICEwLFxuICAgICAgICAgICAgICBpc1Njcm9sbGluZzogdm9pZCAwLFxuICAgICAgICAgICAgICBzdGFydE1vdmluZzogdm9pZCAwXG4gICAgICAgICAgICB9KSwgbi5zdGFydFggPSBoLCBuLnN0YXJ0WSA9IHAsIHMudG91Y2hTdGFydFRpbWUgPSB4KCksIHRoaXMuYWxsb3dDbGljayA9ICEwLCB0aGlzLnVwZGF0ZVNpemUoKSwgdGhpcy5zd2lwZURpcmVjdGlvbiA9IHZvaWQgMCwgYS50aHJlc2hvbGQgPiAwICYmIChzLmFsbG93VGhyZXNob2xkTW92ZSA9ICExKSwgXCJ0b3VjaHN0YXJ0XCIgIT09IG8udHlwZSkge1xuICAgICAgICAgICAgdmFyIHYgPSAhMDtcbiAgICAgICAgICAgIGQuaXMocy5mb3JtRWxlbWVudHMpICYmICh2ID0gITEpLCB0LmFjdGl2ZUVsZW1lbnQgJiYgbSh0LmFjdGl2ZUVsZW1lbnQpLmlzKHMuZm9ybUVsZW1lbnRzKSAmJiB0LmFjdGl2ZUVsZW1lbnQgIT09IGRbMF0gJiYgdC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgICAgICAgIHZhciBmID0gdiAmJiB0aGlzLmFsbG93VG91Y2hNb3ZlICYmIGEudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICAgICAgICAgICAgKGEudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgZikgJiYgby5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZW1pdChcInRvdWNoU3RhcnRcIiwgbylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEEoZSkge1xuICAgIHZhciB0ID0gcigpLFxuICAgICAgaSA9IHRoaXMudG91Y2hFdmVudHNEYXRhLFxuICAgICAgcyA9IHRoaXMucGFyYW1zLFxuICAgICAgYSA9IHRoaXMudG91Y2hlcyxcbiAgICAgIG4gPSB0aGlzLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIGwgPSBlO1xuICAgIGlmIChsLm9yaWdpbmFsRXZlbnQgJiYgKGwgPSBsLm9yaWdpbmFsRXZlbnQpLCBpLmlzVG91Y2hlZCkge1xuICAgICAgaWYgKCFpLmlzVG91Y2hFdmVudCB8fCBcInRvdWNobW92ZVwiID09PSBsLnR5cGUpIHtcbiAgICAgICAgdmFyIG8gPSBcInRvdWNobW92ZVwiID09PSBsLnR5cGUgJiYgbC50YXJnZXRUb3VjaGVzICYmIChsLnRhcmdldFRvdWNoZXNbMF0gfHwgbC5jaGFuZ2VkVG91Y2hlc1swXSksXG4gICAgICAgICAgZCA9IFwidG91Y2htb3ZlXCIgPT09IGwudHlwZSA/IG8ucGFnZVggOiBsLnBhZ2VYLFxuICAgICAgICAgIGggPSBcInRvdWNobW92ZVwiID09PSBsLnR5cGUgPyBvLnBhZ2VZIDogbC5wYWdlWTtcbiAgICAgICAgaWYgKGwucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHJldHVybiBhLnN0YXJ0WCA9IGQsIHZvaWQoYS5zdGFydFkgPSBoKTtcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93VG91Y2hNb3ZlKSByZXR1cm4gdGhpcy5hbGxvd0NsaWNrID0gITEsIHZvaWQoaS5pc1RvdWNoZWQgJiYgKFMoYSwge1xuICAgICAgICAgIHN0YXJ0WDogZCxcbiAgICAgICAgICBzdGFydFk6IGgsXG4gICAgICAgICAgY3VycmVudFg6IGQsXG4gICAgICAgICAgY3VycmVudFk6IGhcbiAgICAgICAgfSksIGkudG91Y2hTdGFydFRpbWUgPSB4KCkpKTtcbiAgICAgICAgaWYgKGkuaXNUb3VjaEV2ZW50ICYmIHMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcy5sb29wKVxuICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwoKSkge1xuICAgICAgICAgICAgaWYgKGggPCBhLnN0YXJ0WSAmJiB0aGlzLnRyYW5zbGF0ZSA8PSB0aGlzLm1heFRyYW5zbGF0ZSgpIHx8IGggPiBhLnN0YXJ0WSAmJiB0aGlzLnRyYW5zbGF0ZSA+PSB0aGlzLm1pblRyYW5zbGF0ZSgpKSByZXR1cm4gaS5pc1RvdWNoZWQgPSAhMSwgdm9pZChpLmlzTW92ZWQgPSAhMSlcbiAgICAgICAgICB9IGVsc2UgaWYgKGQgPCBhLnN0YXJ0WCAmJiB0aGlzLnRyYW5zbGF0ZSA8PSB0aGlzLm1heFRyYW5zbGF0ZSgpIHx8IGQgPiBhLnN0YXJ0WCAmJiB0aGlzLnRyYW5zbGF0ZSA+PSB0aGlzLm1pblRyYW5zbGF0ZSgpKSByZXR1cm47XG4gICAgICAgIGlmIChpLmlzVG91Y2hFdmVudCAmJiB0LmFjdGl2ZUVsZW1lbnQgJiYgbC50YXJnZXQgPT09IHQuYWN0aXZlRWxlbWVudCAmJiBtKGwudGFyZ2V0KS5pcyhpLmZvcm1FbGVtZW50cykpIHJldHVybiBpLmlzTW92ZWQgPSAhMCwgdm9pZCh0aGlzLmFsbG93Q2xpY2sgPSAhMSk7XG4gICAgICAgIGlmIChpLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgdGhpcy5lbWl0KFwidG91Y2hNb3ZlXCIsIGwpLCAhKGwudGFyZ2V0VG91Y2hlcyAmJiBsLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkpIHtcbiAgICAgICAgICBhLmN1cnJlbnRYID0gZCwgYS5jdXJyZW50WSA9IGg7XG4gICAgICAgICAgdmFyIHAgPSBhLmN1cnJlbnRYIC0gYS5zdGFydFgsXG4gICAgICAgICAgICB1ID0gYS5jdXJyZW50WSAtIGEuc3RhcnRZO1xuICAgICAgICAgIGlmICghKHRoaXMucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoTWF0aC5wb3cocCwgMikgKyBNYXRoLnBvdyh1LCAyKSkgPCB0aGlzLnBhcmFtcy50aHJlc2hvbGQpKSB7XG4gICAgICAgICAgICB2YXIgYztcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGkuaXNTY3JvbGxpbmcpIHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgYS5jdXJyZW50WSA9PT0gYS5zdGFydFkgfHwgdGhpcy5pc1ZlcnRpY2FsKCkgJiYgYS5jdXJyZW50WCA9PT0gYS5zdGFydFggPyBpLmlzU2Nyb2xsaW5nID0gITEgOiBwICogcCArIHUgKiB1ID49IDI1ICYmIChjID0gMTgwICogTWF0aC5hdGFuMihNYXRoLmFicyh1KSwgTWF0aC5hYnMocCkpIC8gTWF0aC5QSSwgaS5pc1Njcm9sbGluZyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBjID4gcy50b3VjaEFuZ2xlIDogOTAgLSBjID4gcy50b3VjaEFuZ2xlKTtcbiAgICAgICAgICAgIGlmIChpLmlzU2Nyb2xsaW5nICYmIHRoaXMuZW1pdChcInRvdWNoTW92ZU9wcG9zaXRlXCIsIGwpLCB2b2lkIDAgPT09IGkuc3RhcnRNb3ZpbmcgJiYgKGEuY3VycmVudFggPT09IGEuc3RhcnRYICYmIGEuY3VycmVudFkgPT09IGEuc3RhcnRZIHx8IChpLnN0YXJ0TW92aW5nID0gITApKSwgaS5pc1Njcm9sbGluZykgaS5pc1RvdWNoZWQgPSAhMTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGkuc3RhcnRNb3ZpbmcpIHtcbiAgICAgICAgICAgICAgdGhpcy5hbGxvd0NsaWNrID0gITEsICFzLmNzc01vZGUgJiYgbC5jYW5jZWxhYmxlICYmIGwucHJldmVudERlZmF1bHQoKSwgcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXMubmVzdGVkICYmIGwuc3RvcFByb3BhZ2F0aW9uKCksIGkuaXNNb3ZlZCB8fCAocy5sb29wICYmIHRoaXMubG9vcEZpeCgpLCBpLnN0YXJ0VHJhbnNsYXRlID0gdGhpcy5nZXRUcmFuc2xhdGUoKSwgdGhpcy5zZXRUcmFuc2l0aW9uKDApLCB0aGlzLmFuaW1hdGluZyAmJiB0aGlzLiR3cmFwcGVyRWwudHJpZ2dlcihcIndlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZFwiKSwgaS5hbGxvd01vbWVudHVtQm91bmNlID0gITEsICFzLmdyYWJDdXJzb3IgfHwgITAgIT09IHRoaXMuYWxsb3dTbGlkZU5leHQgJiYgITAgIT09IHRoaXMuYWxsb3dTbGlkZVByZXYgfHwgdGhpcy5zZXRHcmFiQ3Vyc29yKCEwKSwgdGhpcy5lbWl0KFwic2xpZGVyRmlyc3RNb3ZlXCIsIGwpKSwgdGhpcy5lbWl0KFwic2xpZGVyTW92ZVwiLCBsKSwgaS5pc01vdmVkID0gITA7XG4gICAgICAgICAgICAgIHZhciB2ID0gdGhpcy5pc0hvcml6b250YWwoKSA/IHAgOiB1O1xuICAgICAgICAgICAgICBhLmRpZmYgPSB2LCB2ICo9IHMudG91Y2hSYXRpbywgbiAmJiAodiA9IC12KSwgdGhpcy5zd2lwZURpcmVjdGlvbiA9IHYgPiAwID8gXCJwcmV2XCIgOiBcIm5leHRcIiwgaS5jdXJyZW50VHJhbnNsYXRlID0gdiArIGkuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgICAgICAgIHZhciBmID0gITAsXG4gICAgICAgICAgICAgICAgZyA9IHMucmVzaXN0YW5jZVJhdGlvO1xuICAgICAgICAgICAgICBpZiAocy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmIChnID0gMCksIHYgPiAwICYmIGkuY3VycmVudFRyYW5zbGF0ZSA+IHRoaXMubWluVHJhbnNsYXRlKCkgPyAoZiA9ICExLCBzLnJlc2lzdGFuY2UgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IHRoaXMubWluVHJhbnNsYXRlKCkgLSAxICsgTWF0aC5wb3coLXRoaXMubWluVHJhbnNsYXRlKCkgKyBpLnN0YXJ0VHJhbnNsYXRlICsgdiwgZykpKSA6IHYgPCAwICYmIGkuY3VycmVudFRyYW5zbGF0ZSA8IHRoaXMubWF4VHJhbnNsYXRlKCkgJiYgKGYgPSAhMSwgcy5yZXNpc3RhbmNlICYmIChpLmN1cnJlbnRUcmFuc2xhdGUgPSB0aGlzLm1heFRyYW5zbGF0ZSgpICsgMSAtIE1hdGgucG93KHRoaXMubWF4VHJhbnNsYXRlKCkgLSBpLnN0YXJ0VHJhbnNsYXRlIC0gdiwgZykpKSwgZiAmJiAobC5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9ICEwKSwgIXRoaXMuYWxsb3dTbGlkZU5leHQgJiYgXCJuZXh0XCIgPT09IHRoaXMuc3dpcGVEaXJlY3Rpb24gJiYgaS5jdXJyZW50VHJhbnNsYXRlIDwgaS5zdGFydFRyYW5zbGF0ZSAmJiAoaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSksICF0aGlzLmFsbG93U2xpZGVQcmV2ICYmIFwicHJldlwiID09PSB0aGlzLnN3aXBlRGlyZWN0aW9uICYmIGkuY3VycmVudFRyYW5zbGF0ZSA+IGkuc3RhcnRUcmFuc2xhdGUgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpLCBzLnRocmVzaG9sZCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShNYXRoLmFicyh2KSA+IHMudGhyZXNob2xkIHx8IGkuYWxsb3dUaHJlc2hvbGRNb3ZlKSkgcmV0dXJuIHZvaWQoaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpLmFsbG93VGhyZXNob2xkTW92ZSkgcmV0dXJuIGkuYWxsb3dUaHJlc2hvbGRNb3ZlID0gITAsIGEuc3RhcnRYID0gYS5jdXJyZW50WCwgYS5zdGFydFkgPSBhLmN1cnJlbnRZLCBpLmN1cnJlbnRUcmFuc2xhdGUgPSBpLnN0YXJ0VHJhbnNsYXRlLCB2b2lkKGEuZGlmZiA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBhLmN1cnJlbnRYIC0gYS5zdGFydFggOiBhLmN1cnJlbnRZIC0gYS5zdGFydFkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcy5mb2xsb3dGaW5nZXIgJiYgIXMuY3NzTW9kZSAmJiAoKHMuZnJlZU1vZGUgfHwgcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSAmJiAodGhpcy51cGRhdGVBY3RpdmVJbmRleCgpLCB0aGlzLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSksIHMuZnJlZU1vZGUgJiYgKDAgPT09IGkudmVsb2NpdGllcy5sZW5ndGggJiYgaS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhW3RoaXMuaXNIb3Jpem9udGFsKCkgPyBcInN0YXJ0WFwiIDogXCJzdGFydFlcIl0sXG4gICAgICAgICAgICAgICAgdGltZTogaS50b3VjaFN0YXJ0VGltZVxuICAgICAgICAgICAgICB9KSwgaS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhW3RoaXMuaXNIb3Jpem9udGFsKCkgPyBcImN1cnJlbnRYXCIgOiBcImN1cnJlbnRZXCJdLFxuICAgICAgICAgICAgICAgIHRpbWU6IHgoKVxuICAgICAgICAgICAgICB9KSksIHRoaXMudXBkYXRlUHJvZ3Jlc3MoaS5jdXJyZW50VHJhbnNsYXRlKSwgdGhpcy5zZXRUcmFuc2xhdGUoaS5jdXJyZW50VHJhbnNsYXRlKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaS5zdGFydE1vdmluZyAmJiBpLmlzU2Nyb2xsaW5nICYmIHRoaXMuZW1pdChcInRvdWNoTW92ZU9wcG9zaXRlXCIsIGwpXG4gIH1cblxuICBmdW5jdGlvbiBEKGUpIHtcbiAgICB2YXIgdCA9IHRoaXMsXG4gICAgICBpID0gdC50b3VjaEV2ZW50c0RhdGEsXG4gICAgICBzID0gdC5wYXJhbXMsXG4gICAgICBhID0gdC50b3VjaGVzLFxuICAgICAgciA9IHQucnRsVHJhbnNsYXRlLFxuICAgICAgbiA9IHQuJHdyYXBwZXJFbCxcbiAgICAgIGwgPSB0LnNsaWRlc0dyaWQsXG4gICAgICBvID0gdC5zbmFwR3JpZCxcbiAgICAgIGQgPSBlO1xuICAgIGlmIChkLm9yaWdpbmFsRXZlbnQgJiYgKGQgPSBkLm9yaWdpbmFsRXZlbnQpLCBpLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgdC5lbWl0KFwidG91Y2hFbmRcIiwgZCksIGkuYWxsb3dUb3VjaENhbGxiYWNrcyA9ICExLCAhaS5pc1RvdWNoZWQpIHJldHVybiBpLmlzTW92ZWQgJiYgcy5ncmFiQ3Vyc29yICYmIHQuc2V0R3JhYkN1cnNvcighMSksIGkuaXNNb3ZlZCA9ICExLCB2b2lkKGkuc3RhcnRNb3ZpbmcgPSAhMSk7XG4gICAgcy5ncmFiQ3Vyc29yICYmIGkuaXNNb3ZlZCAmJiBpLmlzVG91Y2hlZCAmJiAoITAgPT09IHQuYWxsb3dTbGlkZU5leHQgfHwgITAgPT09IHQuYWxsb3dTbGlkZVByZXYpICYmIHQuc2V0R3JhYkN1cnNvcighMSk7XG4gICAgdmFyIGgsIHAgPSB4KCksXG4gICAgICB1ID0gcCAtIGkudG91Y2hTdGFydFRpbWU7XG4gICAgaWYgKHQuYWxsb3dDbGljayAmJiAodC51cGRhdGVDbGlja2VkU2xpZGUoZCksIHQuZW1pdChcInRhcCBjbGlja1wiLCBkKSwgdSA8IDMwMCAmJiBwIC0gaS5sYXN0Q2xpY2tUaW1lIDwgMzAwICYmIHQuZW1pdChcImRvdWJsZVRhcCBkb3VibGVDbGlja1wiLCBkKSksIGkubGFzdENsaWNrVGltZSA9IHgoKSwgRSgoZnVuY3Rpb24gKCkge1xuICAgICAgICB0LmRlc3Ryb3llZCB8fCAodC5hbGxvd0NsaWNrID0gITApXG4gICAgICB9KSksICFpLmlzVG91Y2hlZCB8fCAhaS5pc01vdmVkIHx8ICF0LnN3aXBlRGlyZWN0aW9uIHx8IDAgPT09IGEuZGlmZiB8fCBpLmN1cnJlbnRUcmFuc2xhdGUgPT09IGkuc3RhcnRUcmFuc2xhdGUpIHJldHVybiBpLmlzVG91Y2hlZCA9ICExLCBpLmlzTW92ZWQgPSAhMSwgdm9pZChpLnN0YXJ0TW92aW5nID0gITEpO1xuICAgIGlmIChpLmlzVG91Y2hlZCA9ICExLCBpLmlzTW92ZWQgPSAhMSwgaS5zdGFydE1vdmluZyA9ICExLCBoID0gcy5mb2xsb3dGaW5nZXIgPyByID8gdC50cmFuc2xhdGUgOiAtdC50cmFuc2xhdGUgOiAtaS5jdXJyZW50VHJhbnNsYXRlLCAhcy5jc3NNb2RlKVxuICAgICAgaWYgKHMuZnJlZU1vZGUpIHtcbiAgICAgICAgaWYgKGggPCAtdC5taW5UcmFuc2xhdGUoKSkgcmV0dXJuIHZvaWQgdC5zbGlkZVRvKHQuYWN0aXZlSW5kZXgpO1xuICAgICAgICBpZiAoaCA+IC10Lm1heFRyYW5zbGF0ZSgpKSByZXR1cm4gdm9pZCh0LnNsaWRlcy5sZW5ndGggPCBvLmxlbmd0aCA/IHQuc2xpZGVUbyhvLmxlbmd0aCAtIDEpIDogdC5zbGlkZVRvKHQuc2xpZGVzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgaWYgKHMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgICAgIGlmIChpLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGMgPSBpLnZlbG9jaXRpZXMucG9wKCksXG4gICAgICAgICAgICAgIHYgPSBpLnZlbG9jaXRpZXMucG9wKCksXG4gICAgICAgICAgICAgIGYgPSBjLnBvc2l0aW9uIC0gdi5wb3NpdGlvbixcbiAgICAgICAgICAgICAgbSA9IGMudGltZSAtIHYudGltZTtcbiAgICAgICAgICAgIHQudmVsb2NpdHkgPSBmIC8gbSwgdC52ZWxvY2l0eSAvPSAyLCBNYXRoLmFicyh0LnZlbG9jaXR5KSA8IHMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkgJiYgKHQudmVsb2NpdHkgPSAwKSwgKG0gPiAxNTAgfHwgeCgpIC0gYy50aW1lID4gMzAwKSAmJiAodC52ZWxvY2l0eSA9IDApXG4gICAgICAgICAgfSBlbHNlIHQudmVsb2NpdHkgPSAwO1xuICAgICAgICAgIHQudmVsb2NpdHkgKj0gcy5mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbywgaS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdmFyIGcgPSAxZTMgKiBzLmZyZWVNb2RlTW9tZW50dW1SYXRpbyxcbiAgICAgICAgICAgIHcgPSB0LnZlbG9jaXR5ICogZyxcbiAgICAgICAgICAgIGIgPSB0LnRyYW5zbGF0ZSArIHc7XG4gICAgICAgICAgciAmJiAoYiA9IC1iKTtcbiAgICAgICAgICB2YXIgeSwgVCwgQyA9ICExLFxuICAgICAgICAgICAgUyA9IDIwICogTWF0aC5hYnModC52ZWxvY2l0eSkgKiBzLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgICAgICBpZiAoYiA8IHQubWF4VHJhbnNsYXRlKCkpIHMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSA/IChiICsgdC5tYXhUcmFuc2xhdGUoKSA8IC1TICYmIChiID0gdC5tYXhUcmFuc2xhdGUoKSAtIFMpLCB5ID0gdC5tYXhUcmFuc2xhdGUoKSwgQyA9ICEwLCBpLmFsbG93TW9tZW50dW1Cb3VuY2UgPSAhMCkgOiBiID0gdC5tYXhUcmFuc2xhdGUoKSwgcy5sb29wICYmIHMuY2VudGVyZWRTbGlkZXMgJiYgKFQgPSAhMCk7XG4gICAgICAgICAgZWxzZSBpZiAoYiA+IHQubWluVHJhbnNsYXRlKCkpIHMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSA/IChiIC0gdC5taW5UcmFuc2xhdGUoKSA+IFMgJiYgKGIgPSB0Lm1pblRyYW5zbGF0ZSgpICsgUyksIHkgPSB0Lm1pblRyYW5zbGF0ZSgpLCBDID0gITAsIGkuYWxsb3dNb21lbnR1bUJvdW5jZSA9ICEwKSA6IGIgPSB0Lm1pblRyYW5zbGF0ZSgpLCBzLmxvb3AgJiYgcy5jZW50ZXJlZFNsaWRlcyAmJiAoVCA9ICEwKTtcbiAgICAgICAgICBlbHNlIGlmIChzLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBNLCB6ID0gMDsgeiA8IG8ubGVuZ3RoOyB6ICs9IDEpXG4gICAgICAgICAgICAgIGlmIChvW3pdID4gLWIpIHtcbiAgICAgICAgICAgICAgICBNID0gejtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9IGIgPSAtKGIgPSBNYXRoLmFicyhvW01dIC0gYikgPCBNYXRoLmFicyhvW00gLSAxXSAtIGIpIHx8IFwibmV4dFwiID09PSB0LnN3aXBlRGlyZWN0aW9uID8gb1tNXSA6IG9bTSAtIDFdKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoVCAmJiB0Lm9uY2UoXCJ0cmFuc2l0aW9uRW5kXCIsIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHQubG9vcEZpeCgpXG4gICAgICAgICAgICB9KSksIDAgIT09IHQudmVsb2NpdHkpIHtcbiAgICAgICAgICAgIGlmIChnID0gciA/IE1hdGguYWJzKCgtYiAtIHQudHJhbnNsYXRlKSAvIHQudmVsb2NpdHkpIDogTWF0aC5hYnMoKGIgLSB0LnRyYW5zbGF0ZSkgLyB0LnZlbG9jaXR5KSwgcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgICB2YXIgUCA9IE1hdGguYWJzKChyID8gLWIgOiBiKSAtIHQudHJhbnNsYXRlKSxcbiAgICAgICAgICAgICAgICBrID0gdC5zbGlkZXNTaXplc0dyaWRbdC5hY3RpdmVJbmRleF07XG4gICAgICAgICAgICAgIGcgPSBQIDwgayA/IHMuc3BlZWQgOiBQIDwgMiAqIGsgPyAxLjUgKiBzLnNwZWVkIDogMi41ICogcy5zcGVlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocy5mcmVlTW9kZVN0aWNreSkgcmV0dXJuIHZvaWQgdC5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICAgIHMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBDID8gKHQudXBkYXRlUHJvZ3Jlc3MoeSksIHQuc2V0VHJhbnNpdGlvbihnKSwgdC5zZXRUcmFuc2xhdGUoYiksIHQudHJhbnNpdGlvblN0YXJ0KCEwLCB0LnN3aXBlRGlyZWN0aW9uKSwgdC5hbmltYXRpbmcgPSAhMCwgbi50cmFuc2l0aW9uRW5kKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0ICYmICF0LmRlc3Ryb3llZCAmJiBpLmFsbG93TW9tZW50dW1Cb3VuY2UgJiYgKHQuZW1pdChcIm1vbWVudHVtQm91bmNlXCIpLCB0LnNldFRyYW5zaXRpb24ocy5zcGVlZCksIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdC5zZXRUcmFuc2xhdGUoeSksIG4udHJhbnNpdGlvbkVuZCgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQudHJhbnNpdGlvbkVuZCgpXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSksIDApKVxuICAgICAgICAgIH0pKSkgOiB0LnZlbG9jaXR5ID8gKHQudXBkYXRlUHJvZ3Jlc3MoYiksIHQuc2V0VHJhbnNpdGlvbihnKSwgdC5zZXRUcmFuc2xhdGUoYiksIHQudHJhbnNpdGlvblN0YXJ0KCEwLCB0LnN3aXBlRGlyZWN0aW9uKSwgdC5hbmltYXRpbmcgfHwgKHQuYW5pbWF0aW5nID0gITAsIG4udHJhbnNpdGlvbkVuZCgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdCAmJiAhdC5kZXN0cm95ZWQgJiYgdC50cmFuc2l0aW9uRW5kKClcbiAgICAgICAgICB9KSkpKSA6IHQudXBkYXRlUHJvZ3Jlc3MoYiksIHQudXBkYXRlQWN0aXZlSW5kZXgoKSwgdC51cGRhdGVTbGlkZXNDbGFzc2VzKClcbiAgICAgICAgfSBlbHNlIGlmIChzLmZyZWVNb2RlU3RpY2t5KSByZXR1cm4gdm9pZCB0LnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgICghcy5mcmVlTW9kZU1vbWVudHVtIHx8IHUgPj0gcy5sb25nU3dpcGVzTXMpICYmICh0LnVwZGF0ZVByb2dyZXNzKCksIHQudXBkYXRlQWN0aXZlSW5kZXgoKSwgdC51cGRhdGVTbGlkZXNDbGFzc2VzKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciAkID0gMCwgTCA9IHQuc2xpZGVzU2l6ZXNHcmlkWzBdLCBJID0gMDsgSSA8IGwubGVuZ3RoOyBJICs9IEkgPCBzLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBzLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICAgICAgdmFyIE8gPSBJIDwgcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgICAgdm9pZCAwICE9PSBsW0kgKyBPXSA/IGggPj0gbFtJXSAmJiBoIDwgbFtJICsgT10gJiYgKCQgPSBJLCBMID0gbFtJICsgT10gLSBsW0ldKSA6IGggPj0gbFtJXSAmJiAoJCA9IEksIEwgPSBsW2wubGVuZ3RoIC0gMV0gLSBsW2wubGVuZ3RoIC0gMl0pXG4gICAgICAgIH1cbiAgICAgICAgdmFyIEEgPSAoaCAtIGxbJF0pIC8gTCxcbiAgICAgICAgICBEID0gJCA8IHMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBzLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICBpZiAodSA+IHMubG9uZ1N3aXBlc01zKSB7XG4gICAgICAgICAgaWYgKCFzLmxvbmdTd2lwZXMpIHJldHVybiB2b2lkIHQuc2xpZGVUbyh0LmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICBcIm5leHRcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiAoQSA+PSBzLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbygkICsgRCkgOiB0LnNsaWRlVG8oJCkpLCBcInByZXZcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiAoQSA+IDEgLSBzLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbygkICsgRCkgOiB0LnNsaWRlVG8oJCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFzLnNob3J0U3dpcGVzKSByZXR1cm4gdm9pZCB0LnNsaWRlVG8odC5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgdC5uYXZpZ2F0aW9uICYmIChkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLm5leHRFbCB8fCBkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLnByZXZFbCkgPyBkLnRhcmdldCA9PT0gdC5uYXZpZ2F0aW9uLm5leHRFbCA/IHQuc2xpZGVUbygkICsgRCkgOiB0LnNsaWRlVG8oJCkgOiAoXCJuZXh0XCIgPT09IHQuc3dpcGVEaXJlY3Rpb24gJiYgdC5zbGlkZVRvKCQgKyBEKSwgXCJwcmV2XCIgPT09IHQuc3dpcGVEaXJlY3Rpb24gJiYgdC5zbGlkZVRvKCQpKVxuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBHKCkge1xuICAgIHZhciBlID0gdGhpcy5wYXJhbXMsXG4gICAgICB0ID0gdGhpcy5lbDtcbiAgICBpZiAoIXQgfHwgMCAhPT0gdC5vZmZzZXRXaWR0aCkge1xuICAgICAgZS5icmVha3BvaW50cyAmJiB0aGlzLnNldEJyZWFrcG9pbnQoKTtcbiAgICAgIHZhciBpID0gdGhpcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgICAgcyA9IHRoaXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAgIGEgPSB0aGlzLnNuYXBHcmlkO1xuICAgICAgdGhpcy5hbGxvd1NsaWRlTmV4dCA9ICEwLCB0aGlzLmFsbG93U2xpZGVQcmV2ID0gITAsIHRoaXMudXBkYXRlU2l6ZSgpLCB0aGlzLnVwZGF0ZVNsaWRlcygpLCB0aGlzLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgKFwiYXV0b1wiID09PSBlLnNsaWRlc1BlclZpZXcgfHwgZS5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgdGhpcy5pc0VuZCAmJiAhdGhpcy5pc0JlZ2lubmluZyAmJiAhdGhpcy5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyB0aGlzLnNsaWRlVG8odGhpcy5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgITEsICEwKSA6IHRoaXMuc2xpZGVUbyh0aGlzLmFjdGl2ZUluZGV4LCAwLCAhMSwgITApLCB0aGlzLmF1dG9wbGF5ICYmIHRoaXMuYXV0b3BsYXkucnVubmluZyAmJiB0aGlzLmF1dG9wbGF5LnBhdXNlZCAmJiB0aGlzLmF1dG9wbGF5LnJ1bigpLCB0aGlzLmFsbG93U2xpZGVQcmV2ID0gcywgdGhpcy5hbGxvd1NsaWRlTmV4dCA9IGksIHRoaXMucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgYSAhPT0gdGhpcy5zbmFwR3JpZCAmJiB0aGlzLmNoZWNrT3ZlcmZsb3coKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE4oZSkge1xuICAgIHRoaXMuYWxsb3dDbGljayB8fCAodGhpcy5wYXJhbXMucHJldmVudENsaWNrcyAmJiBlLnByZXZlbnREZWZhdWx0KCksIHRoaXMucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiB0aGlzLmFuaW1hdGluZyAmJiAoZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSkpXG4gIH1cblxuICBmdW5jdGlvbiBCKCkge1xuICAgIHZhciBlID0gdGhpcy53cmFwcGVyRWwsXG4gICAgICB0ID0gdGhpcy5ydGxUcmFuc2xhdGU7XG4gICAgdGhpcy5wcmV2aW91c1RyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlLCB0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy50cmFuc2xhdGUgPSB0ID8gZS5zY3JvbGxXaWR0aCAtIGUub2Zmc2V0V2lkdGggLSBlLnNjcm9sbExlZnQgOiAtZS5zY3JvbGxMZWZ0IDogdGhpcy50cmFuc2xhdGUgPSAtZS5zY3JvbGxUb3AsIC0wID09PSB0aGlzLnRyYW5zbGF0ZSAmJiAodGhpcy50cmFuc2xhdGUgPSAwKSwgdGhpcy51cGRhdGVBY3RpdmVJbmRleCgpLCB0aGlzLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB2YXIgaSA9IHRoaXMubWF4VHJhbnNsYXRlKCkgLSB0aGlzLm1pblRyYW5zbGF0ZSgpO1xuICAgICgwID09PSBpID8gMCA6ICh0aGlzLnRyYW5zbGF0ZSAtIHRoaXMubWluVHJhbnNsYXRlKCkpIC8gaSkgIT09IHRoaXMucHJvZ3Jlc3MgJiYgdGhpcy51cGRhdGVQcm9ncmVzcyh0ID8gLXRoaXMudHJhbnNsYXRlIDogdGhpcy50cmFuc2xhdGUpLCB0aGlzLmVtaXQoXCJzZXRUcmFuc2xhdGVcIiwgdGhpcy50cmFuc2xhdGUsICExKVxuICB9XG4gIHZhciBIID0gITE7XG5cbiAgZnVuY3Rpb24gWCgpIHt9XG4gIHZhciBZID0ge1xuICAgICAgaW5pdDogITAsXG4gICAgICBkaXJlY3Rpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgdG91Y2hFdmVudHNUYXJnZXQ6IFwiY29udGFpbmVyXCIsXG4gICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICBzcGVlZDogMzAwLFxuICAgICAgY3NzTW9kZTogITEsXG4gICAgICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogITAsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogITEsXG4gICAgICB1c2VyQWdlbnQ6IG51bGwsXG4gICAgICB1cmw6IG51bGwsXG4gICAgICBlZGdlU3dpcGVEZXRlY3Rpb246ICExLFxuICAgICAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgICAgIGZyZWVNb2RlOiAhMSxcbiAgICAgIGZyZWVNb2RlTW9tZW50dW06ICEwLFxuICAgICAgZnJlZU1vZGVNb21lbnR1bVJhdGlvOiAxLFxuICAgICAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogITAsXG4gICAgICBmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gICAgICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgICAgIGZyZWVNb2RlU3RpY2t5OiAhMSxcbiAgICAgIGZyZWVNb2RlTWluaW11bVZlbG9jaXR5OiAuMDIsXG4gICAgICBhdXRvSGVpZ2h0OiAhMSxcbiAgICAgIHNldFdyYXBwZXJTaXplOiAhMSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICExLFxuICAgICAgZWZmZWN0OiBcInNsaWRlXCIsXG4gICAgICBicmVha3BvaW50czogdm9pZCAwLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgIHNsaWRlc1BlckNvbHVtbkZpbGw6IFwiY29sdW1uXCIsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiAhMSxcbiAgICAgIGNlbnRlcmVkU2xpZGVzQm91bmRzOiAhMSxcbiAgICAgIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAgICAgbm9ybWFsaXplU2xpZGVJbmRleDogITAsXG4gICAgICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6ICExLFxuICAgICAgd2F0Y2hPdmVyZmxvdzogITEsXG4gICAgICByb3VuZExlbmd0aHM6ICExLFxuICAgICAgdG91Y2hSYXRpbzogMSxcbiAgICAgIHRvdWNoQW5nbGU6IDQ1LFxuICAgICAgc2ltdWxhdGVUb3VjaDogITAsXG4gICAgICBzaG9ydFN3aXBlczogITAsXG4gICAgICBsb25nU3dpcGVzOiAhMCxcbiAgICAgIGxvbmdTd2lwZXNSYXRpbzogLjUsXG4gICAgICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgICAgIGZvbGxvd0ZpbmdlcjogITAsXG4gICAgICBhbGxvd1RvdWNoTW92ZTogITAsXG4gICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246ICExLFxuICAgICAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiAhMCxcbiAgICAgIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiAhMSxcbiAgICAgIHRvdWNoUmVsZWFzZU9uRWRnZXM6ICExLFxuICAgICAgdW5pcXVlTmF2RWxlbWVudHM6ICEwLFxuICAgICAgcmVzaXN0YW5jZTogITAsXG4gICAgICByZXNpc3RhbmNlUmF0aW86IC44NSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICExLFxuICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiAhMSxcbiAgICAgIGdyYWJDdXJzb3I6ICExLFxuICAgICAgcHJldmVudENsaWNrczogITAsXG4gICAgICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246ICEwLFxuICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogITEsXG4gICAgICBwcmVsb2FkSW1hZ2VzOiAhMCxcbiAgICAgIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6ICEwLFxuICAgICAgbG9vcDogITEsXG4gICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgICAgIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgICAgIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6ICExLFxuICAgICAgbG9vcFByZXZlbnRzU2xpZGU6ICEwLFxuICAgICAgYWxsb3dTbGlkZVByZXY6ICEwLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6ICEwLFxuICAgICAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAgICAgbm9Td2lwaW5nOiAhMCxcbiAgICAgIG5vU3dpcGluZ0NsYXNzOiBcInN3aXBlci1uby1zd2lwaW5nXCIsXG4gICAgICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgICAgIHBhc3NpdmVMaXN0ZW5lcnM6ICEwLFxuICAgICAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogXCJzd2lwZXItY29udGFpbmVyLVwiLFxuICAgICAgc2xpZGVDbGFzczogXCJzd2lwZXItc2xpZGVcIixcbiAgICAgIHNsaWRlQmxhbmtDbGFzczogXCJzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rXCIsXG4gICAgICBzbGlkZUFjdGl2ZUNsYXNzOiBcInN3aXBlci1zbGlkZS1hY3RpdmVcIixcbiAgICAgIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6IFwic3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmVcIixcbiAgICAgIHNsaWRlVmlzaWJsZUNsYXNzOiBcInN3aXBlci1zbGlkZS12aXNpYmxlXCIsXG4gICAgICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiBcInN3aXBlci1zbGlkZS1kdXBsaWNhdGVcIixcbiAgICAgIHNsaWRlTmV4dENsYXNzOiBcInN3aXBlci1zbGlkZS1uZXh0XCIsXG4gICAgICBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogXCJzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHRcIixcbiAgICAgIHNsaWRlUHJldkNsYXNzOiBcInN3aXBlci1zbGlkZS1wcmV2XCIsXG4gICAgICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogXCJzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXZcIixcbiAgICAgIHdyYXBwZXJDbGFzczogXCJzd2lwZXItd3JhcHBlclwiLFxuICAgICAgcnVuQ2FsbGJhY2tzT25Jbml0OiAhMCxcbiAgICAgIF9lbWl0Q2xhc3NlczogITFcbiAgICB9LFxuICAgIFYgPSB7XG4gICAgICBtb2R1bGFyOiB7XG4gICAgICAgIHVzZVBhcmFtczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgdC5tb2R1bGVzICYmIE9iamVjdC5rZXlzKHQubW9kdWxlcykuZm9yRWFjaCgoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gdC5tb2R1bGVzW2ldO1xuICAgICAgICAgICAgcy5wYXJhbXMgJiYgUyhlLCBzLnBhcmFtcylcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSxcbiAgICAgICAgdXNlTW9kdWxlczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSk7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgIHQubW9kdWxlcyAmJiBPYmplY3Qua2V5cyh0Lm1vZHVsZXMpLmZvckVhY2goKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHQubW9kdWxlc1tpXSxcbiAgICAgICAgICAgICAgYSA9IGVbaV0gfHwge307XG4gICAgICAgICAgICBzLm9uICYmIHQub24gJiYgT2JqZWN0LmtleXMocy5vbikuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgdC5vbihlLCBzLm9uW2VdKVxuICAgICAgICAgICAgfSkpLCBzLmNyZWF0ZSAmJiBzLmNyZWF0ZS5iaW5kKHQpKGEpXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBldmVudHNFbWl0dGVyOiB7XG4gICAgICAgIG9uOiBmdW5jdGlvbiAoZSwgdCwgaSkge1xuICAgICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSByZXR1cm4gcztcbiAgICAgICAgICB2YXIgYSA9IGkgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiO1xuICAgICAgICAgIHJldHVybiBlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcy5ldmVudHNMaXN0ZW5lcnNbZV0gfHwgKHMuZXZlbnRzTGlzdGVuZXJzW2VdID0gW10pLCBzLmV2ZW50c0xpc3RlbmVyc1tlXVthXSh0KVxuICAgICAgICAgIH0pKSwgc1xuICAgICAgICB9LFxuICAgICAgICBvbmNlOiBmdW5jdGlvbiAoZSwgdCwgaSkge1xuICAgICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSByZXR1cm4gcztcblxuICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICAgICAgICBzLm9mZihlLCBhKSwgYS5fX2VtaXR0ZXJQcm94eSAmJiBkZWxldGUgYS5fX2VtaXR0ZXJQcm94eTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gbmV3IEFycmF5KGkpLCBuID0gMDsgbiA8IGk7IG4rKykgcltuXSA9IGFyZ3VtZW50c1tuXTtcbiAgICAgICAgICAgIHQuYXBwbHkocywgcilcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGEuX19lbWl0dGVyUHJveHkgPSB0LCBzLm9uKGUsIGEsIGkpXG4gICAgICAgIH0sXG4gICAgICAgIG9uQW55OiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB0aGlzO1xuICAgICAgICAgIHZhciBpID0gdCA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCI7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoZSkgPCAwICYmIHRoaXMuZXZlbnRzQW55TGlzdGVuZXJzW2ldKGUpLCB0aGlzXG4gICAgICAgIH0sXG4gICAgICAgIG9mZkFueTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gdGhpcztcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoZSk7XG4gICAgICAgICAgcmV0dXJuIHQgPj0gMCAmJiB0aGlzLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UodCwgMSksIHRoaXNcbiAgICAgICAgfSxcbiAgICAgICAgb2ZmOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHZhciBpID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gaS5ldmVudHNMaXN0ZW5lcnMgPyAoZS5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gdCA/IGkuZXZlbnRzTGlzdGVuZXJzW2VdID0gW10gOiBpLmV2ZW50c0xpc3RlbmVyc1tlXSAmJiBpLmV2ZW50c0xpc3RlbmVyc1tlXS5mb3JFYWNoKChmdW5jdGlvbiAocywgYSkge1xuICAgICAgICAgICAgICAocyA9PT0gdCB8fCBzLl9fZW1pdHRlclByb3h5ICYmIHMuX19lbWl0dGVyUHJveHkgPT09IHQpICYmIGkuZXZlbnRzTGlzdGVuZXJzW2VdLnNwbGljZShhLCAxKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSkpLCBpKSA6IGlcbiAgICAgICAgfSxcbiAgICAgICAgZW1pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlLCB0LCBpLCBzID0gdGhpcztcbiAgICAgICAgICBpZiAoIXMuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gcztcbiAgICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IG5ldyBBcnJheShhKSwgbiA9IDA7IG4gPCBhOyBuKyspIHJbbl0gPSBhcmd1bWVudHNbbl07XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgclswXSB8fCBBcnJheS5pc0FycmF5KHJbMF0pID8gKGUgPSByWzBdLCB0ID0gci5zbGljZSgxLCByLmxlbmd0aCksIGkgPSBzKSA6IChlID0gclswXS5ldmVudHMsIHQgPSByWzBdLmRhdGEsIGkgPSByWzBdLmNvbnRleHQgfHwgcyksIHQudW5zaGlmdChpKTtcbiAgICAgICAgICB2YXIgbCA9IEFycmF5LmlzQXJyYXkoZSkgPyBlIDogZS5zcGxpdChcIiBcIik7XG4gICAgICAgICAgcmV0dXJuIGwuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChzLmV2ZW50c0xpc3RlbmVycyAmJiBzLmV2ZW50c0xpc3RlbmVyc1tlXSkge1xuICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICAgICAgICBzLmV2ZW50c0xpc3RlbmVyc1tlXS5mb3JFYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGEucHVzaChlKVxuICAgICAgICAgICAgICB9KSksIGEuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBlLmFwcGx5KGksIHQpXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSwgc1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiB7XG4gICAgICAgIHVwZGF0ZVNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSwgdCwgaSA9IHRoaXMuJGVsO1xuICAgICAgICAgIGUgPSB2b2lkIDAgIT09IHRoaXMucGFyYW1zLndpZHRoICYmIG51bGwgIT09IHRoaXMucGFyYW1zLndpZHRoID8gdGhpcy5wYXJhbXMud2lkdGggOiBpWzBdLmNsaWVudFdpZHRoLCB0ID0gdm9pZCAwICE9PSB0aGlzLnBhcmFtcy5oZWlnaHQgJiYgbnVsbCAhPT0gdGhpcy5wYXJhbXMud2lkdGggPyB0aGlzLnBhcmFtcy5oZWlnaHQgOiBpWzBdLmNsaWVudEhlaWdodCwgMCA9PT0gZSAmJiB0aGlzLmlzSG9yaXpvbnRhbCgpIHx8IDAgPT09IHQgJiYgdGhpcy5pc1ZlcnRpY2FsKCkgfHwgKGUgPSBlIC0gcGFyc2VJbnQoaS5jc3MoXCJwYWRkaW5nLWxlZnRcIikgfHwgMCwgMTApIC0gcGFyc2VJbnQoaS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpIHx8IDAsIDEwKSwgdCA9IHQgLSBwYXJzZUludChpLmNzcyhcInBhZGRpbmctdG9wXCIpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGkuY3NzKFwicGFkZGluZy1ib3R0b21cIikgfHwgMCwgMTApLCBOdW1iZXIuaXNOYU4oZSkgJiYgKGUgPSAwKSwgTnVtYmVyLmlzTmFOKHQpICYmICh0ID0gMCksIFModGhpcywge1xuICAgICAgICAgICAgd2lkdGg6IGUsXG4gICAgICAgICAgICBoZWlnaHQ6IHQsXG4gICAgICAgICAgICBzaXplOiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gZSA6IHRcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlU2xpZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSBsKCksXG4gICAgICAgICAgICB0ID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBpID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgICAgcyA9IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIGEgPSB0aGlzLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHIgPSB0aGlzLndyb25nUlRMLFxuICAgICAgICAgICAgbiA9IHRoaXMudmlydHVhbCAmJiB0LnZpcnR1YWwuZW5hYmxlZCxcbiAgICAgICAgICAgIG8gPSBuID8gdGhpcy52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiB0aGlzLnNsaWRlcy5sZW5ndGgsXG4gICAgICAgICAgICBkID0gaS5jaGlsZHJlbihcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3MpLFxuICAgICAgICAgICAgaCA9IG4gPyB0aGlzLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IGQubGVuZ3RoLFxuICAgICAgICAgICAgcCA9IFtdLFxuICAgICAgICAgICAgdSA9IFtdLFxuICAgICAgICAgICAgYyA9IFtdO1xuXG4gICAgICAgICAgZnVuY3Rpb24gdihlLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gIXQuY3NzTW9kZSB8fCBpICE9PSBkLmxlbmd0aCAtIDFcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGYgPSB0LnNsaWRlc09mZnNldEJlZm9yZTtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGYgJiYgKGYgPSB0LnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHRoaXMpKTtcbiAgICAgICAgICB2YXIgbSA9IHQuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBtICYmIChtID0gdC5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHRoaXMpKTtcbiAgICAgICAgICB2YXIgZyA9IHRoaXMuc25hcEdyaWQubGVuZ3RoLFxuICAgICAgICAgICAgdyA9IHRoaXMuc25hcEdyaWQubGVuZ3RoLFxuICAgICAgICAgICAgYiA9IHQuc3BhY2VCZXR3ZWVuLFxuICAgICAgICAgICAgeSA9IC1mLFxuICAgICAgICAgICAgRSA9IDAsXG4gICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBzKSB7XG4gICAgICAgICAgICB2YXIgVCwgQztcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGIgJiYgYi5pbmRleE9mKFwiJVwiKSA+PSAwICYmIChiID0gcGFyc2VGbG9hdChiLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMCAqIHMpLCB0aGlzLnZpcnR1YWxTaXplID0gLWIsIGEgPyBkLmNzcyh7XG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IFwiXCIsXG4gICAgICAgICAgICAgIG1hcmdpblRvcDogXCJcIlxuICAgICAgICAgICAgfSkgOiBkLmNzcyh7XG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBcIlwiLFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IFwiXCJcbiAgICAgICAgICAgIH0pLCB0LnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgKFQgPSBNYXRoLmZsb29yKGggLyB0LnNsaWRlc1BlckNvbHVtbikgPT09IGggLyB0aGlzLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPyBoIDogTWF0aC5jZWlsKGggLyB0LnNsaWRlc1BlckNvbHVtbikgKiB0LnNsaWRlc1BlckNvbHVtbiwgXCJhdXRvXCIgIT09IHQuc2xpZGVzUGVyVmlldyAmJiBcInJvd1wiID09PSB0LnNsaWRlc1BlckNvbHVtbkZpbGwgJiYgKFQgPSBNYXRoLm1heChULCB0LnNsaWRlc1BlclZpZXcgKiB0LnNsaWRlc1BlckNvbHVtbikpKTtcbiAgICAgICAgICAgIGZvciAodmFyIE0sIHogPSB0LnNsaWRlc1BlckNvbHVtbiwgUCA9IFQgLyB6LCBrID0gTWF0aC5mbG9vcihoIC8gdC5zbGlkZXNQZXJDb2x1bW4pLCAkID0gMDsgJCA8IGg7ICQgKz0gMSkge1xuICAgICAgICAgICAgICBDID0gMDtcbiAgICAgICAgICAgICAgdmFyIEwgPSBkLmVxKCQpO1xuICAgICAgICAgICAgICBpZiAodC5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIEkgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICBPID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgQSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoXCJyb3dcIiA9PT0gdC5zbGlkZXNQZXJDb2x1bW5GaWxsICYmIHQuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgRCA9IE1hdGguZmxvb3IoJCAvICh0LnNsaWRlc1Blckdyb3VwICogdC5zbGlkZXNQZXJDb2x1bW4pKSxcbiAgICAgICAgICAgICAgICAgICAgRyA9ICQgLSB0LnNsaWRlc1BlckNvbHVtbiAqIHQuc2xpZGVzUGVyR3JvdXAgKiBELFxuICAgICAgICAgICAgICAgICAgICBOID0gMCA9PT0gRCA/IHQuc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKGggLSBEICogeiAqIHQuc2xpZGVzUGVyR3JvdXApIC8geiksIHQuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICAgICAgICAgICAgSSA9IChPID0gRyAtIChBID0gTWF0aC5mbG9vcihHIC8gTikpICogTiArIEQgKiB0LnNsaWRlc1Blckdyb3VwKSArIEEgKiBUIC8geiwgTC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBcIi13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXBcIjogSSxcbiAgICAgICAgICAgICAgICAgICAgXCItbW96LWJveC1vcmRpbmFsLWdyb3VwXCI6IEksXG4gICAgICAgICAgICAgICAgICAgIFwiLW1zLWZsZXgtb3JkZXJcIjogSSxcbiAgICAgICAgICAgICAgICAgICAgXCItd2Via2l0LW9yZGVyXCI6IEksXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBJXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSBcImNvbHVtblwiID09PSB0LnNsaWRlc1BlckNvbHVtbkZpbGwgPyAoQSA9ICQgLSAoTyA9IE1hdGguZmxvb3IoJCAvIHopKSAqIHosIChPID4gayB8fCBPID09PSBrICYmIEEgPT09IHogLSAxKSAmJiAoQSArPSAxKSA+PSB6ICYmIChBID0gMCwgTyArPSAxKSkgOiBPID0gJCAtIChBID0gTWF0aC5mbG9vcigkIC8gUCkpICogUDtcbiAgICAgICAgICAgICAgICBMLmNzcyhcIm1hcmdpbi1cIiArICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gXCJ0b3BcIiA6IFwibGVmdFwiKSwgMCAhPT0gQSAmJiB0LnNwYWNlQmV0d2VlbiAmJiB0LnNwYWNlQmV0d2VlbiArIFwicHhcIilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXCJub25lXCIgIT09IEwuY3NzKFwiZGlzcGxheVwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChcImF1dG9cIiA9PT0gdC5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgQiA9IGUuZ2V0Q29tcHV0ZWRTdHlsZShMWzBdLCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgSCA9IExbMF0uc3R5bGUudHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICBYID0gTFswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICBpZiAoSCAmJiAoTFswXS5zdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIiksIFggJiYgKExbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gXCJub25lXCIpLCB0LnJvdW5kTGVuZ3RocykgQyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBMLm91dGVyV2lkdGgoITApIDogTC5vdXRlckhlaWdodCghMCk7XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBZID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJ3aWR0aFwiKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICBWID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLWxlZnRcIikgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgRiA9IHBhcnNlRmxvYXQoQi5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1yaWdodFwiKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICBXID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tbGVmdFwiKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICBSID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tcmlnaHRcIikgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgcSA9IEIuZ2V0UHJvcGVydHlWYWx1ZShcImJveC1zaXppbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIEMgPSBxICYmIFwiYm9yZGVyLWJveFwiID09PSBxID8gWSArIFcgKyBSIDogWSArIFYgKyBGICsgVyArIFJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJoZWlnaHRcIikgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgXyA9IHBhcnNlRmxvYXQoQi5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy10b3BcIikgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgVSA9IHBhcnNlRmxvYXQoQi5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1ib3R0b21cIikgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgSyA9IHBhcnNlRmxvYXQoQi5nZXRQcm9wZXJ0eVZhbHVlKFwibWFyZ2luLXRvcFwiKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICBaID0gcGFyc2VGbG9hdChCLmdldFByb3BlcnR5VmFsdWUoXCJtYXJnaW4tYm90dG9tXCIpIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgIEogPSBCLmdldFByb3BlcnR5VmFsdWUoXCJib3gtc2l6aW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICBDID0gSiAmJiBcImJvcmRlci1ib3hcIiA9PT0gSiA/IGogKyBLICsgWiA6IGogKyBfICsgVSArIEsgKyBaXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBIICYmIChMWzBdLnN0eWxlLnRyYW5zZm9ybSA9IEgpLCBYICYmIChMWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IFgpLCB0LnJvdW5kTGVuZ3RocyAmJiAoQyA9IE1hdGguZmxvb3IoQykpXG4gICAgICAgICAgICAgICAgfSBlbHNlIEMgPSAocyAtICh0LnNsaWRlc1BlclZpZXcgLSAxKSAqIGIpIC8gdC5zbGlkZXNQZXJWaWV3LCB0LnJvdW5kTGVuZ3RocyAmJiAoQyA9IE1hdGguZmxvb3IoQykpLCBkWyRdICYmICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZFskXS5zdHlsZS53aWR0aCA9IEMgKyBcInB4XCIgOiBkWyRdLnN0eWxlLmhlaWdodCA9IEMgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIGRbJF0gJiYgKGRbJF0uc3dpcGVyU2xpZGVTaXplID0gQyksIGMucHVzaChDKSwgdC5jZW50ZXJlZFNsaWRlcyA/ICh5ID0geSArIEMgLyAyICsgRSAvIDIgKyBiLCAwID09PSBFICYmIDAgIT09ICQgJiYgKHkgPSB5IC0gcyAvIDIgLSBiKSwgMCA9PT0gJCAmJiAoeSA9IHkgLSBzIC8gMiAtIGIpLCBNYXRoLmFicyh5KSA8IC4wMDEgJiYgKHkgPSAwKSwgdC5yb3VuZExlbmd0aHMgJiYgKHkgPSBNYXRoLmZsb29yKHkpKSwgeCAlIHQuc2xpZGVzUGVyR3JvdXAgPT0gMCAmJiBwLnB1c2goeSksIHUucHVzaCh5KSkgOiAodC5yb3VuZExlbmd0aHMgJiYgKHkgPSBNYXRoLmZsb29yKHkpKSwgKHggLSBNYXRoLm1pbih0aGlzLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHgpKSAlIHRoaXMucGFyYW1zLnNsaWRlc1Blckdyb3VwID09IDAgJiYgcC5wdXNoKHkpLCB1LnB1c2goeSksIHkgPSB5ICsgQyArIGIpLCB0aGlzLnZpcnR1YWxTaXplICs9IEMgKyBiLCBFID0gQywgeCArPSAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnZpcnR1YWxTaXplID0gTWF0aC5tYXgodGhpcy52aXJ0dWFsU2l6ZSwgcykgKyBtLCBhICYmIHIgJiYgKFwic2xpZGVcIiA9PT0gdC5lZmZlY3QgfHwgXCJjb3ZlcmZsb3dcIiA9PT0gdC5lZmZlY3QpICYmIGkuY3NzKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy52aXJ0dWFsU2l6ZSArIHQuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgICAgICAgICAgIH0pLCB0LnNldFdyYXBwZXJTaXplICYmICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gaS5jc3Moe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnZpcnR1YWxTaXplICsgdC5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICAgICAgICAgICAgfSkgOiBpLmNzcyh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnZpcnR1YWxTaXplICsgdC5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICAgICAgICAgICAgfSkpLCB0LnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgKHRoaXMudmlydHVhbFNpemUgPSAoQyArIHQuc3BhY2VCZXR3ZWVuKSAqIFQsIHRoaXMudmlydHVhbFNpemUgPSBNYXRoLmNlaWwodGhpcy52aXJ0dWFsU2l6ZSAvIHQuc2xpZGVzUGVyQ29sdW1uKSAtIHQuc3BhY2VCZXR3ZWVuLCB0aGlzLmlzSG9yaXpvbnRhbCgpID8gaS5jc3Moe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnZpcnR1YWxTaXplICsgdC5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICAgICAgICAgICAgfSkgOiBpLmNzcyh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnZpcnR1YWxTaXplICsgdC5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICAgICAgICAgICAgfSksIHQuY2VudGVyZWRTbGlkZXMpKSB7XG4gICAgICAgICAgICAgIE0gPSBbXTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgUSA9IDA7IFEgPCBwLmxlbmd0aDsgUSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVlID0gcFtRXTtcbiAgICAgICAgICAgICAgICB0LnJvdW5kTGVuZ3RocyAmJiAoZWUgPSBNYXRoLmZsb29yKGVlKSksIHBbUV0gPCB0aGlzLnZpcnR1YWxTaXplICsgcFswXSAmJiBNLnB1c2goZWUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcCA9IE1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdC5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgICAgICBNID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIHRlID0gMDsgdGUgPCBwLmxlbmd0aDsgdGUgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBpZSA9IHBbdGVdO1xuICAgICAgICAgICAgICAgIHQucm91bmRMZW5ndGhzICYmIChpZSA9IE1hdGguZmxvb3IoaWUpKSwgcFt0ZV0gPD0gdGhpcy52aXJ0dWFsU2l6ZSAtIHMgJiYgTS5wdXNoKGllKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHAgPSBNLCBNYXRoLmZsb29yKHRoaXMudmlydHVhbFNpemUgLSBzKSAtIE1hdGguZmxvb3IocFtwLmxlbmd0aCAtIDFdKSA+IDEgJiYgcC5wdXNoKHRoaXMudmlydHVhbFNpemUgLSBzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDAgPT09IHAubGVuZ3RoICYmIChwID0gWzBdKSwgMCAhPT0gdC5zcGFjZUJldHdlZW4gJiYgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBhID8gZC5maWx0ZXIodikuY3NzKHtcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBiICsgXCJweFwiXG4gICAgICAgICAgICAgIH0pIDogZC5maWx0ZXIodikuY3NzKHtcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogYiArIFwicHhcIlxuICAgICAgICAgICAgICB9KSA6IGQuZmlsdGVyKHYpLmNzcyh7XG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBiICsgXCJweFwiXG4gICAgICAgICAgICAgIH0pKSwgdC5jZW50ZXJlZFNsaWRlcyAmJiB0LmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgICAgICAgICAgIHZhciBzZSA9IDA7XG4gICAgICAgICAgICAgIGMuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBzZSArPSBlICsgKHQuc3BhY2VCZXR3ZWVuID8gdC5zcGFjZUJldHdlZW4gOiAwKVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHZhciBhZSA9IChzZSAtPSB0LnNwYWNlQmV0d2VlbikgLSBzO1xuICAgICAgICAgICAgICBwID0gcC5tYXAoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPCAwID8gLWYgOiBlID4gYWUgPyBhZSArIG0gOiBlXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgICAgICAgICAgIHZhciByZSA9IDA7XG4gICAgICAgICAgICAgIGlmIChjLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICByZSArPSBlICsgKHQuc3BhY2VCZXR3ZWVuID8gdC5zcGFjZUJldHdlZW4gOiAwKVxuICAgICAgICAgICAgICAgIH0pKSwgKHJlIC09IHQuc3BhY2VCZXR3ZWVuKSA8IHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmUgPSAocyAtIHJlKSAvIDI7XG4gICAgICAgICAgICAgICAgcC5mb3JFYWNoKChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgcFt0XSA9IGUgLSBuZVxuICAgICAgICAgICAgICAgIH0pKSwgdS5mb3JFYWNoKChmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgdVt0XSA9IGUgKyBuZVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTKHRoaXMsIHtcbiAgICAgICAgICAgICAgc2xpZGVzOiBkLFxuICAgICAgICAgICAgICBzbmFwR3JpZDogcCxcbiAgICAgICAgICAgICAgc2xpZGVzR3JpZDogdSxcbiAgICAgICAgICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBjXG4gICAgICAgICAgICB9KSwgaCAhPT0gbyAmJiB0aGlzLmVtaXQoXCJzbGlkZXNMZW5ndGhDaGFuZ2VcIiksIHAubGVuZ3RoICE9PSBnICYmICh0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHRoaXMuY2hlY2tPdmVyZmxvdygpLCB0aGlzLmVtaXQoXCJzbmFwR3JpZExlbmd0aENoYW5nZVwiKSksIHUubGVuZ3RoICE9PSB3ICYmIHRoaXMuZW1pdChcInNsaWRlc0dyaWRMZW5ndGhDaGFuZ2VcIiksICh0LndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgdC53YXRjaFNsaWRlc1Zpc2liaWxpdHkpICYmIHRoaXMudXBkYXRlU2xpZGVzT2Zmc2V0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUF1dG9IZWlnaHQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIHQsIGkgPSBbXSxcbiAgICAgICAgICAgIHMgPSAwO1xuICAgICAgICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiBlID8gdGhpcy5zZXRUcmFuc2l0aW9uKGUpIDogITAgPT09IGUgJiYgdGhpcy5zZXRUcmFuc2l0aW9uKHRoaXMucGFyYW1zLnNwZWVkKSwgXCJhdXRvXCIgIT09IHRoaXMucGFyYW1zLnNsaWRlc1BlclZpZXcgJiYgdGhpcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHRoaXMudmlzaWJsZVNsaWRlcy5lYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBpLnB1c2goZSlcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgZm9yICh0ID0gMDsgdCA8IE1hdGguY2VpbCh0aGlzLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgdCArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmFjdGl2ZUluZGV4ICsgdDtcbiAgICAgICAgICAgICAgICBpZiAoYSA+IHRoaXMuc2xpZGVzLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgaS5wdXNoKHRoaXMuc2xpZGVzLmVxKGEpWzBdKVxuICAgICAgICAgICAgICB9IGVsc2UgaS5wdXNoKHRoaXMuc2xpZGVzLmVxKHRoaXMuYWN0aXZlSW5kZXgpWzBdKTtcbiAgICAgICAgICBmb3IgKHQgPSAwOyB0IDwgaS5sZW5ndGg7IHQgKz0gMSlcbiAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGlbdF0pIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBpW3RdLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgcyA9IHIgPiBzID8gciA6IHNcbiAgICAgICAgICAgIH0gcyAmJiB0aGlzLiR3cmFwcGVyRWwuY3NzKFwiaGVpZ2h0XCIsIHMgKyBcInB4XCIpXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVNsaWRlc09mZnNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIGUgPSB0aGlzLnNsaWRlcywgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCArPSAxKSBlW3RdLnN3aXBlclNsaWRlT2Zmc2V0ID0gdGhpcy5pc0hvcml6b250YWwoKSA/IGVbdF0ub2Zmc2V0TGVmdCA6IGVbdF0ub2Zmc2V0VG9wXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVNsaWRlc1Byb2dyZXNzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMCk7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGkgPSB0aGlzLnNsaWRlcyxcbiAgICAgICAgICAgIHMgPSB0aGlzLnJ0bFRyYW5zbGF0ZTtcbiAgICAgICAgICBpZiAoMCAhPT0gaS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gaVswXS5zd2lwZXJTbGlkZU9mZnNldCAmJiB0aGlzLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIGEgPSAtZTtcbiAgICAgICAgICAgIHMgJiYgKGEgPSBlKSwgaS5yZW1vdmVDbGFzcyh0LnNsaWRlVmlzaWJsZUNsYXNzKSwgdGhpcy52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdLCB0aGlzLnZpc2libGVTbGlkZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgaS5sZW5ndGg7IHIgKz0gMSkge1xuICAgICAgICAgICAgICB2YXIgbiA9IGlbcl0sXG4gICAgICAgICAgICAgICAgbCA9IChhICsgKHQuY2VudGVyZWRTbGlkZXMgPyB0aGlzLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBuLnN3aXBlclNsaWRlT2Zmc2V0KSAvIChuLnN3aXBlclNsaWRlU2l6ZSArIHQuc3BhY2VCZXR3ZWVuKTtcbiAgICAgICAgICAgICAgaWYgKHQud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IHQuY2VudGVyZWRTbGlkZXMgJiYgdC5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSAtKGEgLSBuLnN3aXBlclNsaWRlT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgIGQgPSBvICsgdGhpcy5zbGlkZXNTaXplc0dyaWRbcl07XG4gICAgICAgICAgICAgICAgKG8gPj0gMCAmJiBvIDwgdGhpcy5zaXplIC0gMSB8fCBkID4gMSAmJiBkIDw9IHRoaXMuc2l6ZSB8fCBvIDw9IDAgJiYgZCA+PSB0aGlzLnNpemUpICYmICh0aGlzLnZpc2libGVTbGlkZXMucHVzaChuKSwgdGhpcy52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKHIpLCBpLmVxKHIpLmFkZENsYXNzKHQuc2xpZGVWaXNpYmxlQ2xhc3MpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG4ucHJvZ3Jlc3MgPSBzID8gLWwgOiBsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZpc2libGVTbGlkZXMgPSBtKHRoaXMudmlzaWJsZVNsaWRlcylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVByb2dyZXNzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgICAgICAgICBlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSAmJiB0aGlzLnRyYW5zbGF0ZSAqIHQgfHwgMFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaSA9IHRoaXMucGFyYW1zLFxuICAgICAgICAgICAgcyA9IHRoaXMubWF4VHJhbnNsYXRlKCkgLSB0aGlzLm1pblRyYW5zbGF0ZSgpLFxuICAgICAgICAgICAgYSA9IHRoaXMucHJvZ3Jlc3MsXG4gICAgICAgICAgICByID0gdGhpcy5pc0JlZ2lubmluZyxcbiAgICAgICAgICAgIG4gPSB0aGlzLmlzRW5kLFxuICAgICAgICAgICAgbCA9IHIsXG4gICAgICAgICAgICBvID0gbjtcbiAgICAgICAgICAwID09PSBzID8gKGEgPSAwLCByID0gITAsIG4gPSAhMCkgOiAociA9IChhID0gKGUgLSB0aGlzLm1pblRyYW5zbGF0ZSgpKSAvIHMpIDw9IDAsIG4gPSBhID49IDEpLCBTKHRoaXMsIHtcbiAgICAgICAgICAgIHByb2dyZXNzOiBhLFxuICAgICAgICAgICAgaXNCZWdpbm5pbmc6IHIsXG4gICAgICAgICAgICBpc0VuZDogblxuICAgICAgICAgIH0pLCAoaS53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IGkud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IGkuY2VudGVyZWRTbGlkZXMgJiYgaS5hdXRvSGVpZ2h0KSAmJiB0aGlzLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKGUpLCByICYmICFsICYmIHRoaXMuZW1pdChcInJlYWNoQmVnaW5uaW5nIHRvRWRnZVwiKSwgbiAmJiAhbyAmJiB0aGlzLmVtaXQoXCJyZWFjaEVuZCB0b0VkZ2VcIiksIChsICYmICFyIHx8IG8gJiYgIW4pICYmIHRoaXMuZW1pdChcImZyb21FZGdlXCIpLCB0aGlzLmVtaXQoXCJwcm9ncmVzc1wiLCBhKVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVTbGlkZXNDbGFzc2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUsIHQgPSB0aGlzLnNsaWRlcyxcbiAgICAgICAgICAgIGkgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIHMgPSB0aGlzLiR3cmFwcGVyRWwsXG4gICAgICAgICAgICBhID0gdGhpcy5hY3RpdmVJbmRleCxcbiAgICAgICAgICAgIHIgPSB0aGlzLnJlYWxJbmRleCxcbiAgICAgICAgICAgIG4gPSB0aGlzLnZpcnR1YWwgJiYgaS52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICAgICAgdC5yZW1vdmVDbGFzcyhpLnNsaWRlQWN0aXZlQ2xhc3MgKyBcIiBcIiArIGkuc2xpZGVOZXh0Q2xhc3MgKyBcIiBcIiArIGkuc2xpZGVQcmV2Q2xhc3MgKyBcIiBcIiArIGkuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyArIFwiIFwiICsgaS5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyArIFwiIFwiICsgaS5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyksIChlID0gbiA/IHRoaXMuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgaS5zbGlkZUNsYXNzICsgJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBhICsgJ1wiXScpIDogdC5lcShhKSkuYWRkQ2xhc3MoaS5zbGlkZUFjdGl2ZUNsYXNzKSwgaS5sb29wICYmIChlLmhhc0NsYXNzKGkuc2xpZGVEdXBsaWNhdGVDbGFzcykgPyBzLmNoaWxkcmVuKFwiLlwiICsgaS5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIGkuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHIgKyAnXCJdJykuYWRkQ2xhc3MoaS5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKSA6IHMuY2hpbGRyZW4oXCIuXCIgKyBpLnNsaWRlQ2xhc3MgKyBcIi5cIiArIGkuc2xpZGVEdXBsaWNhdGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgciArICdcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpKTtcbiAgICAgICAgICB2YXIgbCA9IGUubmV4dEFsbChcIi5cIiArIGkuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MoaS5zbGlkZU5leHRDbGFzcyk7XG4gICAgICAgICAgaS5sb29wICYmIDAgPT09IGwubGVuZ3RoICYmIChsID0gdC5lcSgwKSkuYWRkQ2xhc3MoaS5zbGlkZU5leHRDbGFzcyk7XG4gICAgICAgICAgdmFyIG8gPSBlLnByZXZBbGwoXCIuXCIgKyBpLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKGkuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgIGkubG9vcCAmJiAwID09PSBvLmxlbmd0aCAmJiAobyA9IHQuZXEoLTEpKS5hZGRDbGFzcyhpLnNsaWRlUHJldkNsYXNzKSwgaS5sb29wICYmIChsLmhhc0NsYXNzKGkuc2xpZGVEdXBsaWNhdGVDbGFzcykgPyBzLmNoaWxkcmVuKFwiLlwiICsgaS5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIGkuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIGwuYXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpICsgJ1wiXScpLmFkZENsYXNzKGkuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpIDogcy5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVDbGFzcyArIFwiLlwiICsgaS5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBsLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSArICdcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKSwgby5oYXNDbGFzcyhpLnNsaWRlRHVwbGljYXRlQ2xhc3MpID8gcy5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBpLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyAnKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBvLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSArICdcIl0nKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKSA6IHMuY2hpbGRyZW4oXCIuXCIgKyBpLnNsaWRlQ2xhc3MgKyBcIi5cIiArIGkuc2xpZGVEdXBsaWNhdGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgby5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgKyAnXCJdJykuYWRkQ2xhc3MoaS5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcykpLCB0aGlzLmVtaXRTbGlkZXNDbGFzc2VzKClcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlQWN0aXZlSW5kZXg6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIHQsIGkgPSB0aGlzLnJ0bFRyYW5zbGF0ZSA/IHRoaXMudHJhbnNsYXRlIDogLXRoaXMudHJhbnNsYXRlLFxuICAgICAgICAgICAgcyA9IHRoaXMuc2xpZGVzR3JpZCxcbiAgICAgICAgICAgIGEgPSB0aGlzLnNuYXBHcmlkLFxuICAgICAgICAgICAgciA9IHRoaXMucGFyYW1zLFxuICAgICAgICAgICAgbiA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICBsID0gdGhpcy5yZWFsSW5kZXgsXG4gICAgICAgICAgICBvID0gdGhpcy5zbmFwSW5kZXgsXG4gICAgICAgICAgICBkID0gZTtcbiAgICAgICAgICBpZiAodm9pZCAwID09PSBkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IHMubGVuZ3RoOyBoICs9IDEpIHZvaWQgMCAhPT0gc1toICsgMV0gPyBpID49IHNbaF0gJiYgaSA8IHNbaCArIDFdIC0gKHNbaCArIDFdIC0gc1toXSkgLyAyID8gZCA9IGggOiBpID49IHNbaF0gJiYgaSA8IHNbaCArIDFdICYmIChkID0gaCArIDEpIDogaSA+PSBzW2hdICYmIChkID0gaCk7XG4gICAgICAgICAgICByLm5vcm1hbGl6ZVNsaWRlSW5kZXggJiYgKGQgPCAwIHx8IHZvaWQgMCA9PT0gZCkgJiYgKGQgPSAwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYS5pbmRleE9mKGkpID49IDApIHQgPSBhLmluZGV4T2YoaSk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IE1hdGgubWluKHIuc2xpZGVzUGVyR3JvdXBTa2lwLCBkKTtcbiAgICAgICAgICAgIHQgPSBwICsgTWF0aC5mbG9vcigoZCAtIHApIC8gci5zbGlkZXNQZXJHcm91cClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHQgPj0gYS5sZW5ndGggJiYgKHQgPSBhLmxlbmd0aCAtIDEpLCBkICE9PSBuKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHBhcnNlSW50KHRoaXMuc2xpZGVzLmVxKGQpLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSB8fCBkLCAxMCk7XG4gICAgICAgICAgICBTKHRoaXMsIHtcbiAgICAgICAgICAgICAgc25hcEluZGV4OiB0LFxuICAgICAgICAgICAgICByZWFsSW5kZXg6IHUsXG4gICAgICAgICAgICAgIHByZXZpb3VzSW5kZXg6IG4sXG4gICAgICAgICAgICAgIGFjdGl2ZUluZGV4OiBkXG4gICAgICAgICAgICB9KSwgdGhpcy5lbWl0KFwiYWN0aXZlSW5kZXhDaGFuZ2VcIiksIHRoaXMuZW1pdChcInNuYXBJbmRleENoYW5nZVwiKSwgbCAhPT0gdSAmJiB0aGlzLmVtaXQoXCJyZWFsSW5kZXhDaGFuZ2VcIiksICh0aGlzLmluaXRpYWxpemVkIHx8IHRoaXMucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkgJiYgdGhpcy5lbWl0KFwic2xpZGVDaGFuZ2VcIilcbiAgICAgICAgICB9IGVsc2UgdCAhPT0gbyAmJiAodGhpcy5zbmFwSW5kZXggPSB0LCB0aGlzLmVtaXQoXCJzbmFwSW5kZXhDaGFuZ2VcIikpXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUNsaWNrZWRTbGlkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMucGFyYW1zLFxuICAgICAgICAgICAgaSA9IG0oZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIgKyB0LnNsaWRlQ2xhc3MpWzBdLFxuICAgICAgICAgICAgcyA9ICExO1xuICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0aGlzLnNsaWRlcy5sZW5ndGg7IGEgKz0gMSkgdGhpcy5zbGlkZXNbYV0gPT09IGkgJiYgKHMgPSAhMCk7XG4gICAgICAgICAgaWYgKCFpIHx8ICFzKSByZXR1cm4gdGhpcy5jbGlja2VkU2xpZGUgPSB2b2lkIDAsIHZvaWQodGhpcy5jbGlja2VkSW5kZXggPSB2b2lkIDApO1xuICAgICAgICAgIHRoaXMuY2xpY2tlZFNsaWRlID0gaSwgdGhpcy52aXJ0dWFsICYmIHRoaXMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHRoaXMuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQobShpKS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksIDEwKSA6IHRoaXMuY2xpY2tlZEluZGV4ID0gbShpKS5pbmRleCgpLCB0LnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgdm9pZCAwICE9PSB0aGlzLmNsaWNrZWRJbmRleCAmJiB0aGlzLmNsaWNrZWRJbmRleCAhPT0gdGhpcy5hY3RpdmVJbmRleCAmJiB0aGlzLnNsaWRlVG9DbGlja2VkU2xpZGUoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgIGdldFRyYW5zbGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gXCJ4XCIgOiBcInlcIik7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGkgPSB0aGlzLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHMgPSB0aGlzLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGEgPSB0aGlzLiR3cmFwcGVyRWw7XG4gICAgICAgICAgaWYgKHQudmlydHVhbFRyYW5zbGF0ZSkgcmV0dXJuIGkgPyAtcyA6IHM7XG4gICAgICAgICAgaWYgKHQuY3NzTW9kZSkgcmV0dXJuIHM7XG4gICAgICAgICAgdmFyIHIgPSBUKGFbMF0sIGUpO1xuICAgICAgICAgIHJldHVybiBpICYmIChyID0gLXIpLCByIHx8IDBcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgICBzID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBhID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgICAgciA9IHRoaXMud3JhcHBlckVsLFxuICAgICAgICAgICAgbiA9IHRoaXMucHJvZ3Jlc3MsXG4gICAgICAgICAgICBsID0gMCxcbiAgICAgICAgICAgIG8gPSAwO1xuICAgICAgICAgIHRoaXMuaXNIb3Jpem9udGFsKCkgPyBsID0gaSA/IC1lIDogZSA6IG8gPSBlLCBzLnJvdW5kTGVuZ3RocyAmJiAobCA9IE1hdGguZmxvb3IobCksIG8gPSBNYXRoLmZsb29yKG8pKSwgcy5jc3NNb2RlID8gclt0aGlzLmlzSG9yaXpvbnRhbCgpID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAtbCA6IC1vIDogcy52aXJ0dWFsVHJhbnNsYXRlIHx8IGEudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyBsICsgXCJweCwgXCIgKyBvICsgXCJweCwgMHB4KVwiKSwgdGhpcy5wcmV2aW91c1RyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlLCB0aGlzLnRyYW5zbGF0ZSA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBsIDogbztcbiAgICAgICAgICB2YXIgZCA9IHRoaXMubWF4VHJhbnNsYXRlKCkgLSB0aGlzLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgICgwID09PSBkID8gMCA6IChlIC0gdGhpcy5taW5UcmFuc2xhdGUoKSkgLyBkKSAhPT0gbiAmJiB0aGlzLnVwZGF0ZVByb2dyZXNzKGUpLCB0aGlzLmVtaXQoXCJzZXRUcmFuc2xhdGVcIiwgdGhpcy50cmFuc2xhdGUsIHQpXG4gICAgICAgIH0sXG4gICAgICAgIG1pblRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXVxuICAgICAgICB9LFxuICAgICAgICBtYXhUcmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGVUbzogZnVuY3Rpb24gKGUsIHQsIGksIHMsIGEpIHtcbiAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSAwKSwgdm9pZCAwID09PSB0ICYmICh0ID0gdGhpcy5wYXJhbXMuc3BlZWQpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSAhMCksIHZvaWQgMCA9PT0gcyAmJiAocyA9ICEwKTtcbiAgICAgICAgICB2YXIgciA9IHRoaXMsXG4gICAgICAgICAgICBuID0gci5wYXJhbXMsXG4gICAgICAgICAgICBsID0gci53cmFwcGVyRWw7XG4gICAgICAgICAgaWYgKHIuYW5pbWF0aW5nICYmIG4ucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSByZXR1cm4gITE7XG4gICAgICAgICAgdmFyIG8sIGQgPSByLm1pblRyYW5zbGF0ZSgpLFxuICAgICAgICAgICAgaCA9IHIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgaWYgKG8gPSBzICYmIGUgPiBkID8gZCA6IHMgJiYgZSA8IGggPyBoIDogZSwgci51cGRhdGVQcm9ncmVzcyhvKSwgbi5jc3NNb2RlKSB7XG4gICAgICAgICAgICB2YXIgcCwgdSA9IHIuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgICAgICBpZiAoMCA9PT0gdCkgbFt1ID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IC1vO1xuICAgICAgICAgICAgZWxzZSBpZiAobC5zY3JvbGxUbykgbC5zY3JvbGxUbygoKHAgPSB7fSlbdSA/IFwibGVmdFwiIDogXCJ0b3BcIl0gPSAtbywgcC5iZWhhdmlvciA9IFwic21vb3RoXCIsIHApKTtcbiAgICAgICAgICAgIGVsc2UgbFt1ID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IC1vO1xuICAgICAgICAgICAgcmV0dXJuICEwXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAwID09PSB0ID8gKHIuc2V0VHJhbnNpdGlvbigwKSwgci5zZXRUcmFuc2xhdGUobyksIGkgJiYgKHIuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCBhKSwgci5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSkpIDogKHIuc2V0VHJhbnNpdGlvbih0KSwgci5zZXRUcmFuc2xhdGUobyksIGkgJiYgKHIuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCBhKSwgci5lbWl0KFwidHJhbnNpdGlvblN0YXJ0XCIpKSwgci5hbmltYXRpbmcgfHwgKHIuYW5pbWF0aW5nID0gITAsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIHx8IChyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByICYmICFyLmRlc3Ryb3llZCAmJiBlLnRhcmdldCA9PT0gdGhpcyAmJiAoci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsLCBkZWxldGUgci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsIGkgJiYgci5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSlcbiAgICAgICAgICB9KSwgci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSkpLCAhMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHRoaXMucGFyYW1zLmNzc01vZGUgfHwgdGhpcy4kd3JhcHBlckVsLnRyYW5zaXRpb24oZSksIHRoaXMuZW1pdChcInNldFRyYW5zaXRpb25cIiwgZSwgdClcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKTtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICBzID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBhID0gdGhpcy5wcmV2aW91c0luZGV4O1xuICAgICAgICAgIGlmICghcy5jc3NNb2RlKSB7XG4gICAgICAgICAgICBzLmF1dG9IZWlnaHQgJiYgdGhpcy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgICB2YXIgciA9IHQ7XG4gICAgICAgICAgICBpZiAociB8fCAociA9IGkgPiBhID8gXCJuZXh0XCIgOiBpIDwgYSA/IFwicHJldlwiIDogXCJyZXNldFwiKSwgdGhpcy5lbWl0KFwidHJhbnNpdGlvblN0YXJ0XCIpLCBlICYmIGkgIT09IGEpIHtcbiAgICAgICAgICAgICAgaWYgKFwicmVzZXRcIiA9PT0gcikgcmV0dXJuIHZvaWQgdGhpcy5lbWl0KFwic2xpZGVSZXNldFRyYW5zaXRpb25TdGFydFwiKTtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KFwic2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnRcIiksIFwibmV4dFwiID09PSByID8gdGhpcy5lbWl0KFwic2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0XCIpIDogdGhpcy5lbWl0KFwic2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0XCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKTtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICBzID0gdGhpcy5wcmV2aW91c0luZGV4LFxuICAgICAgICAgICAgYSA9IHRoaXMucGFyYW1zO1xuICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGluZyA9ICExLCAhYS5jc3NNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICB2YXIgciA9IHQ7XG4gICAgICAgICAgICBpZiAociB8fCAociA9IGkgPiBzID8gXCJuZXh0XCIgOiBpIDwgcyA/IFwicHJldlwiIDogXCJyZXNldFwiKSwgdGhpcy5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSwgZSAmJiBpICE9PSBzKSB7XG4gICAgICAgICAgICAgIGlmIChcInJlc2V0XCIgPT09IHIpIHJldHVybiB2b2lkIHRoaXMuZW1pdChcInNsaWRlUmVzZXRUcmFuc2l0aW9uRW5kXCIpO1xuICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmRcIiksIFwibmV4dFwiID09PSByID8gdGhpcy5lbWl0KFwic2xpZGVOZXh0VHJhbnNpdGlvbkVuZFwiKSA6IHRoaXMuZW1pdChcInNsaWRlUHJldlRyYW5zaXRpb25FbmRcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbGlkZToge1xuICAgICAgICBzbGlkZVRvOiBmdW5jdGlvbiAoZSwgdCwgaSwgcykge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gaSAmJiAoaSA9ICEwKTtcbiAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICByID0gZTtcbiAgICAgICAgICByIDwgMCAmJiAociA9IDApO1xuICAgICAgICAgIHZhciBuID0gYS5wYXJhbXMsXG4gICAgICAgICAgICBsID0gYS5zbmFwR3JpZCxcbiAgICAgICAgICAgIG8gPSBhLnNsaWRlc0dyaWQsXG4gICAgICAgICAgICBkID0gYS5wcmV2aW91c0luZGV4LFxuICAgICAgICAgICAgaCA9IGEuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICBwID0gYS5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgICB1ID0gYS53cmFwcGVyRWw7XG4gICAgICAgICAgaWYgKGEuYW5pbWF0aW5nICYmIG4ucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSByZXR1cm4gITE7XG4gICAgICAgICAgdmFyIGMgPSBNYXRoLm1pbihhLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHIpLFxuICAgICAgICAgICAgdiA9IGMgKyBNYXRoLmZsb29yKChyIC0gYykgLyBhLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgICAgdiA+PSBsLmxlbmd0aCAmJiAodiA9IGwubGVuZ3RoIC0gMSksIChoIHx8IG4uaW5pdGlhbFNsaWRlIHx8IDApID09PSAoZCB8fCAwKSAmJiBpICYmIGEuZW1pdChcImJlZm9yZVNsaWRlQ2hhbmdlU3RhcnRcIik7XG4gICAgICAgICAgdmFyIGYsIG0gPSAtbFt2XTtcbiAgICAgICAgICBpZiAoYS51cGRhdGVQcm9ncmVzcyhtKSwgbi5ub3JtYWxpemVTbGlkZUluZGV4KVxuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBvLmxlbmd0aDsgZyArPSAxKSAtIE1hdGguZmxvb3IoMTAwICogbSkgPj0gTWF0aC5mbG9vcigxMDAgKiBvW2ddKSAmJiAociA9IGcpO1xuICAgICAgICAgIGlmIChhLmluaXRpYWxpemVkICYmIHIgIT09IGgpIHtcbiAgICAgICAgICAgIGlmICghYS5hbGxvd1NsaWRlTmV4dCAmJiBtIDwgYS50cmFuc2xhdGUgJiYgbSA8IGEubWluVHJhbnNsYXRlKCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgIGlmICghYS5hbGxvd1NsaWRlUHJldiAmJiBtID4gYS50cmFuc2xhdGUgJiYgbSA+IGEubWF4VHJhbnNsYXRlKCkgJiYgKGggfHwgMCkgIT09IHIpIHJldHVybiAhMVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZiA9IHIgPiBoID8gXCJuZXh0XCIgOiByIDwgaCA/IFwicHJldlwiIDogXCJyZXNldFwiLCBwICYmIC1tID09PSBhLnRyYW5zbGF0ZSB8fCAhcCAmJiBtID09PSBhLnRyYW5zbGF0ZSkgcmV0dXJuIGEudXBkYXRlQWN0aXZlSW5kZXgociksIG4uYXV0b0hlaWdodCAmJiBhLnVwZGF0ZUF1dG9IZWlnaHQoKSwgYS51cGRhdGVTbGlkZXNDbGFzc2VzKCksIFwic2xpZGVcIiAhPT0gbi5lZmZlY3QgJiYgYS5zZXRUcmFuc2xhdGUobSksIFwicmVzZXRcIiAhPT0gZiAmJiAoYS50cmFuc2l0aW9uU3RhcnQoaSwgZiksIGEudHJhbnNpdGlvbkVuZChpLCBmKSksICExO1xuICAgICAgICAgIGlmIChuLmNzc01vZGUpIHtcbiAgICAgICAgICAgIHZhciB3LCBiID0gYS5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgICAgeSA9IC1tO1xuICAgICAgICAgICAgaWYgKHAgJiYgKHkgPSB1LnNjcm9sbFdpZHRoIC0gdS5vZmZzZXRXaWR0aCAtIHkpLCAwID09PSB0KSB1W2IgPyBcInNjcm9sbExlZnRcIiA6IFwic2Nyb2xsVG9wXCJdID0geTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHUuc2Nyb2xsVG8pIHUuc2Nyb2xsVG8oKCh3ID0ge30pW2IgPyBcImxlZnRcIiA6IFwidG9wXCJdID0geSwgdy5iZWhhdmlvciA9IFwic21vb3RoXCIsIHcpKTtcbiAgICAgICAgICAgIGVsc2UgdVtiID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IHk7XG4gICAgICAgICAgICByZXR1cm4gITBcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDAgPT09IHQgPyAoYS5zZXRUcmFuc2l0aW9uKDApLCBhLnNldFRyYW5zbGF0ZShtKSwgYS51cGRhdGVBY3RpdmVJbmRleChyKSwgYS51cGRhdGVTbGlkZXNDbGFzc2VzKCksIGEuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCBzKSwgYS50cmFuc2l0aW9uU3RhcnQoaSwgZiksIGEudHJhbnNpdGlvbkVuZChpLCBmKSkgOiAoYS5zZXRUcmFuc2l0aW9uKHQpLCBhLnNldFRyYW5zbGF0ZShtKSwgYS51cGRhdGVBY3RpdmVJbmRleChyKSwgYS51cGRhdGVTbGlkZXNDbGFzc2VzKCksIGEuZW1pdChcImJlZm9yZVRyYW5zaXRpb25TdGFydFwiLCB0LCBzKSwgYS50cmFuc2l0aW9uU3RhcnQoaSwgZiksIGEuYW5pbWF0aW5nIHx8IChhLmFuaW1hdGluZyA9ICEwLCBhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIHx8IChhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGEgJiYgIWEuZGVzdHJveWVkICYmIGUudGFyZ2V0ID09PSB0aGlzICYmIChhLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgYS5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCksIGEuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLCBhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgYS5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGwsIGRlbGV0ZSBhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kLCBhLnRyYW5zaXRpb25FbmQoaSwgZikpXG4gICAgICAgICAgfSksIGEuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBhLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgYS4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsIGEub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpKSksICEwXG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlVG9Mb29wOiBmdW5jdGlvbiAoZSwgdCwgaSwgcykge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gaSAmJiAoaSA9ICEwKTtcbiAgICAgICAgICB2YXIgYSA9IGU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLmxvb3AgJiYgKGEgKz0gdGhpcy5sb29wZWRTbGlkZXMpLCB0aGlzLnNsaWRlVG8oYSwgdCwgaSwgcylcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVOZXh0OiBmdW5jdGlvbiAoZSwgdCwgaSkge1xuICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMucGFyYW1zLnNwZWVkKSwgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICAgICAgICAgIHZhciBzID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBhID0gdGhpcy5hbmltYXRpbmcsXG4gICAgICAgICAgICByID0gdGhpcy5hY3RpdmVJbmRleCA8IHMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgICAgaWYgKHMubG9vcCkge1xuICAgICAgICAgICAgaWYgKGEgJiYgcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuICExO1xuICAgICAgICAgICAgdGhpcy5sb29wRml4KCksIHRoaXMuX2NsaWVudExlZnQgPSB0aGlzLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5zbGlkZVRvKHRoaXMuYWN0aXZlSW5kZXggKyByLCBlLCB0LCBpKVxuICAgICAgICB9LFxuICAgICAgICBzbGlkZVByZXY6IGZ1bmN0aW9uIChlLCB0LCBpKSB7XG4gICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdGhpcy5wYXJhbXMuc3BlZWQpLCB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gICAgICAgICAgdmFyIHMgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGEgPSB0aGlzLmFuaW1hdGluZyxcbiAgICAgICAgICAgIHIgPSB0aGlzLnNuYXBHcmlkLFxuICAgICAgICAgICAgbiA9IHRoaXMuc2xpZGVzR3JpZCxcbiAgICAgICAgICAgIGwgPSB0aGlzLnJ0bFRyYW5zbGF0ZTtcbiAgICAgICAgICBpZiAocy5sb29wKSB7XG4gICAgICAgICAgICBpZiAoYSAmJiBzLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gITE7XG4gICAgICAgICAgICB0aGlzLmxvb3BGaXgoKSwgdGhpcy5fY2xpZW50TGVmdCA9IHRoaXMuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gbyhlKSB7XG4gICAgICAgICAgICByZXR1cm4gZSA8IDAgPyAtTWF0aC5mbG9vcihNYXRoLmFicyhlKSkgOiBNYXRoLmZsb29yKGUpXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkLCBoID0gbyhsID8gdGhpcy50cmFuc2xhdGUgOiAtdGhpcy50cmFuc2xhdGUpLFxuICAgICAgICAgICAgcCA9IHIubWFwKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhlKVxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgdSA9IChyW3AuaW5kZXhPZihoKV0sIHJbcC5pbmRleE9mKGgpIC0gMV0pO1xuICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHUgJiYgcy5jc3NNb2RlICYmIHIuZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICF1ICYmIGggPj0gZSAmJiAodSA9IGUpXG4gICAgICAgICAgfSkpLCB2b2lkIDAgIT09IHUgJiYgKGQgPSBuLmluZGV4T2YodSkpIDwgMCAmJiAoZCA9IHRoaXMuYWN0aXZlSW5kZXggLSAxKSwgdGhpcy5zbGlkZVRvKGQsIGUsIHQsIGkpXG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlUmVzZXQ6IGZ1bmN0aW9uIChlLCB0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMucGFyYW1zLnNwZWVkKSwgdm9pZCAwID09PSB0ICYmICh0ID0gITApLCB0aGlzLnNsaWRlVG8odGhpcy5hY3RpdmVJbmRleCwgZSwgdCwgaSlcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVUb0Nsb3Nlc3Q6IGZ1bmN0aW9uIChlLCB0LCBpLCBzKSB7XG4gICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdGhpcy5wYXJhbXMuc3BlZWQpLCB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCksIHZvaWQgMCA9PT0gcyAmJiAocyA9IC41KTtcbiAgICAgICAgICB2YXIgYSA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICByID0gTWF0aC5taW4odGhpcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhKSxcbiAgICAgICAgICAgIG4gPSByICsgTWF0aC5mbG9vcigoYSAtIHIpIC8gdGhpcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXApLFxuICAgICAgICAgICAgbCA9IHRoaXMucnRsVHJhbnNsYXRlID8gdGhpcy50cmFuc2xhdGUgOiAtdGhpcy50cmFuc2xhdGU7XG4gICAgICAgICAgaWYgKGwgPj0gdGhpcy5zbmFwR3JpZFtuXSkge1xuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLnNuYXBHcmlkW25dO1xuICAgICAgICAgICAgbCAtIG8gPiAodGhpcy5zbmFwR3JpZFtuICsgMV0gLSBvKSAqIHMgJiYgKGEgKz0gdGhpcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5zbmFwR3JpZFtuIC0gMV07XG4gICAgICAgICAgICBsIC0gZCA8PSAodGhpcy5zbmFwR3JpZFtuXSAtIGQpICogcyAmJiAoYSAtPSB0aGlzLnBhcmFtcy5zbGlkZXNQZXJHcm91cClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGEgPSBNYXRoLm1heChhLCAwKSwgYSA9IE1hdGgubWluKGEsIHRoaXMuc2xpZGVzR3JpZC5sZW5ndGggLSAxKSwgdGhpcy5zbGlkZVRvKGEsIGUsIHQsIGkpXG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSwgdCA9IHRoaXMsXG4gICAgICAgICAgICBpID0gdC5wYXJhbXMsXG4gICAgICAgICAgICBzID0gdC4kd3JhcHBlckVsLFxuICAgICAgICAgICAgYSA9IFwiYXV0b1wiID09PSBpLnNsaWRlc1BlclZpZXcgPyB0LnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBpLnNsaWRlc1BlclZpZXcsXG4gICAgICAgICAgICByID0gdC5jbGlja2VkSW5kZXg7XG4gICAgICAgICAgaWYgKGkubG9vcCkge1xuICAgICAgICAgICAgaWYgKHQuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgICAgICAgICBlID0gcGFyc2VJbnQobSh0LmNsaWNrZWRTbGlkZSkuYXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMCksIGkuY2VudGVyZWRTbGlkZXMgPyByIDwgdC5sb29wZWRTbGlkZXMgLSBhIC8gMiB8fCByID4gdC5zbGlkZXMubGVuZ3RoIC0gdC5sb29wZWRTbGlkZXMgKyBhIC8gMiA/ICh0Lmxvb3BGaXgoKSwgciA9IHMuY2hpbGRyZW4oXCIuXCIgKyBpLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIGUgKyAnXCJdOm5vdCguJyArIGkuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKS5lcSgwKS5pbmRleCgpLCBFKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHQuc2xpZGVUbyhyKVxuICAgICAgICAgICAgfSkpKSA6IHQuc2xpZGVUbyhyKSA6IHIgPiB0LnNsaWRlcy5sZW5ndGggLSBhID8gKHQubG9vcEZpeCgpLCByID0gcy5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgZSArICdcIl06bm90KC4nICsgaS5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCksIEUoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdC5zbGlkZVRvKHIpXG4gICAgICAgICAgICB9KSkpIDogdC5zbGlkZVRvKHIpXG4gICAgICAgICAgfSBlbHNlIHQuc2xpZGVUbyhyKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbG9vcDoge1xuICAgICAgICBsb29wQ3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgdCA9IHIoKSxcbiAgICAgICAgICAgIGkgPSBlLnBhcmFtcyxcbiAgICAgICAgICAgIHMgPSBlLiR3cmFwcGVyRWw7XG4gICAgICAgICAgcy5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVDbGFzcyArIFwiLlwiICsgaS5zbGlkZUR1cGxpY2F0ZUNsYXNzKS5yZW1vdmUoKTtcbiAgICAgICAgICB2YXIgYSA9IHMuY2hpbGRyZW4oXCIuXCIgKyBpLnNsaWRlQ2xhc3MpO1xuICAgICAgICAgIGlmIChpLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICAgICAgICAgIHZhciBuID0gaS5zbGlkZXNQZXJHcm91cCAtIGEubGVuZ3RoICUgaS5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgICAgIGlmIChuICE9PSBpLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbjsgbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSBtKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuYWRkQ2xhc3MoaS5zbGlkZUNsYXNzICsgXCIgXCIgKyBpLnNsaWRlQmxhbmtDbGFzcyk7XG4gICAgICAgICAgICAgICAgcy5hcHBlbmQobylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhID0gcy5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVDbGFzcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXCJhdXRvXCIgIT09IGkuc2xpZGVzUGVyVmlldyB8fCBpLmxvb3BlZFNsaWRlcyB8fCAoaS5sb29wZWRTbGlkZXMgPSBhLmxlbmd0aCksIGUubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQoaS5sb29wZWRTbGlkZXMgfHwgaS5zbGlkZXNQZXJWaWV3LCAxMCkpLCBlLmxvb3BlZFNsaWRlcyArPSBpLmxvb3BBZGRpdGlvbmFsU2xpZGVzLCBlLmxvb3BlZFNsaWRlcyA+IGEubGVuZ3RoICYmIChlLmxvb3BlZFNsaWRlcyA9IGEubGVuZ3RoKTtcbiAgICAgICAgICB2YXIgZCA9IFtdLFxuICAgICAgICAgICAgaCA9IFtdO1xuICAgICAgICAgIGEuZWFjaCgoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gbSh0KTtcbiAgICAgICAgICAgIGkgPCBlLmxvb3BlZFNsaWRlcyAmJiBoLnB1c2godCksIGkgPCBhLmxlbmd0aCAmJiBpID49IGEubGVuZ3RoIC0gZS5sb29wZWRTbGlkZXMgJiYgZC5wdXNoKHQpLCBzLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCBpKVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IGgubGVuZ3RoOyBwICs9IDEpIHMuYXBwZW5kKG0oaFtwXS5jbG9uZU5vZGUoITApKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgICAgICAgICBmb3IgKHZhciB1ID0gZC5sZW5ndGggLSAxOyB1ID49IDA7IHUgLT0gMSkgcy5wcmVwZW5kKG0oZFt1XS5jbG9uZU5vZGUoITApKS5hZGRDbGFzcyhpLnNsaWRlRHVwbGljYXRlQ2xhc3MpKVxuICAgICAgICB9LFxuICAgICAgICBsb29wRml4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiYmVmb3JlTG9vcEZpeFwiKTtcbiAgICAgICAgICB2YXIgZSwgdCA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgICBpID0gdGhpcy5zbGlkZXMsXG4gICAgICAgICAgICBzID0gdGhpcy5sb29wZWRTbGlkZXMsXG4gICAgICAgICAgICBhID0gdGhpcy5hbGxvd1NsaWRlUHJldixcbiAgICAgICAgICAgIHIgPSB0aGlzLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICAgICAgbiA9IHRoaXMuc25hcEdyaWQsXG4gICAgICAgICAgICBsID0gdGhpcy5ydGxUcmFuc2xhdGU7XG4gICAgICAgICAgdGhpcy5hbGxvd1NsaWRlUHJldiA9ICEwLCB0aGlzLmFsbG93U2xpZGVOZXh0ID0gITA7XG4gICAgICAgICAgdmFyIG8gPSAtblt0XSAtIHRoaXMuZ2V0VHJhbnNsYXRlKCk7XG4gICAgICAgICAgaWYgKHQgPCBzKSBlID0gaS5sZW5ndGggLSAzICogcyArIHQsIGUgKz0gcywgdGhpcy5zbGlkZVRvKGUsIDAsICExLCAhMCkgJiYgMCAhPT0gbyAmJiB0aGlzLnNldFRyYW5zbGF0ZSgobCA/IC10aGlzLnRyYW5zbGF0ZSA6IHRoaXMudHJhbnNsYXRlKSAtIG8pO1xuICAgICAgICAgIGVsc2UgaWYgKHQgPj0gaS5sZW5ndGggLSBzKSB7XG4gICAgICAgICAgICBlID0gLWkubGVuZ3RoICsgdCArIHMsIGUgKz0gcywgdGhpcy5zbGlkZVRvKGUsIDAsICExLCAhMCkgJiYgMCAhPT0gbyAmJiB0aGlzLnNldFRyYW5zbGF0ZSgobCA/IC10aGlzLnRyYW5zbGF0ZSA6IHRoaXMudHJhbnNsYXRlKSAtIG8pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWxsb3dTbGlkZVByZXYgPSBhLCB0aGlzLmFsbG93U2xpZGVOZXh0ID0gciwgdGhpcy5lbWl0KFwibG9vcEZpeFwiKVxuICAgICAgICB9LFxuICAgICAgICBsb29wRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgICAgdCA9IHRoaXMucGFyYW1zLFxuICAgICAgICAgICAgaSA9IHRoaXMuc2xpZGVzO1xuICAgICAgICAgIGUuY2hpbGRyZW4oXCIuXCIgKyB0LnNsaWRlQ2xhc3MgKyBcIi5cIiArIHQuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiLC5cIiArIHQuc2xpZGVDbGFzcyArIFwiLlwiICsgdC5zbGlkZUJsYW5rQ2xhc3MpLnJlbW92ZSgpLCBpLnJlbW92ZUF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ3JhYkN1cnNvcjoge1xuICAgICAgICBzZXRHcmFiQ3Vyc29yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmICghKHRoaXMuc3VwcG9ydC50b3VjaCB8fCAhdGhpcy5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCB0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHRoaXMuaXNMb2NrZWQgfHwgdGhpcy5wYXJhbXMuY3NzTW9kZSkpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbDtcbiAgICAgICAgICAgIHQuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCIsIHQuc3R5bGUuY3Vyc29yID0gZSA/IFwiLXdlYmtpdC1ncmFiYmluZ1wiIDogXCItd2Via2l0LWdyYWJcIiwgdC5zdHlsZS5jdXJzb3IgPSBlID8gXCItbW96LWdyYWJiaW5cIiA6IFwiLW1vei1ncmFiXCIsIHQuc3R5bGUuY3Vyc29yID0gZSA/IFwiZ3JhYmJpbmdcIiA6IFwiZ3JhYlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1bnNldEdyYWJDdXJzb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnN1cHBvcnQudG91Y2ggfHwgdGhpcy5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiB0aGlzLmlzTG9ja2VkIHx8IHRoaXMucGFyYW1zLmNzc01vZGUgfHwgKHRoaXMuZWwuc3R5bGUuY3Vyc29yID0gXCJcIilcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1hbmlwdWxhdGlvbjoge1xuICAgICAgICBhcHBlbmRTbGlkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuJHdyYXBwZXJFbCxcbiAgICAgICAgICAgIGkgPSB0aGlzLnBhcmFtcztcbiAgICAgICAgICBpZiAoaS5sb29wICYmIHRoaXMubG9vcERlc3Ryb3koKSwgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBcImxlbmd0aFwiIGluIGUpXG4gICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IDEpIGVbc10gJiYgdC5hcHBlbmQoZVtzXSk7XG4gICAgICAgICAgZWxzZSB0LmFwcGVuZChlKTtcbiAgICAgICAgICBpLmxvb3AgJiYgdGhpcy5sb29wQ3JlYXRlKCksIGkub2JzZXJ2ZXIgJiYgdGhpcy5zdXBwb3J0Lm9ic2VydmVyIHx8IHRoaXMudXBkYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGVuZFNsaWRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBpID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgICAgcyA9IHRoaXMuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgdC5sb29wICYmIHRoaXMubG9vcERlc3Ryb3koKTtcbiAgICAgICAgICB2YXIgYSA9IHMgKyAxO1xuICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBlLmxlbmd0aDsgciArPSAxKSBlW3JdICYmIGkucHJlcGVuZChlW3JdKTtcbiAgICAgICAgICAgIGEgPSBzICsgZS5sZW5ndGhcbiAgICAgICAgICB9IGVsc2UgaS5wcmVwZW5kKGUpO1xuICAgICAgICAgIHQubG9vcCAmJiB0aGlzLmxvb3BDcmVhdGUoKSwgdC5vYnNlcnZlciAmJiB0aGlzLnN1cHBvcnQub2JzZXJ2ZXIgfHwgdGhpcy51cGRhdGUoKSwgdGhpcy5zbGlkZVRvKGEsIDAsICExKVxuICAgICAgICB9LFxuICAgICAgICBhZGRTbGlkZTogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuJHdyYXBwZXJFbCxcbiAgICAgICAgICAgIHMgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGEgPSB0aGlzLmFjdGl2ZUluZGV4O1xuICAgICAgICAgIHMubG9vcCAmJiAoYSAtPSB0aGlzLmxvb3BlZFNsaWRlcywgdGhpcy5sb29wRGVzdHJveSgpLCB0aGlzLnNsaWRlcyA9IGkuY2hpbGRyZW4oXCIuXCIgKyBzLnNsaWRlQ2xhc3MpKTtcbiAgICAgICAgICB2YXIgciA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoZSA8PSAwKSB0aGlzLnByZXBlbmRTbGlkZSh0KTtcbiAgICAgICAgICBlbHNlIGlmIChlID49IHIpIHRoaXMuYXBwZW5kU2xpZGUodCk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gYSA+IGUgPyBhICsgMSA6IGEsIGwgPSBbXSwgbyA9IHIgLSAxOyBvID49IGU7IG8gLT0gMSkge1xuICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuc2xpZGVzLmVxKG8pO1xuICAgICAgICAgICAgICBkLnJlbW92ZSgpLCBsLnVuc2hpZnQoZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIFwibGVuZ3RoXCIgaW4gdCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IHQubGVuZ3RoOyBoICs9IDEpIHRbaF0gJiYgaS5hcHBlbmQodFtoXSk7XG4gICAgICAgICAgICAgIG4gPSBhID4gZSA/IGEgKyB0Lmxlbmd0aCA6IGFcbiAgICAgICAgICAgIH0gZWxzZSBpLmFwcGVuZCh0KTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgbC5sZW5ndGg7IHAgKz0gMSkgaS5hcHBlbmQobFtwXSk7XG4gICAgICAgICAgICBzLmxvb3AgJiYgdGhpcy5sb29wQ3JlYXRlKCksIHMub2JzZXJ2ZXIgJiYgdGhpcy5zdXBwb3J0Lm9ic2VydmVyIHx8IHRoaXMudXBkYXRlKCksIHMubG9vcCA/IHRoaXMuc2xpZGVUbyhuICsgdGhpcy5sb29wZWRTbGlkZXMsIDAsICExKSA6IHRoaXMuc2xpZGVUbyhuLCAwLCAhMSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVNsaWRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBpID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgICAgcyA9IHRoaXMuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgdC5sb29wICYmIChzIC09IHRoaXMubG9vcGVkU2xpZGVzLCB0aGlzLmxvb3BEZXN0cm95KCksIHRoaXMuc2xpZGVzID0gaS5jaGlsZHJlbihcIi5cIiArIHQuc2xpZGVDbGFzcykpO1xuICAgICAgICAgIHZhciBhLCByID0gcztcbiAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBcImxlbmd0aFwiIGluIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4gKz0gMSkgYSA9IGVbbl0sIHRoaXMuc2xpZGVzW2FdICYmIHRoaXMuc2xpZGVzLmVxKGEpLnJlbW92ZSgpLCBhIDwgciAmJiAociAtPSAxKTtcbiAgICAgICAgICAgIHIgPSBNYXRoLm1heChyLCAwKVxuICAgICAgICAgIH0gZWxzZSBhID0gZSwgdGhpcy5zbGlkZXNbYV0gJiYgdGhpcy5zbGlkZXMuZXEoYSkucmVtb3ZlKCksIGEgPCByICYmIChyIC09IDEpLCByID0gTWF0aC5tYXgociwgMCk7XG4gICAgICAgICAgdC5sb29wICYmIHRoaXMubG9vcENyZWF0ZSgpLCB0Lm9ic2VydmVyICYmIHRoaXMuc3VwcG9ydC5vYnNlcnZlciB8fCB0aGlzLnVwZGF0ZSgpLCB0Lmxvb3AgPyB0aGlzLnNsaWRlVG8ociArIHRoaXMubG9vcGVkU2xpZGVzLCAwLCAhMSkgOiB0aGlzLnNsaWRlVG8ociwgMCwgITEpXG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUFsbFNsaWRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IDA7IHQgPCB0aGlzLnNsaWRlcy5sZW5ndGg7IHQgKz0gMSkgZS5wdXNoKHQpO1xuICAgICAgICAgIHRoaXMucmVtb3ZlU2xpZGUoZSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHIoKSxcbiAgICAgICAgICAgIHQgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGkgPSB0aGlzLnRvdWNoRXZlbnRzLFxuICAgICAgICAgICAgcyA9IHRoaXMuZWwsXG4gICAgICAgICAgICBhID0gdGhpcy53cmFwcGVyRWwsXG4gICAgICAgICAgICBuID0gdGhpcy5kZXZpY2UsXG4gICAgICAgICAgICBsID0gdGhpcy5zdXBwb3J0O1xuICAgICAgICAgIHRoaXMub25Ub3VjaFN0YXJ0ID0gTy5iaW5kKHRoaXMpLCB0aGlzLm9uVG91Y2hNb3ZlID0gQS5iaW5kKHRoaXMpLCB0aGlzLm9uVG91Y2hFbmQgPSBELmJpbmQodGhpcyksIHQuY3NzTW9kZSAmJiAodGhpcy5vblNjcm9sbCA9IEIuYmluZCh0aGlzKSksIHRoaXMub25DbGljayA9IE4uYmluZCh0aGlzKTtcbiAgICAgICAgICB2YXIgbyA9ICEhdC5uZXN0ZWQ7XG4gICAgICAgICAgaWYgKCFsLnRvdWNoICYmIGwucG9pbnRlckV2ZW50cykgcy5hZGRFdmVudExpc3RlbmVyKGkuc3RhcnQsIHRoaXMub25Ub3VjaFN0YXJ0LCAhMSksIGUuYWRkRXZlbnRMaXN0ZW5lcihpLm1vdmUsIHRoaXMub25Ub3VjaE1vdmUsIG8pLCBlLmFkZEV2ZW50TGlzdGVuZXIoaS5lbmQsIHRoaXMub25Ub3VjaEVuZCwgITEpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGwudG91Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIGQgPSAhKFwidG91Y2hzdGFydFwiICE9PSBpLnN0YXJ0IHx8ICFsLnBhc3NpdmVMaXN0ZW5lciB8fCAhdC5wYXNzaXZlTGlzdGVuZXJzKSAmJiB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogITAsXG4gICAgICAgICAgICAgICAgY2FwdHVyZTogITFcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcy5hZGRFdmVudExpc3RlbmVyKGkuc3RhcnQsIHRoaXMub25Ub3VjaFN0YXJ0LCBkKSwgcy5hZGRFdmVudExpc3RlbmVyKGkubW92ZSwgdGhpcy5vblRvdWNoTW92ZSwgbC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogITEsXG4gICAgICAgICAgICAgICAgY2FwdHVyZTogb1xuICAgICAgICAgICAgICB9IDogbyksIHMuYWRkRXZlbnRMaXN0ZW5lcihpLmVuZCwgdGhpcy5vblRvdWNoRW5kLCBkKSwgaS5jYW5jZWwgJiYgcy5hZGRFdmVudExpc3RlbmVyKGkuY2FuY2VsLCB0aGlzLm9uVG91Y2hFbmQsIGQpLCBIIHx8IChlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIFgpLCBIID0gITApXG4gICAgICAgICAgICB9KHQuc2ltdWxhdGVUb3VjaCAmJiAhbi5pb3MgJiYgIW4uYW5kcm9pZCB8fCB0LnNpbXVsYXRlVG91Y2ggJiYgIWwudG91Y2ggJiYgbi5pb3MpICYmIChzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5vblRvdWNoU3RhcnQsICExKSwgZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Ub3VjaE1vdmUsIG8pLCBlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Ub3VjaEVuZCwgITEpKVxuICAgICAgICAgIH0odC5wcmV2ZW50Q2xpY2tzIHx8IHQucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSAmJiBzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2ssICEwKSwgdC5jc3NNb2RlICYmIGEuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKSwgdC51cGRhdGVPbldpbmRvd1Jlc2l6ZSA/IHRoaXMub24obi5pb3MgfHwgbi5hbmRyb2lkID8gXCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGVcIiA6IFwicmVzaXplIG9ic2VydmVyVXBkYXRlXCIsIEcsICEwKSA6IHRoaXMub24oXCJvYnNlcnZlclVwZGF0ZVwiLCBHLCAhMClcbiAgICAgICAgfSxcbiAgICAgICAgZGV0YWNoRXZlbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSByKCksXG4gICAgICAgICAgICB0ID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBpID0gdGhpcy50b3VjaEV2ZW50cyxcbiAgICAgICAgICAgIHMgPSB0aGlzLmVsLFxuICAgICAgICAgICAgYSA9IHRoaXMud3JhcHBlckVsLFxuICAgICAgICAgICAgbiA9IHRoaXMuZGV2aWNlLFxuICAgICAgICAgICAgbCA9IHRoaXMuc3VwcG9ydCxcbiAgICAgICAgICAgIG8gPSAhIXQubmVzdGVkO1xuICAgICAgICAgIGlmICghbC50b3VjaCAmJiBsLnBvaW50ZXJFdmVudHMpIHMucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLnN0YXJ0LCB0aGlzLm9uVG91Y2hTdGFydCwgITEpLCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoaS5tb3ZlLCB0aGlzLm9uVG91Y2hNb3ZlLCBvKSwgZS5yZW1vdmVFdmVudExpc3RlbmVyKGkuZW5kLCB0aGlzLm9uVG91Y2hFbmQsICExKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsLnRvdWNoKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gIShcIm9uVG91Y2hTdGFydFwiICE9PSBpLnN0YXJ0IHx8ICFsLnBhc3NpdmVMaXN0ZW5lciB8fCAhdC5wYXNzaXZlTGlzdGVuZXJzKSAmJiB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogITAsXG4gICAgICAgICAgICAgICAgY2FwdHVyZTogITFcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcy5yZW1vdmVFdmVudExpc3RlbmVyKGkuc3RhcnQsIHRoaXMub25Ub3VjaFN0YXJ0LCBkKSwgcy5yZW1vdmVFdmVudExpc3RlbmVyKGkubW92ZSwgdGhpcy5vblRvdWNoTW92ZSwgbyksIHMucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLmVuZCwgdGhpcy5vblRvdWNoRW5kLCBkKSwgaS5jYW5jZWwgJiYgcy5yZW1vdmVFdmVudExpc3RlbmVyKGkuY2FuY2VsLCB0aGlzLm9uVG91Y2hFbmQsIGQpXG4gICAgICAgICAgICB9KHQuc2ltdWxhdGVUb3VjaCAmJiAhbi5pb3MgJiYgIW4uYW5kcm9pZCB8fCB0LnNpbXVsYXRlVG91Y2ggJiYgIWwudG91Y2ggJiYgbi5pb3MpICYmIChzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5vblRvdWNoU3RhcnQsICExKSwgZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Ub3VjaE1vdmUsIG8pLCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Ub3VjaEVuZCwgITEpKVxuICAgICAgICAgIH0odC5wcmV2ZW50Q2xpY2tzIHx8IHQucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSAmJiBzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2ssICEwKSwgdC5jc3NNb2RlICYmIGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKSwgdGhpcy5vZmYobi5pb3MgfHwgbi5hbmRyb2lkID8gXCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGVcIiA6IFwicmVzaXplIG9ic2VydmVyVXBkYXRlXCIsIEcpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBicmVha3BvaW50czoge1xuICAgICAgICBzZXRCcmVha3BvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzLmFjdGl2ZUluZGV4LFxuICAgICAgICAgICAgdCA9IHRoaXMuaW5pdGlhbGl6ZWQsXG4gICAgICAgICAgICBpID0gdGhpcy5sb29wZWRTbGlkZXMsXG4gICAgICAgICAgICBzID0gdm9pZCAwID09PSBpID8gMCA6IGksXG4gICAgICAgICAgICBhID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICByID0gdGhpcy4kZWwsXG4gICAgICAgICAgICBuID0gYS5icmVha3BvaW50cztcbiAgICAgICAgICBpZiAobiAmJiAoIW4gfHwgMCAhPT0gT2JqZWN0LmtleXMobikubGVuZ3RoKSkge1xuICAgICAgICAgICAgdmFyIGwgPSB0aGlzLmdldEJyZWFrcG9pbnQobik7XG4gICAgICAgICAgICBpZiAobCAmJiB0aGlzLmN1cnJlbnRCcmVha3BvaW50ICE9PSBsKSB7XG4gICAgICAgICAgICAgIHZhciBvID0gbCBpbiBuID8gbltsXSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgbyAmJiBbXCJzbGlkZXNQZXJWaWV3XCIsIFwic3BhY2VCZXR3ZWVuXCIsIFwic2xpZGVzUGVyR3JvdXBcIiwgXCJzbGlkZXNQZXJHcm91cFNraXBcIiwgXCJzbGlkZXNQZXJDb2x1bW5cIl0uZm9yRWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IG9bZV07XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSB0ICYmIChvW2VdID0gXCJzbGlkZXNQZXJWaWV3XCIgIT09IGUgfHwgXCJBVVRPXCIgIT09IHQgJiYgXCJhdXRvXCIgIT09IHQgPyBcInNsaWRlc1BlclZpZXdcIiA9PT0gZSA/IHBhcnNlRmxvYXQodCkgOiBwYXJzZUludCh0LCAxMCkgOiBcImF1dG9cIilcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB2YXIgZCA9IG8gfHwgdGhpcy5vcmlnaW5hbFBhcmFtcyxcbiAgICAgICAgICAgICAgICBoID0gYS5zbGlkZXNQZXJDb2x1bW4gPiAxLFxuICAgICAgICAgICAgICAgIHAgPSBkLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgICAgICAgICAgIGggJiYgIXAgPyAoci5yZW1vdmVDbGFzcyhhLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93IFwiICsgYS5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIiksIHRoaXMuZW1pdENvbnRhaW5lckNsYXNzZXMoKSkgOiAhaCAmJiBwICYmIChyLmFkZENsYXNzKGEuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3dcIiksIFwiY29sdW1uXCIgPT09IGQuc2xpZGVzUGVyQ29sdW1uRmlsbCAmJiByLmFkZENsYXNzKGEuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3ctY29sdW1uXCIpLCB0aGlzLmVtaXRDb250YWluZXJDbGFzc2VzKCkpO1xuICAgICAgICAgICAgICB2YXIgdSA9IGQuZGlyZWN0aW9uICYmIGQuZGlyZWN0aW9uICE9PSBhLmRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBjID0gYS5sb29wICYmIChkLnNsaWRlc1BlclZpZXcgIT09IGEuc2xpZGVzUGVyVmlldyB8fCB1KTtcbiAgICAgICAgICAgICAgdSAmJiB0ICYmIHRoaXMuY2hhbmdlRGlyZWN0aW9uKCksIFModGhpcy5wYXJhbXMsIGQpLCBTKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhbGxvd1RvdWNoTW92ZTogdGhpcy5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICAgICAgICAgICAgYWxsb3dTbGlkZU5leHQ6IHRoaXMucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICAgICAgICAgIGFsbG93U2xpZGVQcmV2OiB0aGlzLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICAgICAgICAgICAgICB9KSwgdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9IGwsIGMgJiYgdCAmJiAodGhpcy5sb29wRGVzdHJveSgpLCB0aGlzLmxvb3BDcmVhdGUoKSwgdGhpcy51cGRhdGVTbGlkZXMoKSwgdGhpcy5zbGlkZVRvKGUgLSBzICsgdGhpcy5sb29wZWRTbGlkZXMsIDAsICExKSksIHRoaXMuZW1pdChcImJyZWFrcG9pbnRcIiwgZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldEJyZWFrcG9pbnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIHQgPSBsKCk7XG4gICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gITEsXG4gICAgICAgICAgICAgIHMgPSBPYmplY3Qua2V5cyhlKS5tYXAoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgMCA9PT0gZS5pbmRleE9mKFwiQFwiKSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUZsb2F0KGUuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LmlubmVySGVpZ2h0ICogaSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IGVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBlLFxuICAgICAgICAgICAgICAgICAgcG9pbnQ6IGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHMuc29ydCgoZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGUudmFsdWUsIDEwKSAtIHBhcnNlSW50KHQudmFsdWUsIDEwKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBzLmxlbmd0aDsgYSArPSAxKSB7XG4gICAgICAgICAgICAgIHZhciByID0gc1thXSxcbiAgICAgICAgICAgICAgICBuID0gci5wb2ludDtcbiAgICAgICAgICAgICAgci52YWx1ZSA8PSB0LmlubmVyV2lkdGggJiYgKGkgPSBuKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGkgfHwgXCJtYXhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNoZWNrT3ZlcmZsb3c6IHtcbiAgICAgICAgY2hlY2tPdmVyZmxvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICB0ID0gdGhpcy5pc0xvY2tlZCxcbiAgICAgICAgICAgIGkgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAwICYmIGUuc2xpZGVzT2Zmc2V0QmVmb3JlICsgZS5zcGFjZUJldHdlZW4gKiAodGhpcy5zbGlkZXMubGVuZ3RoIC0gMSkgKyB0aGlzLnNsaWRlc1swXS5vZmZzZXRXaWR0aCAqIHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgICAgICAgICBlLnNsaWRlc09mZnNldEJlZm9yZSAmJiBlLnNsaWRlc09mZnNldEFmdGVyICYmIGkgPyB0aGlzLmlzTG9ja2VkID0gaSA8PSB0aGlzLnNpemUgOiB0aGlzLmlzTG9ja2VkID0gMSA9PT0gdGhpcy5zbmFwR3JpZC5sZW5ndGgsIHRoaXMuYWxsb3dTbGlkZU5leHQgPSAhdGhpcy5pc0xvY2tlZCwgdGhpcy5hbGxvd1NsaWRlUHJldiA9ICF0aGlzLmlzTG9ja2VkLCB0ICE9PSB0aGlzLmlzTG9ja2VkICYmIHRoaXMuZW1pdCh0aGlzLmlzTG9ja2VkID8gXCJsb2NrXCIgOiBcInVubG9ja1wiKSwgdCAmJiB0ICE9PSB0aGlzLmlzTG9ja2VkICYmICh0aGlzLmlzRW5kID0gITEsIHRoaXMubmF2aWdhdGlvbiAmJiB0aGlzLm5hdmlnYXRpb24udXBkYXRlKCkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIGFkZENsYXNzZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMuY2xhc3NOYW1lcyxcbiAgICAgICAgICAgIHQgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIGkgPSB0aGlzLnJ0bCxcbiAgICAgICAgICAgIHMgPSB0aGlzLiRlbCxcbiAgICAgICAgICAgIGEgPSB0aGlzLmRldmljZSxcbiAgICAgICAgICAgIHIgPSBbXTtcbiAgICAgICAgICByLnB1c2goXCJpbml0aWFsaXplZFwiKSwgci5wdXNoKHQuZGlyZWN0aW9uKSwgdC5mcmVlTW9kZSAmJiByLnB1c2goXCJmcmVlLW1vZGVcIiksIHQuYXV0b0hlaWdodCAmJiByLnB1c2goXCJhdXRvaGVpZ2h0XCIpLCBpICYmIHIucHVzaChcInJ0bFwiKSwgdC5zbGlkZXNQZXJDb2x1bW4gPiAxICYmIChyLnB1c2goXCJtdWx0aXJvd1wiKSwgXCJjb2x1bW5cIiA9PT0gdC5zbGlkZXNQZXJDb2x1bW5GaWxsICYmIHIucHVzaChcIm11bHRpcm93LWNvbHVtblwiKSksIGEuYW5kcm9pZCAmJiByLnB1c2goXCJhbmRyb2lkXCIpLCBhLmlvcyAmJiByLnB1c2goXCJpb3NcIiksIHQuY3NzTW9kZSAmJiByLnB1c2goXCJjc3MtbW9kZVwiKSwgci5mb3JFYWNoKChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgZS5wdXNoKHQuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGkpXG4gICAgICAgICAgfSkpLCBzLmFkZENsYXNzKGUuam9pbihcIiBcIikpLCB0aGlzLmVtaXRDb250YWluZXJDbGFzc2VzKClcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQ2xhc3NlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy4kZWwsXG4gICAgICAgICAgICB0ID0gdGhpcy5jbGFzc05hbWVzO1xuICAgICAgICAgIGUucmVtb3ZlQ2xhc3ModC5qb2luKFwiIFwiKSksIHRoaXMuZW1pdENvbnRhaW5lckNsYXNzZXMoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW1hZ2VzOiB7XG4gICAgICAgIGxvYWRJbWFnZTogZnVuY3Rpb24gKGUsIHQsIGksIHMsIGEsIHIpIHtcbiAgICAgICAgICB2YXIgbiwgbyA9IGwoKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGQoKSB7XG4gICAgICAgICAgICByICYmIHIoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBtKGUpLnBhcmVudChcInBpY3R1cmVcIilbMF0gfHwgZS5jb21wbGV0ZSAmJiBhID8gZCgpIDogdCA/ICgobiA9IG5ldyBvLkltYWdlKS5vbmxvYWQgPSBkLCBuLm9uZXJyb3IgPSBkLCBzICYmIChuLnNpemVzID0gcyksIGkgJiYgKG4uc3Jjc2V0ID0gaSksIHQgJiYgKG4uc3JjID0gdCkpIDogZCgpXG4gICAgICAgIH0sXG4gICAgICAgIHByZWxvYWRJbWFnZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXM7XG5cbiAgICAgICAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAgICAgbnVsbCAhPSBlICYmIGUgJiYgIWUuZGVzdHJveWVkICYmICh2b2lkIDAgIT09IGUuaW1hZ2VzTG9hZGVkICYmIChlLmltYWdlc0xvYWRlZCArPSAxKSwgZS5pbWFnZXNMb2FkZWQgPT09IGUuaW1hZ2VzVG9Mb2FkLmxlbmd0aCAmJiAoZS5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSAmJiBlLnVwZGF0ZSgpLCBlLmVtaXQoXCJpbWFnZXNSZWFkeVwiKSkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGUuaW1hZ2VzVG9Mb2FkID0gZS4kZWwuZmluZChcImltZ1wiKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGUuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgICAgICAgICAgZS5sb2FkSW1hZ2Uocywgcy5jdXJyZW50U3JjIHx8IHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpLCBzLnNyY3NldCB8fCBzLmdldEF0dHJpYnV0ZShcInNyY3NldFwiKSwgcy5zaXplcyB8fCBzLmdldEF0dHJpYnV0ZShcInNpemVzXCIpLCAhMCwgdClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIEYgPSB7fSxcbiAgICBXID0gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgZm9yICh2YXIgZSwgaSwgcyA9IGFyZ3VtZW50cy5sZW5ndGgsIGEgPSBuZXcgQXJyYXkocyksIHIgPSAwOyByIDwgczsgcisrKSBhW3JdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICAxID09PSBhLmxlbmd0aCAmJiBhWzBdLmNvbnN0cnVjdG9yICYmIGFbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCA/IGkgPSBhWzBdIDogKGUgPSBhWzBdLCBpID0gYVsxXSksIGkgfHwgKGkgPSB7fSksIGkgPSBTKHt9LCBpKSwgZSAmJiAhaS5lbCAmJiAoaS5lbCA9IGUpO1xuICAgICAgICB2YXIgbiA9IHRoaXM7XG4gICAgICAgIG4uc3VwcG9ydCA9IHooKSwgbi5kZXZpY2UgPSBQKHtcbiAgICAgICAgICB1c2VyQWdlbnQ6IGkudXNlckFnZW50XG4gICAgICAgIH0pLCBuLmJyb3dzZXIgPSBrKCksIG4uZXZlbnRzTGlzdGVuZXJzID0ge30sIG4uZXZlbnRzQW55TGlzdGVuZXJzID0gW10sIE9iamVjdC5rZXlzKFYpLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoVltlXSkuZm9yRWFjaCgoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHQucHJvdG90eXBlW2ldIHx8ICh0LnByb3RvdHlwZVtpXSA9IFZbZV1baV0pXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSwgdm9pZCAwID09PSBuLm1vZHVsZXMgJiYgKG4ubW9kdWxlcyA9IHt9KSwgT2JqZWN0LmtleXMobi5tb2R1bGVzKS5mb3JFYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gbi5tb2R1bGVzW2VdO1xuICAgICAgICAgIGlmICh0LnBhcmFtcykge1xuICAgICAgICAgICAgdmFyIHMgPSBPYmplY3Qua2V5cyh0LnBhcmFtcylbMF0sXG4gICAgICAgICAgICAgIGEgPSB0LnBhcmFtc1tzXTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBhIHx8IG51bGwgPT09IGEpIHJldHVybjtcbiAgICAgICAgICAgIGlmICghKHMgaW4gaSkgfHwgIShcImVuYWJsZWRcIiBpbiBhKSkgcmV0dXJuO1xuICAgICAgICAgICAgITAgPT09IGlbc10gJiYgKGlbc10gPSB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6ICEwXG4gICAgICAgICAgICB9KSwgXCJvYmplY3RcIiAhPSB0eXBlb2YgaVtzXSB8fCBcImVuYWJsZWRcIiBpbiBpW3NdIHx8IChpW3NdLmVuYWJsZWQgPSAhMCksIGlbc10gfHwgKGlbc10gPSB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6ICExXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgbCA9IFMoe30sIFkpO1xuICAgICAgICBuLnVzZVBhcmFtcyhsKSwgbi5wYXJhbXMgPSBTKHt9LCBsLCBGLCBpKSwgbi5vcmlnaW5hbFBhcmFtcyA9IFMoe30sIG4ucGFyYW1zKSwgbi5wYXNzZWRQYXJhbXMgPSBTKHt9LCBpKSwgbi5wYXJhbXMgJiYgbi5wYXJhbXMub24gJiYgT2JqZWN0LmtleXMobi5wYXJhbXMub24pLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbi5vbihlLCBuLnBhcmFtcy5vbltlXSlcbiAgICAgICAgfSkpLCBuLiQgPSBtO1xuICAgICAgICB2YXIgbyA9IG0obi5wYXJhbXMuZWwpO1xuICAgICAgICBpZiAoZSA9IG9bMF0pIHtcbiAgICAgICAgICBpZiAoby5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgZCA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIG8uZWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgdmFyIHMgPSBTKHt9LCBpLCB7XG4gICAgICAgICAgICAgICAgZWw6IGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGQucHVzaChuZXcgdChzKSlcbiAgICAgICAgICAgIH0pKSwgZFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaCwgcCwgdTtcbiAgICAgICAgICByZXR1cm4gZS5zd2lwZXIgPSBuLCBlICYmIGUuc2hhZG93Um9vdCAmJiBlLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvciA/IChoID0gbShlLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi5cIiArIG4ucGFyYW1zLndyYXBwZXJDbGFzcykpKS5jaGlsZHJlbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gby5jaGlsZHJlbihlKVxuICAgICAgICAgIH0gOiBoID0gby5jaGlsZHJlbihcIi5cIiArIG4ucGFyYW1zLndyYXBwZXJDbGFzcyksIFMobiwge1xuICAgICAgICAgICAgJGVsOiBvLFxuICAgICAgICAgICAgZWw6IGUsXG4gICAgICAgICAgICAkd3JhcHBlckVsOiBoLFxuICAgICAgICAgICAgd3JhcHBlckVsOiBoWzBdLFxuICAgICAgICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAgICAgICBzbGlkZXM6IG0oKSxcbiAgICAgICAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gXCJob3Jpem9udGFsXCIgPT09IG4ucGFyYW1zLmRpcmVjdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVmVydGljYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwidmVydGljYWxcIiA9PT0gbi5wYXJhbXMuZGlyZWN0aW9uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnRsOiBcInJ0bFwiID09PSBlLmRpci50b0xvd2VyQ2FzZSgpIHx8IFwicnRsXCIgPT09IG8uY3NzKFwiZGlyZWN0aW9uXCIpLFxuICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBcImhvcml6b250YWxcIiA9PT0gbi5wYXJhbXMuZGlyZWN0aW9uICYmIChcInJ0bFwiID09PSBlLmRpci50b0xvd2VyQ2FzZSgpIHx8IFwicnRsXCIgPT09IG8uY3NzKFwiZGlyZWN0aW9uXCIpKSxcbiAgICAgICAgICAgIHdyb25nUlRMOiBcIi13ZWJraXQtYm94XCIgPT09IGguY3NzKFwiZGlzcGxheVwiKSxcbiAgICAgICAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgICAgICAgaXNCZWdpbm5pbmc6ICEwLFxuICAgICAgICAgICAgaXNFbmQ6ICExLFxuICAgICAgICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgICAgICAgYW5pbWF0aW5nOiAhMSxcbiAgICAgICAgICAgIGFsbG93U2xpZGVOZXh0OiBuLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgICAgICAgIGFsbG93U2xpZGVQcmV2OiBuLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgICAgICAgIHRvdWNoRXZlbnRzOiAocCA9IFtcInRvdWNoc3RhcnRcIiwgXCJ0b3VjaG1vdmVcIiwgXCJ0b3VjaGVuZFwiLCBcInRvdWNoY2FuY2VsXCJdLCB1ID0gW1wibW91c2Vkb3duXCIsIFwibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiXSwgbi5zdXBwb3J0LnBvaW50ZXJFdmVudHMgJiYgKHUgPSBbXCJwb2ludGVyZG93blwiLCBcInBvaW50ZXJtb3ZlXCIsIFwicG9pbnRlcnVwXCJdKSwgbi50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgICAgICBzdGFydDogcFswXSxcbiAgICAgICAgICAgICAgbW92ZTogcFsxXSxcbiAgICAgICAgICAgICAgZW5kOiBwWzJdLFxuICAgICAgICAgICAgICBjYW5jZWw6IHBbM11cbiAgICAgICAgICAgIH0sIG4udG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgICAgICBzdGFydDogdVswXSxcbiAgICAgICAgICAgICAgbW92ZTogdVsxXSxcbiAgICAgICAgICAgICAgZW5kOiB1WzJdXG4gICAgICAgICAgICB9LCBuLnN1cHBvcnQudG91Y2ggfHwgIW4ucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBuLnRvdWNoRXZlbnRzVG91Y2ggOiBuLnRvdWNoRXZlbnRzRGVza3RvcCksXG4gICAgICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgICAgICAgaXNUb3VjaGVkOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGlzTW92ZWQ6IHZvaWQgMCxcbiAgICAgICAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdm9pZCAwLFxuICAgICAgICAgICAgICB0b3VjaFN0YXJ0VGltZTogdm9pZCAwLFxuICAgICAgICAgICAgICBpc1Njcm9sbGluZzogdm9pZCAwLFxuICAgICAgICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdm9pZCAwLFxuICAgICAgICAgICAgICBmb3JtRWxlbWVudHM6IFwiaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWxcIixcbiAgICAgICAgICAgICAgbGFzdENsaWNrVGltZTogeCgpLFxuICAgICAgICAgICAgICBjbGlja1RpbWVvdXQ6IHZvaWQgMCxcbiAgICAgICAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHZvaWQgMCxcbiAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiB2b2lkIDAsXG4gICAgICAgICAgICAgIHN0YXJ0TW92aW5nOiB2b2lkIDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGxvd0NsaWNrOiAhMCxcbiAgICAgICAgICAgIGFsbG93VG91Y2hNb3ZlOiBuLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgICAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgICAgICAgZGlmZjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICAgICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICAgICAgICB9KSwgbi51c2VNb2R1bGVzKCksIG4uZW1pdChcIl9zd2lwZXJcIiksIG4ucGFyYW1zLmluaXQgJiYgbi5pbml0KCksIG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGksIHMsIGEsIHIgPSB0LnByb3RvdHlwZTtcbiAgICAgIHJldHVybiByLmVtaXRDb250YWluZXJDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIGlmIChlLnBhcmFtcy5fZW1pdENsYXNzZXMgJiYgZS5lbCkge1xuICAgICAgICAgIHZhciB0ID0gZS5lbC5jbGFzc05hbWUuc3BsaXQoXCIgXCIpLmZpbHRlcigoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAwID09PSB0LmluZGV4T2YoXCJzd2lwZXItY29udGFpbmVyXCIpIHx8IDAgPT09IHQuaW5kZXhPZihlLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBlLmVtaXQoXCJfY29udGFpbmVyQ2xhc3Nlc1wiLCB0LmpvaW4oXCIgXCIpKVxuICAgICAgICB9XG4gICAgICB9LCByLmVtaXRTbGlkZXNDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIGUucGFyYW1zLl9lbWl0Q2xhc3NlcyAmJiBlLmVsICYmIGUuc2xpZGVzLmVhY2goKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGkgPSB0LmNsYXNzTmFtZS5zcGxpdChcIiBcIikuZmlsdGVyKChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIDAgPT09IHQuaW5kZXhPZihcInN3aXBlci1zbGlkZVwiKSB8fCAwID09PSB0LmluZGV4T2YoZS5wYXJhbXMuc2xpZGVDbGFzcylcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgZS5lbWl0KFwiX3NsaWRlQ2xhc3NcIiwgdCwgaS5qb2luKFwiIFwiKSlcbiAgICAgICAgfSkpXG4gICAgICB9LCByLnNsaWRlc1BlclZpZXdEeW5hbWljID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMucGFyYW1zLFxuICAgICAgICAgIHQgPSB0aGlzLnNsaWRlcyxcbiAgICAgICAgICBpID0gdGhpcy5zbGlkZXNHcmlkLFxuICAgICAgICAgIHMgPSB0aGlzLnNpemUsXG4gICAgICAgICAgYSA9IHRoaXMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgciA9IDE7XG4gICAgICAgIGlmIChlLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiwgbCA9IHRbYV0uc3dpcGVyU2xpZGVTaXplLCBvID0gYSArIDE7IG8gPCB0Lmxlbmd0aDsgbyArPSAxKSB0W29dICYmICFuICYmIChyICs9IDEsIChsICs9IHRbb10uc3dpcGVyU2xpZGVTaXplKSA+IHMgJiYgKG4gPSAhMCkpO1xuICAgICAgICAgIGZvciAodmFyIGQgPSBhIC0gMTsgZCA+PSAwOyBkIC09IDEpIHRbZF0gJiYgIW4gJiYgKHIgKz0gMSwgKGwgKz0gdFtkXS5zd2lwZXJTbGlkZVNpemUpID4gcyAmJiAobiA9ICEwKSlcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgZm9yICh2YXIgaCA9IGEgKyAxOyBoIDwgdC5sZW5ndGg7IGggKz0gMSkgaVtoXSAtIGlbYV0gPCBzICYmIChyICs9IDEpO1xuICAgICAgICByZXR1cm4gclxuICAgICAgfSwgci51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgaWYgKGUgJiYgIWUuZGVzdHJveWVkKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLnNuYXBHcmlkLFxuICAgICAgICAgICAgaSA9IGUucGFyYW1zO1xuICAgICAgICAgIGkuYnJlYWtwb2ludHMgJiYgZS5zZXRCcmVha3BvaW50KCksIGUudXBkYXRlU2l6ZSgpLCBlLnVwZGF0ZVNsaWRlcygpLCBlLnVwZGF0ZVByb2dyZXNzKCksIGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCBlLnBhcmFtcy5mcmVlTW9kZSA/IChzKCksIGUucGFyYW1zLmF1dG9IZWlnaHQgJiYgZS51cGRhdGVBdXRvSGVpZ2h0KCkpIDogKChcImF1dG9cIiA9PT0gZS5wYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBlLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgZS5pc0VuZCAmJiAhZS5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBlLnNsaWRlVG8oZS5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgITEsICEwKSA6IGUuc2xpZGVUbyhlLmFjdGl2ZUluZGV4LCAwLCAhMSwgITApKSB8fCBzKCksIGkud2F0Y2hPdmVyZmxvdyAmJiB0ICE9PSBlLnNuYXBHcmlkICYmIGUuY2hlY2tPdmVyZmxvdygpLCBlLmVtaXQoXCJ1cGRhdGVcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHMoKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLnJ0bFRyYW5zbGF0ZSA/IC0xICogZS50cmFuc2xhdGUgOiBlLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGkgPSBNYXRoLm1pbihNYXRoLm1heCh0LCBlLm1heFRyYW5zbGF0ZSgpKSwgZS5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgICAgZS5zZXRUcmFuc2xhdGUoaSksIGUudXBkYXRlQWN0aXZlSW5kZXgoKSwgZS51cGRhdGVTbGlkZXNDbGFzc2VzKClcbiAgICAgICAgfVxuICAgICAgfSwgci5jaGFuZ2VEaXJlY3Rpb24gPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gICAgICAgIHZhciBpID0gdGhpcy5wYXJhbXMuZGlyZWN0aW9uO1xuICAgICAgICByZXR1cm4gZSB8fCAoZSA9IFwiaG9yaXpvbnRhbFwiID09PSBpID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCIpLCBlID09PSBpIHx8IFwiaG9yaXpvbnRhbFwiICE9PSBlICYmIFwidmVydGljYWxcIiAhPT0gZSB8fCAodGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJcIiArIHRoaXMucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBpKS5hZGRDbGFzcyhcIlwiICsgdGhpcy5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGUpLCB0aGlzLmVtaXRDb250YWluZXJDbGFzc2VzKCksIHRoaXMucGFyYW1zLmRpcmVjdGlvbiA9IGUsIHRoaXMuc2xpZGVzLmVhY2goKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgXCJ2ZXJ0aWNhbFwiID09PSBlID8gdC5zdHlsZS53aWR0aCA9IFwiXCIgOiB0LnN0eWxlLmhlaWdodCA9IFwiXCJcbiAgICAgICAgfSkpLCB0aGlzLmVtaXQoXCJjaGFuZ2VEaXJlY3Rpb25cIiksIHQgJiYgdGhpcy51cGRhdGUoKSksIHRoaXNcbiAgICAgIH0sIHIuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCB8fCAodGhpcy5lbWl0KFwiYmVmb3JlSW5pdFwiKSwgdGhpcy5wYXJhbXMuYnJlYWtwb2ludHMgJiYgdGhpcy5zZXRCcmVha3BvaW50KCksIHRoaXMuYWRkQ2xhc3NlcygpLCB0aGlzLnBhcmFtcy5sb29wICYmIHRoaXMubG9vcENyZWF0ZSgpLCB0aGlzLnVwZGF0ZVNpemUoKSwgdGhpcy51cGRhdGVTbGlkZXMoKSwgdGhpcy5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiB0aGlzLmNoZWNrT3ZlcmZsb3coKSwgdGhpcy5wYXJhbXMuZ3JhYkN1cnNvciAmJiB0aGlzLnNldEdyYWJDdXJzb3IoKSwgdGhpcy5wYXJhbXMucHJlbG9hZEltYWdlcyAmJiB0aGlzLnByZWxvYWRJbWFnZXMoKSwgdGhpcy5wYXJhbXMubG9vcCA/IHRoaXMuc2xpZGVUbyh0aGlzLnBhcmFtcy5pbml0aWFsU2xpZGUgKyB0aGlzLmxvb3BlZFNsaWRlcywgMCwgdGhpcy5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSA6IHRoaXMuc2xpZGVUbyh0aGlzLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHRoaXMucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCksIHRoaXMuYXR0YWNoRXZlbnRzKCksIHRoaXMuaW5pdGlhbGl6ZWQgPSAhMCwgdGhpcy5lbWl0KFwiaW5pdFwiKSlcbiAgICAgIH0sIHIuZGVzdHJveSA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKSwgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICAgICAgICB2YXIgaSwgcyA9IHRoaXMsXG4gICAgICAgICAgYSA9IHMucGFyYW1zLFxuICAgICAgICAgIHIgPSBzLiRlbCxcbiAgICAgICAgICBuID0gcy4kd3JhcHBlckVsLFxuICAgICAgICAgIGwgPSBzLnNsaWRlcztcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gcy5wYXJhbXMgfHwgcy5kZXN0cm95ZWQgfHwgKHMuZW1pdChcImJlZm9yZURlc3Ryb3lcIiksIHMuaW5pdGlhbGl6ZWQgPSAhMSwgcy5kZXRhY2hFdmVudHMoKSwgYS5sb29wICYmIHMubG9vcERlc3Ryb3koKSwgdCAmJiAocy5yZW1vdmVDbGFzc2VzKCksIHIucmVtb3ZlQXR0cihcInN0eWxlXCIpLCBuLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSwgbCAmJiBsLmxlbmd0aCAmJiBsLnJlbW92ZUNsYXNzKFthLnNsaWRlVmlzaWJsZUNsYXNzLCBhLnNsaWRlQWN0aXZlQ2xhc3MsIGEuc2xpZGVOZXh0Q2xhc3MsIGEuc2xpZGVQcmV2Q2xhc3NdLmpvaW4oXCIgXCIpKS5yZW1vdmVBdHRyKFwic3R5bGVcIikucmVtb3ZlQXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpKSwgcy5lbWl0KFwiZGVzdHJveVwiKSwgT2JqZWN0LmtleXMocy5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcy5vZmYoZSlcbiAgICAgICAgfSkpLCAhMSAhPT0gZSAmJiAocy4kZWxbMF0uc3dpcGVyID0gbnVsbCwgaSA9IHMsIE9iamVjdC5rZXlzKGkpLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlbZV0gPSBudWxsXG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVsZXRlIGlbZV1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9KSkpLCBzLmRlc3Ryb3llZCA9ICEwKSwgbnVsbFxuICAgICAgfSwgdC5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIFMoRiwgZSlcbiAgICAgIH0sIHQuaW5zdGFsbE1vZHVsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHQucHJvdG90eXBlLm1vZHVsZXMgfHwgKHQucHJvdG90eXBlLm1vZHVsZXMgPSB7fSk7XG4gICAgICAgIHZhciBpID0gZS5uYW1lIHx8IE9iamVjdC5rZXlzKHQucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCArIFwiX1wiICsgeCgpO1xuICAgICAgICB0LnByb3RvdHlwZS5tb2R1bGVzW2ldID0gZVxuICAgICAgfSwgdC51c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlKSA/IChlLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHQuaW5zdGFsbE1vZHVsZShlKVxuICAgICAgICB9KSksIHQpIDogKHQuaW5zdGFsbE1vZHVsZShlKSwgdClcbiAgICAgIH0sIGkgPSB0LCBhID0gW3tcbiAgICAgICAga2V5OiBcImV4dGVuZGVkRGVmYXVsdHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIEZcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFlcbiAgICAgICAgfVxuICAgICAgfV0sIChzID0gbnVsbCkgJiYgZShpLnByb3RvdHlwZSwgcyksIGEgJiYgZShpLCBhKSwgdFxuICAgIH0oKTtcbiAgVy51c2UoWyQsIEldKTtcbiAgdmFyIFIgPSB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICBpID0gdC5wYXJhbXMsXG4gICAgICAgICAgcyA9IGkuc2xpZGVzUGVyVmlldyxcbiAgICAgICAgICBhID0gaS5zbGlkZXNQZXJHcm91cCxcbiAgICAgICAgICByID0gaS5jZW50ZXJlZFNsaWRlcyxcbiAgICAgICAgICBuID0gdC5wYXJhbXMudmlydHVhbCxcbiAgICAgICAgICBsID0gbi5hZGRTbGlkZXNCZWZvcmUsXG4gICAgICAgICAgbyA9IG4uYWRkU2xpZGVzQWZ0ZXIsXG4gICAgICAgICAgZCA9IHQudmlydHVhbCxcbiAgICAgICAgICBoID0gZC5mcm9tLFxuICAgICAgICAgIHAgPSBkLnRvLFxuICAgICAgICAgIHUgPSBkLnNsaWRlcyxcbiAgICAgICAgICBjID0gZC5zbGlkZXNHcmlkLFxuICAgICAgICAgIHYgPSBkLnJlbmRlclNsaWRlLFxuICAgICAgICAgIGYgPSBkLm9mZnNldDtcbiAgICAgICAgdC51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICB2YXIgbSwgZywgdywgYiA9IHQuYWN0aXZlSW5kZXggfHwgMDtcbiAgICAgICAgbSA9IHQucnRsVHJhbnNsYXRlID8gXCJyaWdodFwiIDogdC5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIiwgciA/IChnID0gTWF0aC5mbG9vcihzIC8gMikgKyBhICsgbywgdyA9IE1hdGguZmxvb3IocyAvIDIpICsgYSArIGwpIDogKGcgPSBzICsgKGEgLSAxKSArIG8sIHcgPSBhICsgbCk7XG4gICAgICAgIHZhciB5ID0gTWF0aC5tYXgoKGIgfHwgMCkgLSB3LCAwKSxcbiAgICAgICAgICBFID0gTWF0aC5taW4oKGIgfHwgMCkgKyBnLCB1Lmxlbmd0aCAtIDEpLFxuICAgICAgICAgIHggPSAodC5zbGlkZXNHcmlkW3ldIHx8IDApIC0gKHQuc2xpZGVzR3JpZFswXSB8fCAwKTtcblxuICAgICAgICBmdW5jdGlvbiBUKCkge1xuICAgICAgICAgIHQudXBkYXRlU2xpZGVzKCksIHQudXBkYXRlUHJvZ3Jlc3MoKSwgdC51cGRhdGVTbGlkZXNDbGFzc2VzKCksIHQubGF6eSAmJiB0LnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgdC5sYXp5LmxvYWQoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChTKHQudmlydHVhbCwge1xuICAgICAgICAgICAgZnJvbTogeSxcbiAgICAgICAgICAgIHRvOiBFLFxuICAgICAgICAgICAgb2Zmc2V0OiB4LFxuICAgICAgICAgICAgc2xpZGVzR3JpZDogdC5zbGlkZXNHcmlkXG4gICAgICAgICAgfSksIGggPT09IHkgJiYgcCA9PT0gRSAmJiAhZSkgcmV0dXJuIHQuc2xpZGVzR3JpZCAhPT0gYyAmJiB4ICE9PSBmICYmIHQuc2xpZGVzLmNzcyhtLCB4ICsgXCJweFwiKSwgdm9pZCB0LnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIGlmICh0LnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSByZXR1cm4gdC5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHQsIHtcbiAgICAgICAgICBvZmZzZXQ6IHgsXG4gICAgICAgICAgZnJvbTogeSxcbiAgICAgICAgICB0bzogRSxcbiAgICAgICAgICBzbGlkZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IHk7IHQgPD0gRTsgdCArPSAxKSBlLnB1c2godVt0XSk7XG4gICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgIH0oKVxuICAgICAgICB9KSwgdm9pZCh0LnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlICYmIFQoKSk7XG4gICAgICAgIHZhciBDID0gW10sXG4gICAgICAgICAgTSA9IFtdO1xuICAgICAgICBpZiAoZSkgdC4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyB0LnBhcmFtcy5zbGlkZUNsYXNzKS5yZW1vdmUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGZvciAodmFyIHogPSBoOyB6IDw9IHA7IHogKz0gMSkoeiA8IHkgfHwgeiA+IEUpICYmIHQuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgdC5wYXJhbXMuc2xpZGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgeiArICdcIl0nKS5yZW1vdmUoKTtcbiAgICAgICAgZm9yICh2YXIgUCA9IDA7IFAgPCB1Lmxlbmd0aDsgUCArPSAxKSBQID49IHkgJiYgUCA8PSBFICYmICh2b2lkIDAgPT09IHAgfHwgZSA/IE0ucHVzaChQKSA6IChQID4gcCAmJiBNLnB1c2goUCksIFAgPCBoICYmIEMucHVzaChQKSkpO1xuICAgICAgICBNLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdC4kd3JhcHBlckVsLmFwcGVuZCh2KHVbZV0sIGUpKVxuICAgICAgICB9KSksIEMuc29ydCgoZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICByZXR1cm4gdCAtIGVcbiAgICAgICAgfSkpLmZvckVhY2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdC4kd3JhcHBlckVsLnByZXBlbmQodih1W2VdLCBlKSlcbiAgICAgICAgfSkpLCB0LiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuc3dpcGVyLXNsaWRlXCIpLmNzcyhtLCB4ICsgXCJweFwiKSwgVCgpXG4gICAgICB9LFxuICAgICAgcmVuZGVyU2xpZGU6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5wYXJhbXMudmlydHVhbDtcbiAgICAgICAgaWYgKGkuY2FjaGUgJiYgdGhpcy52aXJ0dWFsLmNhY2hlW3RdKSByZXR1cm4gdGhpcy52aXJ0dWFsLmNhY2hlW3RdO1xuICAgICAgICB2YXIgcyA9IGkucmVuZGVyU2xpZGUgPyBtKGkucmVuZGVyU2xpZGUuY2FsbCh0aGlzLCBlLCB0KSkgOiBtKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3MgKyAnXCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgdCArICdcIj4nICsgZSArIFwiPC9kaXY+XCIpO1xuICAgICAgICByZXR1cm4gcy5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgfHwgcy5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiwgdCksIGkuY2FjaGUgJiYgKHRoaXMudmlydHVhbC5jYWNoZVt0XSA9IHMpLCBzXG4gICAgICB9LFxuICAgICAgYXBwZW5kU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSlcbiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0ICs9IDEpIGVbdF0gJiYgdGhpcy52aXJ0dWFsLnNsaWRlcy5wdXNoKGVbdF0pO1xuICAgICAgICBlbHNlIHRoaXMudmlydHVhbC5zbGlkZXMucHVzaChlKTtcbiAgICAgICAgdGhpcy52aXJ0dWFsLnVwZGF0ZSghMClcbiAgICAgIH0sXG4gICAgICBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5hY3RpdmVJbmRleCxcbiAgICAgICAgICBpID0gdCArIDEsXG4gICAgICAgICAgcyA9IDE7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBlLmxlbmd0aDsgYSArPSAxKSBlW2FdICYmIHRoaXMudmlydHVhbC5zbGlkZXMudW5zaGlmdChlW2FdKTtcbiAgICAgICAgICBpID0gdCArIGUubGVuZ3RoLCBzID0gZS5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHRoaXMudmlydHVhbC5zbGlkZXMudW5zaGlmdChlKTtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICB2YXIgciA9IHRoaXMudmlydHVhbC5jYWNoZSxcbiAgICAgICAgICAgIG4gPSB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhyKS5mb3JFYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHQgPSByW2VdLFxuICAgICAgICAgICAgICBpID0gdC5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIik7XG4gICAgICAgICAgICBpICYmIHQuYXR0cihcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIsIHBhcnNlSW50KGksIDEwKSArIDEpLCBuW3BhcnNlSW50KGUsIDEwKSArIHNdID0gdFxuICAgICAgICAgIH0pKSwgdGhpcy52aXJ0dWFsLmNhY2hlID0gblxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlydHVhbC51cGRhdGUoITApLCB0aGlzLnNsaWRlVG8oaSwgMClcbiAgICAgIH0sXG4gICAgICByZW1vdmVTbGlkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKG51bGwgIT0gZSkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5hY3RpdmVJbmRleDtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSlcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB0aGlzLnZpcnR1YWwuc2xpZGVzLnNwbGljZShlW2ldLCAxKSwgdGhpcy5wYXJhbXMudmlydHVhbC5jYWNoZSAmJiBkZWxldGUgdGhpcy52aXJ0dWFsLmNhY2hlW2VbaV1dLCBlW2ldIDwgdCAmJiAodCAtPSAxKSwgdCA9IE1hdGgubWF4KHQsIDApO1xuICAgICAgICAgIGVsc2UgdGhpcy52aXJ0dWFsLnNsaWRlcy5zcGxpY2UoZSwgMSksIHRoaXMucGFyYW1zLnZpcnR1YWwuY2FjaGUgJiYgZGVsZXRlIHRoaXMudmlydHVhbC5jYWNoZVtlXSwgZSA8IHQgJiYgKHQgLT0gMSksIHQgPSBNYXRoLm1heCh0LCAwKTtcbiAgICAgICAgICB0aGlzLnZpcnR1YWwudXBkYXRlKCEwKSwgdGhpcy5zbGlkZVRvKHQsIDApXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW1vdmVBbGxTbGlkZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52aXJ0dWFsLnNsaWRlcyA9IFtdLCB0aGlzLnBhcmFtcy52aXJ0dWFsLmNhY2hlICYmICh0aGlzLnZpcnR1YWwuY2FjaGUgPSB7fSksIHRoaXMudmlydHVhbC51cGRhdGUoITApLCB0aGlzLnNsaWRlVG8oMCwgMClcbiAgICAgIH1cbiAgICB9LFxuICAgIHEgPSB7XG4gICAgICBuYW1lOiBcInZpcnR1YWxcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB2aXJ0dWFsOiB7XG4gICAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgICAgc2xpZGVzOiBbXSxcbiAgICAgICAgICBjYWNoZTogITAsXG4gICAgICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6ICEwLFxuICAgICAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgICAgICBhZGRTbGlkZXNBZnRlcjogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIHZpcnR1YWw6IHQodCh7fSwgUiksIHt9LCB7XG4gICAgICAgICAgICBzbGlkZXM6IHRoaXMucGFyYW1zLnZpcnR1YWwuc2xpZGVzLFxuICAgICAgICAgICAgY2FjaGU6IHt9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcInZpcnR1YWxcIik7XG4gICAgICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTKGUucGFyYW1zLCB0KSwgUyhlLm9yaWdpbmFsUGFyYW1zLCB0KSwgZS5wYXJhbXMuaW5pdGlhbFNsaWRlIHx8IGUudmlydHVhbC51cGRhdGUoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBlLnZpcnR1YWwudXBkYXRlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaiA9IHtcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSBsKCksXG4gICAgICAgICAgaSA9IHIoKSxcbiAgICAgICAgICBzID0gdGhpcy5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgYSA9IGU7XG4gICAgICAgIGEub3JpZ2luYWxFdmVudCAmJiAoYSA9IGEub3JpZ2luYWxFdmVudCk7XG4gICAgICAgIHZhciBuID0gYS5rZXlDb2RlIHx8IGEuY2hhckNvZGUsXG4gICAgICAgICAgbyA9IHRoaXMucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd24sXG4gICAgICAgICAgZCA9IG8gJiYgMzMgPT09IG4sXG4gICAgICAgICAgaCA9IG8gJiYgMzQgPT09IG4sXG4gICAgICAgICAgcCA9IDM3ID09PSBuLFxuICAgICAgICAgIHUgPSAzOSA9PT0gbixcbiAgICAgICAgICBjID0gMzggPT09IG4sXG4gICAgICAgICAgdiA9IDQwID09PSBuO1xuICAgICAgICBpZiAoIXRoaXMuYWxsb3dTbGlkZU5leHQgJiYgKHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgdSB8fCB0aGlzLmlzVmVydGljYWwoKSAmJiB2IHx8IGgpKSByZXR1cm4gITE7XG4gICAgICAgIGlmICghdGhpcy5hbGxvd1NsaWRlUHJldiAmJiAodGhpcy5pc0hvcml6b250YWwoKSAmJiBwIHx8IHRoaXMuaXNWZXJ0aWNhbCgpICYmIGMgfHwgZCkpIHJldHVybiAhMTtcbiAgICAgICAgaWYgKCEoYS5zaGlmdEtleSB8fCBhLmFsdEtleSB8fCBhLmN0cmxLZXkgfHwgYS5tZXRhS2V5IHx8IGkuYWN0aXZlRWxlbWVudCAmJiBpLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgJiYgKFwiaW5wdXRcIiA9PT0gaS5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgfHwgXCJ0ZXh0YXJlYVwiID09PSBpLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkpKSB7XG4gICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChkIHx8IGggfHwgcCB8fCB1IHx8IGMgfHwgdikpIHtcbiAgICAgICAgICAgIHZhciBmID0gITE7XG4gICAgICAgICAgICBpZiAodGhpcy4kZWwucGFyZW50cyhcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3MpLmxlbmd0aCA+IDAgJiYgMCA9PT0gdGhpcy4kZWwucGFyZW50cyhcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIG0gPSB0LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgIGcgPSB0LmlubmVySGVpZ2h0LFxuICAgICAgICAgICAgICB3ID0gdGhpcy4kZWwub2Zmc2V0KCk7XG4gICAgICAgICAgICBzICYmICh3LmxlZnQgLT0gdGhpcy4kZWxbMF0uc2Nyb2xsTGVmdCk7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gW1xuICAgICAgICAgICAgICAgIFt3LmxlZnQsIHcudG9wXSxcbiAgICAgICAgICAgICAgICBbdy5sZWZ0ICsgdGhpcy53aWR0aCwgdy50b3BdLFxuICAgICAgICAgICAgICAgIFt3LmxlZnQsIHcudG9wICsgdGhpcy5oZWlnaHRdLFxuICAgICAgICAgICAgICAgIFt3LmxlZnQgKyB0aGlzLndpZHRoLCB3LnRvcCArIHRoaXMuaGVpZ2h0XVxuICAgICAgICAgICAgICBdLCB5ID0gMDsgeSA8IGIubGVuZ3RoOyB5ICs9IDEpIHtcbiAgICAgICAgICAgICAgdmFyIEUgPSBiW3ldO1xuICAgICAgICAgICAgICBFWzBdID49IDAgJiYgRVswXSA8PSBtICYmIEVbMV0gPj0gMCAmJiBFWzFdIDw9IGcgJiYgKGYgPSAhMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZikgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaXNIb3Jpem9udGFsKCkgPyAoKGQgfHwgaCB8fCBwIHx8IHUpICYmIChhLnByZXZlbnREZWZhdWx0ID8gYS5wcmV2ZW50RGVmYXVsdCgpIDogYS5yZXR1cm5WYWx1ZSA9ICExKSwgKChoIHx8IHUpICYmICFzIHx8IChkIHx8IHApICYmIHMpICYmIHRoaXMuc2xpZGVOZXh0KCksICgoZCB8fCBwKSAmJiAhcyB8fCAoaCB8fCB1KSAmJiBzKSAmJiB0aGlzLnNsaWRlUHJldigpKSA6ICgoZCB8fCBoIHx8IGMgfHwgdikgJiYgKGEucHJldmVudERlZmF1bHQgPyBhLnByZXZlbnREZWZhdWx0KCkgOiBhLnJldHVyblZhbHVlID0gITEpLCAoaCB8fCB2KSAmJiB0aGlzLnNsaWRlTmV4dCgpLCAoZCB8fCBjKSAmJiB0aGlzLnNsaWRlUHJldigpKSwgdGhpcy5lbWl0KFwia2V5UHJlc3NcIiwgbilcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHIoKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZC5lbmFibGVkIHx8IChtKGUpLm9uKFwia2V5ZG93blwiLCB0aGlzLmtleWJvYXJkLmhhbmRsZSksIHRoaXMua2V5Ym9hcmQuZW5hYmxlZCA9ICEwKVxuICAgICAgfSxcbiAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSByKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuZW5hYmxlZCAmJiAobShlKS5vZmYoXCJrZXlkb3duXCIsIHRoaXMua2V5Ym9hcmQuaGFuZGxlKSwgdGhpcy5rZXlib2FyZC5lbmFibGVkID0gITEpXG4gICAgICB9XG4gICAgfSxcbiAgICBfID0ge1xuICAgICAgbmFtZTogXCJrZXlib2FyZFwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGtleWJvYXJkOiB7XG4gICAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgICAgb25seUluVmlld3BvcnQ6ICEwLFxuICAgICAgICAgIHBhZ2VVcERvd246ICEwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTSh0aGlzLCB7XG4gICAgICAgICAga2V5Ym9hcmQ6IHQoe1xuICAgICAgICAgICAgZW5hYmxlZDogITFcbiAgICAgICAgICB9LCBqKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCAmJiBlLmtleWJvYXJkLmVuYWJsZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5rZXlib2FyZC5lbmFibGVkICYmIGUua2V5Ym9hcmQuZGlzYWJsZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB2YXIgVSA9IHtcbiAgICAgIGxhc3RTY3JvbGxUaW1lOiB4KCksXG4gICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB2b2lkIDAsXG4gICAgICByZWNlbnRXaGVlbEV2ZW50czogW10sXG4gICAgICBldmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbCgpLm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcImZpcmVmb3hcIikgPiAtMSA/IFwiRE9NTW91c2VTY3JvbGxcIiA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHIoKSxcbiAgICAgICAgICAgIHQgPSBcIm9ud2hlZWxcIiBpbiBlO1xuICAgICAgICAgIGlmICghdCkge1xuICAgICAgICAgICAgdmFyIGkgPSBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcIm9ud2hlZWxcIiwgXCJyZXR1cm47XCIpLCB0ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpLm9ud2hlZWxcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICF0ICYmIGUuaW1wbGVtZW50YXRpb24gJiYgZS5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmICEwICE9PSBlLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJcIiwgXCJcIikgJiYgKHQgPSBlLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJFdmVudHMud2hlZWxcIiwgXCIzLjBcIikpLCB0XG4gICAgICAgIH0oKSA/IFwid2hlZWxcIiA6IFwibW91c2V3aGVlbFwiXG4gICAgICB9LFxuICAgICAgbm9ybWFsaXplOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IDAsXG4gICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgcyA9IDAsXG4gICAgICAgICAgYSA9IDA7XG4gICAgICAgIHJldHVybiBcImRldGFpbFwiIGluIGUgJiYgKGkgPSBlLmRldGFpbCksIFwid2hlZWxEZWx0YVwiIGluIGUgJiYgKGkgPSAtZS53aGVlbERlbHRhIC8gMTIwKSwgXCJ3aGVlbERlbHRhWVwiIGluIGUgJiYgKGkgPSAtZS53aGVlbERlbHRhWSAvIDEyMCksIFwid2hlZWxEZWx0YVhcIiBpbiBlICYmICh0ID0gLWUud2hlZWxEZWx0YVggLyAxMjApLCBcImF4aXNcIiBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMgJiYgKHQgPSBpLCBpID0gMCksIHMgPSAxMCAqIHQsIGEgPSAxMCAqIGksIFwiZGVsdGFZXCIgaW4gZSAmJiAoYSA9IGUuZGVsdGFZKSwgXCJkZWx0YVhcIiBpbiBlICYmIChzID0gZS5kZWx0YVgpLCBlLnNoaWZ0S2V5ICYmICFzICYmIChzID0gYSwgYSA9IDApLCAocyB8fCBhKSAmJiBlLmRlbHRhTW9kZSAmJiAoMSA9PT0gZS5kZWx0YU1vZGUgPyAocyAqPSA0MCwgYSAqPSA0MCkgOiAocyAqPSA4MDAsIGEgKj0gODAwKSksIHMgJiYgIXQgJiYgKHQgPSBzIDwgMSA/IC0xIDogMSksIGEgJiYgIWkgJiYgKGkgPSBhIDwgMSA/IC0xIDogMSksIHtcbiAgICAgICAgICBzcGluWDogdCxcbiAgICAgICAgICBzcGluWTogaSxcbiAgICAgICAgICBwaXhlbFg6IHMsXG4gICAgICAgICAgcGl4ZWxZOiBhXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubW91c2VFbnRlcmVkID0gITBcbiAgICAgIH0sXG4gICAgICBoYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubW91c2VFbnRlcmVkID0gITFcbiAgICAgIH0sXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gZSxcbiAgICAgICAgICBpID0gdGhpcyxcbiAgICAgICAgICBzID0gaS5wYXJhbXMubW91c2V3aGVlbDtcbiAgICAgICAgaS5wYXJhbXMuY3NzTW9kZSAmJiB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhID0gaS4kZWw7XG4gICAgICAgIGlmIChcImNvbnRhaW5lclwiICE9PSBpLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAmJiAoYSA9IG0oaS5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpKSwgIWkubW91c2VFbnRlcmVkICYmICFhWzBdLmNvbnRhaW5zKHQudGFyZ2V0KSAmJiAhcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuICEwO1xuICAgICAgICB0Lm9yaWdpbmFsRXZlbnQgJiYgKHQgPSB0Lm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICB2YXIgciA9IDAsXG4gICAgICAgICAgbiA9IGkucnRsVHJhbnNsYXRlID8gLTEgOiAxLFxuICAgICAgICAgIGwgPSBVLm5vcm1hbGl6ZSh0KTtcbiAgICAgICAgaWYgKHMuZm9yY2VUb0F4aXMpXG4gICAgICAgICAgaWYgKGkuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIGlmICghKE1hdGguYWJzKGwucGl4ZWxYKSA+IE1hdGguYWJzKGwucGl4ZWxZKSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgIHIgPSAtbC5waXhlbFggKiBuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKE1hdGguYWJzKGwucGl4ZWxZKSA+IE1hdGguYWJzKGwucGl4ZWxYKSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgIHIgPSAtbC5waXhlbFlcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2UgciA9IE1hdGguYWJzKGwucGl4ZWxYKSA+IE1hdGguYWJzKGwucGl4ZWxZKSA/IC1sLnBpeGVsWCAqIG4gOiAtbC5waXhlbFk7XG4gICAgICAgIGlmICgwID09PSByKSByZXR1cm4gITA7XG4gICAgICAgIGlmIChzLmludmVydCAmJiAociA9IC1yKSwgaS5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgICAgICB2YXIgbyA9IHtcbiAgICAgICAgICAgICAgdGltZTogeCgpLFxuICAgICAgICAgICAgICBkZWx0YTogTWF0aC5hYnMociksXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKHIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZCA9IGkubW91c2V3aGVlbC5sYXN0RXZlbnRCZWZvcmVTbmFwLFxuICAgICAgICAgICAgaCA9IGQgJiYgby50aW1lIDwgZC50aW1lICsgNTAwICYmIG8uZGVsdGEgPD0gZC5kZWx0YSAmJiBvLmRpcmVjdGlvbiA9PT0gZC5kaXJlY3Rpb247XG4gICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICBpLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHZvaWQgMCwgaS5wYXJhbXMubG9vcCAmJiBpLmxvb3BGaXgoKTtcbiAgICAgICAgICAgIHZhciBwID0gaS5nZXRUcmFuc2xhdGUoKSArIHIgKiBzLnNlbnNpdGl2aXR5LFxuICAgICAgICAgICAgICB1ID0gaS5pc0JlZ2lubmluZyxcbiAgICAgICAgICAgICAgYyA9IGkuaXNFbmQ7XG4gICAgICAgICAgICBpZiAocCA+PSBpLm1pblRyYW5zbGF0ZSgpICYmIChwID0gaS5taW5UcmFuc2xhdGUoKSksIHAgPD0gaS5tYXhUcmFuc2xhdGUoKSAmJiAocCA9IGkubWF4VHJhbnNsYXRlKCkpLCBpLnNldFRyYW5zaXRpb24oMCksIGkuc2V0VHJhbnNsYXRlKHApLCBpLnVwZGF0ZVByb2dyZXNzKCksIGkudXBkYXRlQWN0aXZlSW5kZXgoKSwgaS51cGRhdGVTbGlkZXNDbGFzc2VzKCksICghdSAmJiBpLmlzQmVnaW5uaW5nIHx8ICFjICYmIGkuaXNFbmQpICYmIGkudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCBpLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaS5tb3VzZXdoZWVsLnRpbWVvdXQpLCBpLm1vdXNld2hlZWwudGltZW91dCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgdmFyIHYgPSBpLm1vdXNld2hlZWwucmVjZW50V2hlZWxFdmVudHM7XG4gICAgICAgICAgICAgIHYubGVuZ3RoID49IDE1ICYmIHYuc2hpZnQoKTtcbiAgICAgICAgICAgICAgdmFyIGYgPSB2Lmxlbmd0aCA/IHZbdi5sZW5ndGggLSAxXSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBnID0gdlswXTtcbiAgICAgICAgICAgICAgaWYgKHYucHVzaChvKSwgZiAmJiAoby5kZWx0YSA+IGYuZGVsdGEgfHwgby5kaXJlY3Rpb24gIT09IGYuZGlyZWN0aW9uKSkgdi5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKHYubGVuZ3RoID49IDE1ICYmIG8udGltZSAtIGcudGltZSA8IDUwMCAmJiBnLmRlbHRhIC0gby5kZWx0YSA+PSAxICYmIG8uZGVsdGEgPD0gNikge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gciA+IDAgPyAuOCA6IC4yO1xuICAgICAgICAgICAgICAgIGkubW91c2V3aGVlbC5sYXN0RXZlbnRCZWZvcmVTbmFwID0gbywgdi5zcGxpY2UoMCksIGkubW91c2V3aGVlbC50aW1lb3V0ID0gRSgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaS5zbGlkZVRvQ2xvc2VzdChpLnBhcmFtcy5zcGVlZCwgITAsIHZvaWQgMCwgdylcbiAgICAgICAgICAgICAgICB9KSwgMClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpLm1vdXNld2hlZWwudGltZW91dCB8fCAoaS5tb3VzZXdoZWVsLnRpbWVvdXQgPSBFKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaS5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBvLCB2LnNwbGljZSgwKSwgaS5zbGlkZVRvQ2xvc2VzdChpLnBhcmFtcy5zcGVlZCwgITAsIHZvaWQgMCwgLjUpXG4gICAgICAgICAgICAgIH0pLCA1MDApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGggfHwgaS5lbWl0KFwic2Nyb2xsXCIsIHQpLCBpLnBhcmFtcy5hdXRvcGxheSAmJiBpLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uICYmIGkuYXV0b3BsYXkuc3RvcCgpLCBwID09PSBpLm1pblRyYW5zbGF0ZSgpIHx8IHAgPT09IGkubWF4VHJhbnNsYXRlKCkpIHJldHVybiAhMFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYiA9IHtcbiAgICAgICAgICAgICAgdGltZTogeCgpLFxuICAgICAgICAgICAgICBkZWx0YTogTWF0aC5hYnMociksXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKHIpLFxuICAgICAgICAgICAgICByYXc6IGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5ID0gaS5tb3VzZXdoZWVsLnJlY2VudFdoZWVsRXZlbnRzO1xuICAgICAgICAgIHkubGVuZ3RoID49IDIgJiYgeS5zaGlmdCgpO1xuICAgICAgICAgIHZhciBUID0geS5sZW5ndGggPyB5W3kubGVuZ3RoIC0gMV0gOiB2b2lkIDA7XG4gICAgICAgICAgaWYgKHkucHVzaChiKSwgVCA/IChiLmRpcmVjdGlvbiAhPT0gVC5kaXJlY3Rpb24gfHwgYi5kZWx0YSA+IFQuZGVsdGEgfHwgYi50aW1lID4gVC50aW1lICsgMTUwKSAmJiBpLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihiKSA6IGkubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKGIpLCBpLm1vdXNld2hlZWwucmVsZWFzZVNjcm9sbChiKSkgcmV0dXJuICEwXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQucHJldmVudERlZmF1bHQgPyB0LnByZXZlbnREZWZhdWx0KCkgOiB0LnJldHVyblZhbHVlID0gITEsICExXG4gICAgICB9LFxuICAgICAgYW5pbWF0ZVNsaWRlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSBsKCk7XG4gICAgICAgIHJldHVybiAhKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgZS5kZWx0YSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEpICYmICghKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSAmJiB4KCkgLSB0aGlzLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPCB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUpICYmIChlLmRlbHRhID49IDYgJiYgeCgpIC0gdGhpcy5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lIDwgNjAgfHwgKGUuZGlyZWN0aW9uIDwgMCA/IHRoaXMuaXNFbmQgJiYgIXRoaXMucGFyYW1zLmxvb3AgfHwgdGhpcy5hbmltYXRpbmcgfHwgKHRoaXMuc2xpZGVOZXh0KCksIHRoaXMuZW1pdChcInNjcm9sbFwiLCBlLnJhdykpIDogdGhpcy5pc0JlZ2lubmluZyAmJiAhdGhpcy5wYXJhbXMubG9vcCB8fCB0aGlzLmFuaW1hdGluZyB8fCAodGhpcy5zbGlkZVByZXYoKSwgdGhpcy5lbWl0KFwic2Nyb2xsXCIsIGUucmF3KSksIHRoaXMubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA9IChuZXcgdC5EYXRlKS5nZXRUaW1lKCksICExKSkpXG4gICAgICB9LFxuICAgICAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgICAgICBpZiAoZS5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNFbmQgJiYgIXRoaXMucGFyYW1zLmxvb3AgJiYgdC5yZWxlYXNlT25FZGdlcykgcmV0dXJuICEwXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0JlZ2lubmluZyAmJiAhdGhpcy5wYXJhbXMubG9vcCAmJiB0LnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gITA7XG4gICAgICAgIHJldHVybiAhMVxuICAgICAgfSxcbiAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IFUuZXZlbnQoKTtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLmNzc01vZGUpIHJldHVybiB0aGlzLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIHRoaXMubW91c2V3aGVlbC5oYW5kbGUpLCAhMDtcbiAgICAgICAgaWYgKCFlKSByZXR1cm4gITE7XG4gICAgICAgIGlmICh0aGlzLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuICExO1xuICAgICAgICB2YXIgdCA9IHRoaXMuJGVsO1xuICAgICAgICByZXR1cm4gXCJjb250YWluZXJcIiAhPT0gdGhpcy5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgJiYgKHQgPSBtKHRoaXMucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KSksIHQub24oXCJtb3VzZWVudGVyXCIsIHRoaXMubW91c2V3aGVlbC5oYW5kbGVNb3VzZUVudGVyKSwgdC5vbihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUpLCB0Lm9uKGUsIHRoaXMubW91c2V3aGVlbC5oYW5kbGUpLCB0aGlzLm1vdXNld2hlZWwuZW5hYmxlZCA9ICEwLCAhMFxuICAgICAgfSxcbiAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSBVLmV2ZW50KCk7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5jc3NNb2RlKSByZXR1cm4gdGhpcy53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihlLCB0aGlzLm1vdXNld2hlZWwuaGFuZGxlKSwgITA7XG4gICAgICAgIGlmICghZSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoIXRoaXMubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gITE7XG4gICAgICAgIHZhciB0ID0gdGhpcy4kZWw7XG4gICAgICAgIHJldHVybiBcImNvbnRhaW5lclwiICE9PSB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAmJiAodCA9IG0odGhpcy5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpKSwgdC5vZmYoZSwgdGhpcy5tb3VzZXdoZWVsLmhhbmRsZSksIHRoaXMubW91c2V3aGVlbC5lbmFibGVkID0gITEsICEwXG4gICAgICB9XG4gICAgfSxcbiAgICBLID0ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICAgICAgaWYgKCF0aGlzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLm5hdmlnYXRpb24sXG4gICAgICAgICAgICBpID0gdC4kbmV4dEVsLFxuICAgICAgICAgICAgcyA9IHQuJHByZXZFbDtcbiAgICAgICAgICBzICYmIHMubGVuZ3RoID4gMCAmJiAodGhpcy5pc0JlZ2lubmluZyA/IHMuYWRkQ2xhc3MoZS5kaXNhYmxlZENsYXNzKSA6IHMucmVtb3ZlQ2xhc3MoZS5kaXNhYmxlZENsYXNzKSwgc1t0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHRoaXMuaXNMb2NrZWQgPyBcImFkZENsYXNzXCIgOiBcInJlbW92ZUNsYXNzXCJdKGUubG9ja0NsYXNzKSksIGkgJiYgaS5sZW5ndGggPiAwICYmICh0aGlzLmlzRW5kID8gaS5hZGRDbGFzcyhlLmRpc2FibGVkQ2xhc3MpIDogaS5yZW1vdmVDbGFzcyhlLmRpc2FibGVkQ2xhc3MpLCBpW3RoaXMucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgdGhpcy5pc0xvY2tlZCA/IFwiYWRkQ2xhc3NcIiA6IFwicmVtb3ZlQ2xhc3NcIl0oZS5sb2NrQ2xhc3MpKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25QcmV2Q2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5pc0JlZ2lubmluZyAmJiAhdGhpcy5wYXJhbXMubG9vcCB8fCB0aGlzLnNsaWRlUHJldigpXG4gICAgICB9LFxuICAgICAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5pc0VuZCAmJiAhdGhpcy5wYXJhbXMubG9vcCB8fCB0aGlzLnNsaWRlTmV4dCgpXG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSwgdCwgaSA9IHRoaXMucGFyYW1zLm5hdmlnYXRpb247XG4gICAgICAgIChpLm5leHRFbCB8fCBpLnByZXZFbCkgJiYgKGkubmV4dEVsICYmIChlID0gbShpLm5leHRFbCksIHRoaXMucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGkubmV4dEVsICYmIGUubGVuZ3RoID4gMSAmJiAxID09PSB0aGlzLiRlbC5maW5kKGkubmV4dEVsKS5sZW5ndGggJiYgKGUgPSB0aGlzLiRlbC5maW5kKGkubmV4dEVsKSkpLCBpLnByZXZFbCAmJiAodCA9IG0oaS5wcmV2RWwpLCB0aGlzLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBpLnByZXZFbCAmJiB0Lmxlbmd0aCA+IDEgJiYgMSA9PT0gdGhpcy4kZWwuZmluZChpLnByZXZFbCkubGVuZ3RoICYmICh0ID0gdGhpcy4kZWwuZmluZChpLnByZXZFbCkpKSwgZSAmJiBlLmxlbmd0aCA+IDAgJiYgZS5vbihcImNsaWNrXCIsIHRoaXMubmF2aWdhdGlvbi5vbk5leHRDbGljayksIHQgJiYgdC5sZW5ndGggPiAwICYmIHQub24oXCJjbGlja1wiLCB0aGlzLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spLCBTKHRoaXMubmF2aWdhdGlvbiwge1xuICAgICAgICAgICRuZXh0RWw6IGUsXG4gICAgICAgICAgbmV4dEVsOiBlICYmIGVbMF0sXG4gICAgICAgICAgJHByZXZFbDogdCxcbiAgICAgICAgICBwcmV2RWw6IHQgJiYgdFswXVxuICAgICAgICB9KSlcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5uYXZpZ2F0aW9uLFxuICAgICAgICAgIHQgPSBlLiRuZXh0RWwsXG4gICAgICAgICAgaSA9IGUuJHByZXZFbDtcbiAgICAgICAgdCAmJiB0Lmxlbmd0aCAmJiAodC5vZmYoXCJjbGlja1wiLCB0aGlzLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spLCB0LnJlbW92ZUNsYXNzKHRoaXMucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcykpLCBpICYmIGkubGVuZ3RoICYmIChpLm9mZihcImNsaWNrXCIsIHRoaXMubmF2aWdhdGlvbi5vblByZXZDbGljayksIGkucmVtb3ZlQ2xhc3ModGhpcy5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFogPSB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnJ0bCxcbiAgICAgICAgICB0ID0gdGhpcy5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKHQuZWwgJiYgdGhpcy5wYWdpbmF0aW9uLmVsICYmIHRoaXMucGFnaW5hdGlvbi4kZWwgJiYgMCAhPT0gdGhpcy5wYWdpbmF0aW9uLiRlbC5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgaSwgcyA9IHRoaXMudmlydHVhbCAmJiB0aGlzLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0aGlzLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHRoaXMuc2xpZGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGEgPSB0aGlzLnBhZ2luYXRpb24uJGVsLFxuICAgICAgICAgICAgciA9IHRoaXMucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHMgLSAyICogdGhpcy5sb29wZWRTbGlkZXMpIC8gdGhpcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogdGhpcy5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmxvb3AgPyAoKGkgPSBNYXRoLmNlaWwoKHRoaXMuYWN0aXZlSW5kZXggLSB0aGlzLmxvb3BlZFNsaWRlcykgLyB0aGlzLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkpID4gcyAtIDEgLSAyICogdGhpcy5sb29wZWRTbGlkZXMgJiYgKGkgLT0gcyAtIDIgKiB0aGlzLmxvb3BlZFNsaWRlcyksIGkgPiByIC0gMSAmJiAoaSAtPSByKSwgaSA8IDAgJiYgXCJidWxsZXRzXCIgIT09IHRoaXMucGFyYW1zLnBhZ2luYXRpb25UeXBlICYmIChpID0gciArIGkpKSA6IGkgPSB2b2lkIDAgIT09IHRoaXMuc25hcEluZGV4ID8gdGhpcy5zbmFwSW5kZXggOiB0aGlzLmFjdGl2ZUluZGV4IHx8IDAsIFwiYnVsbGV0c1wiID09PSB0LnR5cGUgJiYgdGhpcy5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgdGhpcy5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIG4sIGwsIG8sIGQgPSB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgICAgICAgIGlmICh0LmR5bmFtaWNCdWxsZXRzICYmICh0aGlzLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSA9IGQuZXEoMClbdGhpcy5pc0hvcml6b250YWwoKSA/IFwib3V0ZXJXaWR0aFwiIDogXCJvdXRlckhlaWdodFwiXSghMCksIGEuY3NzKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiLCB0aGlzLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqICh0LmR5bmFtaWNNYWluQnVsbGV0cyArIDQpICsgXCJweFwiKSwgdC5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHZvaWQgMCAhPT0gdGhpcy5wcmV2aW91c0luZGV4ICYmICh0aGlzLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IGkgLSB0aGlzLnByZXZpb3VzSW5kZXgsIHRoaXMucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPiB0LmR5bmFtaWNNYWluQnVsbGV0cyAtIDEgPyB0aGlzLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gdC5keW5hbWljTWFpbkJ1bGxldHMgLSAxIDogdGhpcy5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDAgJiYgKHRoaXMucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwKSksIG4gPSBpIC0gdGhpcy5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCwgbyA9ICgobCA9IG4gKyAoTWF0aC5taW4oZC5sZW5ndGgsIHQuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpKSArIG4pIC8gMiksIGQucmVtb3ZlQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiIFwiICsgdC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQgXCIgKyB0LmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0IFwiICsgdC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYgXCIgKyB0LmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2IFwiICsgdC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIiksIGEubGVuZ3RoID4gMSkgZC5lYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICB2YXIgcyA9IG0oZSksXG4gICAgICAgICAgICAgICAgYSA9IHMuaW5kZXgoKTtcbiAgICAgICAgICAgICAgYSA9PT0gaSAmJiBzLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MpLCB0LmR5bmFtaWNCdWxsZXRzICYmIChhID49IG4gJiYgYSA8PSBsICYmIHMuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIiksIGEgPT09IG4gJiYgcy5wcmV2KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIiksIGEgPT09IGwgJiYgcy5uZXh0KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIikpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGggPSBkLmVxKGkpLFxuICAgICAgICAgICAgICAgIHAgPSBoLmluZGV4KCk7XG4gICAgICAgICAgICAgIGlmIChoLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MpLCB0LmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IGQuZXEobiksIGMgPSBkLmVxKGwpLCB2ID0gbjsgdiA8PSBsOyB2ICs9IDEpIGQuZXEodikuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmxvb3ApXG4gICAgICAgICAgICAgICAgICBpZiAocCA+PSBkLmxlbmd0aCAtIHQuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSB0LmR5bmFtaWNNYWluQnVsbGV0czsgZiA+PSAwOyBmIC09IDEpIGQuZXEoZC5sZW5ndGggLSBmKS5hZGRDbGFzcyh0LmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgZC5lcShkLmxlbmd0aCAtIHQuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIilcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB1LnByZXYoKS5hZGRDbGFzcyh0LmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKSwgYy5uZXh0KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB1LnByZXYoKS5hZGRDbGFzcyh0LmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKSwgYy5uZXh0KCkuYWRkQ2xhc3ModC5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHQuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoLm1pbihkLmxlbmd0aCwgdC5keW5hbWljTWFpbkJ1bGxldHMgKyA0KSxcbiAgICAgICAgICAgICAgICB3ID0gKHRoaXMucGFnaW5hdGlvbi5idWxsZXRTaXplICogZyAtIHRoaXMucGFnaW5hdGlvbi5idWxsZXRTaXplKSAvIDIgLSBvICogdGhpcy5wYWdpbmF0aW9uLmJ1bGxldFNpemUsXG4gICAgICAgICAgICAgICAgYiA9IGUgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcbiAgICAgICAgICAgICAgZC5jc3ModGhpcy5pc0hvcml6b250YWwoKSA/IGIgOiBcInRvcFwiLCB3ICsgXCJweFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXCJmcmFjdGlvblwiID09PSB0LnR5cGUgJiYgKGEuZmluZChcIi5cIiArIHQuY3VycmVudENsYXNzKS50ZXh0KHQuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGkgKyAxKSksIGEuZmluZChcIi5cIiArIHQudG90YWxDbGFzcykudGV4dCh0LmZvcm1hdEZyYWN0aW9uVG90YWwocikpKSwgXCJwcm9ncmVzc2JhclwiID09PSB0LnR5cGUpIHtcbiAgICAgICAgICAgIHZhciB5O1xuICAgICAgICAgICAgeSA9IHQucHJvZ3Jlc3NiYXJPcHBvc2l0ZSA/IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIiA6IHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcImhvcml6b250YWxcIiA6IFwidmVydGljYWxcIjtcbiAgICAgICAgICAgIHZhciBFID0gKGkgKyAxKSAvIHIsXG4gICAgICAgICAgICAgIHggPSAxLFxuICAgICAgICAgICAgICBUID0gMTtcbiAgICAgICAgICAgIFwiaG9yaXpvbnRhbFwiID09PSB5ID8geCA9IEUgOiBUID0gRSwgYS5maW5kKFwiLlwiICsgdC5wcm9ncmVzc2JhckZpbGxDbGFzcykudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWChcIiArIHggKyBcIikgc2NhbGVZKFwiICsgVCArIFwiKVwiKS50cmFuc2l0aW9uKHRoaXMucGFyYW1zLnNwZWVkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBcImN1c3RvbVwiID09PSB0LnR5cGUgJiYgdC5yZW5kZXJDdXN0b20gPyAoYS5odG1sKHQucmVuZGVyQ3VzdG9tKHRoaXMsIGkgKyAxLCByKSksIHRoaXMuZW1pdChcInBhZ2luYXRpb25SZW5kZXJcIiwgYVswXSkpIDogdGhpcy5lbWl0KFwicGFnaW5hdGlvblVwZGF0ZVwiLCBhWzBdKSwgYVt0aGlzLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHRoaXMuaXNMb2NrZWQgPyBcImFkZENsYXNzXCIgOiBcInJlbW92ZUNsYXNzXCJdKHQubG9ja0NsYXNzKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKGUuZWwgJiYgdGhpcy5wYWdpbmF0aW9uLmVsICYmIHRoaXMucGFnaW5hdGlvbi4kZWwgJiYgMCAhPT0gdGhpcy5wYWdpbmF0aW9uLiRlbC5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMudmlydHVhbCAmJiB0aGlzLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0aGlzLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHRoaXMuc2xpZGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGkgPSB0aGlzLnBhZ2luYXRpb24uJGVsLFxuICAgICAgICAgICAgcyA9IFwiXCI7XG4gICAgICAgICAgaWYgKFwiYnVsbGV0c1wiID09PSBlLnR5cGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKCh0IC0gMiAqIHRoaXMubG9vcGVkU2xpZGVzKSAvIHRoaXMucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHRoaXMuc25hcEdyaWQubGVuZ3RoLCByID0gMDsgciA8IGE7IHIgKz0gMSkgZS5yZW5kZXJCdWxsZXQgPyBzICs9IGUucmVuZGVyQnVsbGV0LmNhbGwodGhpcywgciwgZS5idWxsZXRDbGFzcykgOiBzICs9IFwiPFwiICsgZS5idWxsZXRFbGVtZW50ICsgJyBjbGFzcz1cIicgKyBlLmJ1bGxldENsYXNzICsgJ1wiPjwvJyArIGUuYnVsbGV0RWxlbWVudCArIFwiPlwiO1xuICAgICAgICAgICAgaS5odG1sKHMpLCB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cyA9IGkuZmluZChcIi5cIiArIGUuYnVsbGV0Q2xhc3MpXG4gICAgICAgICAgfVxuICAgICAgICAgIFwiZnJhY3Rpb25cIiA9PT0gZS50eXBlICYmIChzID0gZS5yZW5kZXJGcmFjdGlvbiA/IGUucmVuZGVyRnJhY3Rpb24uY2FsbCh0aGlzLCBlLmN1cnJlbnRDbGFzcywgZS50b3RhbENsYXNzKSA6ICc8c3BhbiBjbGFzcz1cIicgKyBlLmN1cnJlbnRDbGFzcyArICdcIj48L3NwYW4+IC8gPHNwYW4gY2xhc3M9XCInICsgZS50b3RhbENsYXNzICsgJ1wiPjwvc3Bhbj4nLCBpLmh0bWwocykpLCBcInByb2dyZXNzYmFyXCIgPT09IGUudHlwZSAmJiAocyA9IGUucmVuZGVyUHJvZ3Jlc3NiYXIgPyBlLnJlbmRlclByb2dyZXNzYmFyLmNhbGwodGhpcywgZS5wcm9ncmVzc2JhckZpbGxDbGFzcykgOiAnPHNwYW4gY2xhc3M9XCInICsgZS5wcm9ncmVzc2JhckZpbGxDbGFzcyArICdcIj48L3NwYW4+JywgaS5odG1sKHMpKSwgXCJjdXN0b21cIiAhPT0gZS50eXBlICYmIHRoaXMuZW1pdChcInBhZ2luYXRpb25SZW5kZXJcIiwgdGhpcy5wYWdpbmF0aW9uLiRlbFswXSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgIHQgPSBlLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgICBpZiAodC5lbCkge1xuICAgICAgICAgIHZhciBpID0gbSh0LmVsKTtcbiAgICAgICAgICAwICE9PSBpLmxlbmd0aCAmJiAoZS5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5lbCAmJiBpLmxlbmd0aCA+IDEgJiYgKGkgPSBlLiRlbC5maW5kKHQuZWwpKSwgXCJidWxsZXRzXCIgPT09IHQudHlwZSAmJiB0LmNsaWNrYWJsZSAmJiBpLmFkZENsYXNzKHQuY2xpY2thYmxlQ2xhc3MpLCBpLmFkZENsYXNzKHQubW9kaWZpZXJDbGFzcyArIHQudHlwZSksIFwiYnVsbGV0c1wiID09PSB0LnR5cGUgJiYgdC5keW5hbWljQnVsbGV0cyAmJiAoaS5hZGRDbGFzcyhcIlwiICsgdC5tb2RpZmllckNsYXNzICsgdC50eXBlICsgXCItZHluYW1pY1wiKSwgZS5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDAsIHQuZHluYW1pY01haW5CdWxsZXRzIDwgMSAmJiAodC5keW5hbWljTWFpbkJ1bGxldHMgPSAxKSksIFwicHJvZ3Jlc3NiYXJcIiA9PT0gdC50eXBlICYmIHQucHJvZ3Jlc3NiYXJPcHBvc2l0ZSAmJiBpLmFkZENsYXNzKHQucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKSwgdC5jbGlja2FibGUgJiYgaS5vbihcImNsaWNrXCIsIFwiLlwiICsgdC5idWxsZXRDbGFzcywgKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgaSA9IG0odGhpcykuaW5kZXgoKSAqIGUucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICAgICAgZS5wYXJhbXMubG9vcCAmJiAoaSArPSBlLmxvb3BlZFNsaWRlcyksIGUuc2xpZGVUbyhpKVxuICAgICAgICAgIH0pKSwgUyhlLnBhZ2luYXRpb24sIHtcbiAgICAgICAgICAgICRlbDogaSxcbiAgICAgICAgICAgIGVsOiBpWzBdXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKGUuZWwgJiYgdGhpcy5wYWdpbmF0aW9uLmVsICYmIHRoaXMucGFnaW5hdGlvbi4kZWwgJiYgMCAhPT0gdGhpcy5wYWdpbmF0aW9uLiRlbC5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMucGFnaW5hdGlvbi4kZWw7XG4gICAgICAgICAgdC5yZW1vdmVDbGFzcyhlLmhpZGRlbkNsYXNzKSwgdC5yZW1vdmVDbGFzcyhlLm1vZGlmaWVyQ2xhc3MgKyBlLnR5cGUpLCB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cyAmJiB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhlLmJ1bGxldEFjdGl2ZUNsYXNzKSwgZS5jbGlja2FibGUgJiYgdC5vZmYoXCJjbGlja1wiLCBcIi5cIiArIGUuYnVsbGV0Q2xhc3MpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIEogPSB7XG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnNjcm9sbGJhci5lbCAmJiB0aGlzLnNjcm9sbGJhci5lbCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5zY3JvbGxiYXIsXG4gICAgICAgICAgICB0ID0gdGhpcy5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgICBpID0gdGhpcy5wcm9ncmVzcyxcbiAgICAgICAgICAgIHMgPSBlLmRyYWdTaXplLFxuICAgICAgICAgICAgYSA9IGUudHJhY2tTaXplLFxuICAgICAgICAgICAgciA9IGUuJGRyYWdFbCxcbiAgICAgICAgICAgIG4gPSBlLiRlbCxcbiAgICAgICAgICAgIGwgPSB0aGlzLnBhcmFtcy5zY3JvbGxiYXIsXG4gICAgICAgICAgICBvID0gcyxcbiAgICAgICAgICAgIGQgPSAoYSAtIHMpICogaTtcbiAgICAgICAgICB0ID8gKGQgPSAtZCkgPiAwID8gKG8gPSBzIC0gZCwgZCA9IDApIDogLWQgKyBzID4gYSAmJiAobyA9IGEgKyBkKSA6IGQgPCAwID8gKG8gPSBzICsgZCwgZCA9IDApIDogZCArIHMgPiBhICYmIChvID0gYSAtIGQpLCB0aGlzLmlzSG9yaXpvbnRhbCgpID8gKHIudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyBkICsgXCJweCwgMCwgMClcIiksIHJbMF0uc3R5bGUud2lkdGggPSBvICsgXCJweFwiKSA6IChyLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBkICsgXCJweCwgMClcIiksIHJbMF0uc3R5bGUuaGVpZ2h0ID0gbyArIFwicHhcIiksIGwuaGlkZSAmJiAoY2xlYXJUaW1lb3V0KHRoaXMuc2Nyb2xsYmFyLnRpbWVvdXQpLCBuWzBdLnN0eWxlLm9wYWNpdHkgPSAxLCB0aGlzLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dCgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgblswXS5zdHlsZS5vcGFjaXR5ID0gMCwgbi50cmFuc2l0aW9uKDQwMClcbiAgICAgICAgICB9KSwgMWUzKSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMucGFyYW1zLnNjcm9sbGJhci5lbCAmJiB0aGlzLnNjcm9sbGJhci5lbCAmJiB0aGlzLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZSlcbiAgICAgIH0sXG4gICAgICB1cGRhdGVTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5zY3JvbGxiYXIuZWwgJiYgdGhpcy5zY3JvbGxiYXIuZWwpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMuc2Nyb2xsYmFyLFxuICAgICAgICAgICAgdCA9IGUuJGRyYWdFbCxcbiAgICAgICAgICAgIGkgPSBlLiRlbDtcbiAgICAgICAgICB0WzBdLnN0eWxlLndpZHRoID0gXCJcIiwgdFswXS5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuICAgICAgICAgIHZhciBzLCBhID0gdGhpcy5pc0hvcml6b250YWwoKSA/IGlbMF0ub2Zmc2V0V2lkdGggOiBpWzBdLm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgIHIgPSB0aGlzLnNpemUgLyB0aGlzLnZpcnR1YWxTaXplLFxuICAgICAgICAgICAgbiA9IHIgKiAoYSAvIHRoaXMuc2l6ZSk7XG4gICAgICAgICAgcyA9IFwiYXV0b1wiID09PSB0aGlzLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPyBhICogciA6IHBhcnNlSW50KHRoaXMucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApLCB0aGlzLmlzSG9yaXpvbnRhbCgpID8gdFswXS5zdHlsZS53aWR0aCA9IHMgKyBcInB4XCIgOiB0WzBdLnN0eWxlLmhlaWdodCA9IHMgKyBcInB4XCIsIGlbMF0uc3R5bGUuZGlzcGxheSA9IHIgPj0gMSA/IFwibm9uZVwiIDogXCJcIiwgdGhpcy5wYXJhbXMuc2Nyb2xsYmFyLmhpZGUgJiYgKGlbMF0uc3R5bGUub3BhY2l0eSA9IDApLCBTKGUsIHtcbiAgICAgICAgICAgIHRyYWNrU2l6ZTogYSxcbiAgICAgICAgICAgIGRpdmlkZXI6IHIsXG4gICAgICAgICAgICBtb3ZlRGl2aWRlcjogbixcbiAgICAgICAgICAgIGRyYWdTaXplOiBzXG4gICAgICAgICAgfSksIGUuJGVsW3RoaXMucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgdGhpcy5pc0xvY2tlZCA/IFwiYWRkQ2xhc3NcIiA6IFwicmVtb3ZlQ2xhc3NcIl0odGhpcy5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldFBvaW50ZXJQb3NpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcInRvdWNoc3RhcnRcIiA9PT0gZS50eXBlIHx8IFwidG91Y2htb3ZlXCIgPT09IGUudHlwZSA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYIDogXCJ0b3VjaHN0YXJ0XCIgPT09IGUudHlwZSB8fCBcInRvdWNobW92ZVwiID09PSBlLnR5cGUgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WVxuICAgICAgfSxcbiAgICAgIHNldERyYWdQb3NpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQsIGkgPSB0aGlzLnNjcm9sbGJhcixcbiAgICAgICAgICBzID0gdGhpcy5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgYSA9IGkuJGVsLFxuICAgICAgICAgIHIgPSBpLmRyYWdTaXplLFxuICAgICAgICAgIG4gPSBpLnRyYWNrU2l6ZSxcbiAgICAgICAgICBsID0gaS5kcmFnU3RhcnRQb3M7XG4gICAgICAgIHQgPSAoaS5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBhLm9mZnNldCgpW3RoaXMuaXNIb3Jpem9udGFsKCkgPyBcImxlZnRcIiA6IFwidG9wXCJdIC0gKG51bGwgIT09IGwgPyBsIDogciAvIDIpKSAvIChuIC0gciksIHQgPSBNYXRoLm1heChNYXRoLm1pbih0LCAxKSwgMCksIHMgJiYgKHQgPSAxIC0gdCk7XG4gICAgICAgIHZhciBvID0gdGhpcy5taW5UcmFuc2xhdGUoKSArICh0aGlzLm1heFRyYW5zbGF0ZSgpIC0gdGhpcy5taW5UcmFuc2xhdGUoKSkgKiB0O1xuICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzKG8pLCB0aGlzLnNldFRyYW5zbGF0ZShvKSwgdGhpcy51cGRhdGVBY3RpdmVJbmRleCgpLCB0aGlzLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKVxuICAgICAgfSxcbiAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IHRoaXMucGFyYW1zLnNjcm9sbGJhcixcbiAgICAgICAgICBpID0gdGhpcy5zY3JvbGxiYXIsXG4gICAgICAgICAgcyA9IHRoaXMuJHdyYXBwZXJFbCxcbiAgICAgICAgICBhID0gaS4kZWwsXG4gICAgICAgICAgciA9IGkuJGRyYWdFbDtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXIuaXNUb3VjaGVkID0gITAsIHRoaXMuc2Nyb2xsYmFyLmRyYWdTdGFydFBvcyA9IGUudGFyZ2V0ID09PSByWzBdIHx8IGUudGFyZ2V0ID09PSByID8gaS5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmlzSG9yaXpvbnRhbCgpID8gXCJsZWZ0XCIgOiBcInRvcFwiXSA6IG51bGwsIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgcy50cmFuc2l0aW9uKDEwMCksIHIudHJhbnNpdGlvbigxMDApLCBpLnNldERyYWdQb3NpdGlvbihlKSwgY2xlYXJUaW1lb3V0KHRoaXMuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KSwgYS50cmFuc2l0aW9uKDApLCB0LmhpZGUgJiYgYS5jc3MoXCJvcGFjaXR5XCIsIDEpLCB0aGlzLnBhcmFtcy5jc3NNb2RlICYmIHRoaXMuJHdyYXBwZXJFbC5jc3MoXCJzY3JvbGwtc25hcC10eXBlXCIsIFwibm9uZVwiKSwgdGhpcy5lbWl0KFwic2Nyb2xsYmFyRHJhZ1N0YXJ0XCIsIGUpXG4gICAgICB9LFxuICAgICAgb25EcmFnTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnNjcm9sbGJhcixcbiAgICAgICAgICBpID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgIHMgPSB0LiRlbCxcbiAgICAgICAgICBhID0gdC4kZHJhZ0VsO1xuICAgICAgICB0aGlzLnNjcm9sbGJhci5pc1RvdWNoZWQgJiYgKGUucHJldmVudERlZmF1bHQgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gITEsIHQuc2V0RHJhZ1Bvc2l0aW9uKGUpLCBpLnRyYW5zaXRpb24oMCksIHMudHJhbnNpdGlvbigwKSwgYS50cmFuc2l0aW9uKDApLCB0aGlzLmVtaXQoXCJzY3JvbGxiYXJEcmFnTW92ZVwiLCBlKSlcbiAgICAgIH0sXG4gICAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5wYXJhbXMuc2Nyb2xsYmFyLFxuICAgICAgICAgIGkgPSB0aGlzLnNjcm9sbGJhcixcbiAgICAgICAgICBzID0gdGhpcy4kd3JhcHBlckVsLFxuICAgICAgICAgIGEgPSBpLiRlbDtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXIuaXNUb3VjaGVkICYmICh0aGlzLnNjcm9sbGJhci5pc1RvdWNoZWQgPSAhMSwgdGhpcy5wYXJhbXMuY3NzTW9kZSAmJiAodGhpcy4kd3JhcHBlckVsLmNzcyhcInNjcm9sbC1zbmFwLXR5cGVcIiwgXCJcIiksIHMudHJhbnNpdGlvbihcIlwiKSksIHQuaGlkZSAmJiAoY2xlYXJUaW1lb3V0KHRoaXMuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KSwgdGhpcy5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQgPSBFKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYS5jc3MoXCJvcGFjaXR5XCIsIDApLCBhLnRyYW5zaXRpb24oNDAwKVxuICAgICAgICB9KSwgMWUzKSksIHRoaXMuZW1pdChcInNjcm9sbGJhckRyYWdFbmRcIiwgZSksIHQuc25hcE9uUmVsZWFzZSAmJiB0aGlzLnNsaWRlVG9DbG9zZXN0KCkpXG4gICAgICB9LFxuICAgICAgZW5hYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHtcbiAgICAgICAgICB2YXIgZSA9IHIoKSxcbiAgICAgICAgICAgIHQgPSB0aGlzLnNjcm9sbGJhcixcbiAgICAgICAgICAgIGkgPSB0aGlzLnRvdWNoRXZlbnRzVG91Y2gsXG4gICAgICAgICAgICBzID0gdGhpcy50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgICAgICBhID0gdGhpcy5wYXJhbXMsXG4gICAgICAgICAgICBuID0gdGhpcy5zdXBwb3J0LFxuICAgICAgICAgICAgbCA9IHQuJGVsWzBdLFxuICAgICAgICAgICAgbyA9ICEoIW4ucGFzc2l2ZUxpc3RlbmVyIHx8ICFhLnBhc3NpdmVMaXN0ZW5lcnMpICYmIHtcbiAgICAgICAgICAgICAgcGFzc2l2ZTogITEsXG4gICAgICAgICAgICAgIGNhcHR1cmU6ICExXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZCA9ICEoIW4ucGFzc2l2ZUxpc3RlbmVyIHx8ICFhLnBhc3NpdmVMaXN0ZW5lcnMpICYmIHtcbiAgICAgICAgICAgICAgcGFzc2l2ZTogITAsXG4gICAgICAgICAgICAgIGNhcHR1cmU6ICExXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIG4udG91Y2ggPyAobC5hZGRFdmVudExpc3RlbmVyKGkuc3RhcnQsIHRoaXMuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBvKSwgbC5hZGRFdmVudExpc3RlbmVyKGkubW92ZSwgdGhpcy5zY3JvbGxiYXIub25EcmFnTW92ZSwgbyksIGwuYWRkRXZlbnRMaXN0ZW5lcihpLmVuZCwgdGhpcy5zY3JvbGxiYXIub25EcmFnRW5kLCBkKSkgOiAobC5hZGRFdmVudExpc3RlbmVyKHMuc3RhcnQsIHRoaXMuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBvKSwgZS5hZGRFdmVudExpc3RlbmVyKHMubW92ZSwgdGhpcy5zY3JvbGxiYXIub25EcmFnTW92ZSwgbyksIGUuYWRkRXZlbnRMaXN0ZW5lcihzLmVuZCwgdGhpcy5zY3JvbGxiYXIub25EcmFnRW5kLCBkKSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc2FibGVEcmFnZ2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnNjcm9sbGJhci5lbCkge1xuICAgICAgICAgIHZhciBlID0gcigpLFxuICAgICAgICAgICAgdCA9IHRoaXMuc2Nyb2xsYmFyLFxuICAgICAgICAgICAgaSA9IHRoaXMudG91Y2hFdmVudHNUb3VjaCxcbiAgICAgICAgICAgIHMgPSB0aGlzLnRvdWNoRXZlbnRzRGVza3RvcCxcbiAgICAgICAgICAgIGEgPSB0aGlzLnBhcmFtcyxcbiAgICAgICAgICAgIG4gPSB0aGlzLnN1cHBvcnQsXG4gICAgICAgICAgICBsID0gdC4kZWxbMF0sXG4gICAgICAgICAgICBvID0gISghbi5wYXNzaXZlTGlzdGVuZXIgfHwgIWEucGFzc2l2ZUxpc3RlbmVycykgJiYge1xuICAgICAgICAgICAgICBwYXNzaXZlOiAhMSxcbiAgICAgICAgICAgICAgY2FwdHVyZTogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkID0gISghbi5wYXNzaXZlTGlzdGVuZXIgfHwgIWEucGFzc2l2ZUxpc3RlbmVycykgJiYge1xuICAgICAgICAgICAgICBwYXNzaXZlOiAhMCxcbiAgICAgICAgICAgICAgY2FwdHVyZTogITFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgbi50b3VjaCA/IChsLnJlbW92ZUV2ZW50TGlzdGVuZXIoaS5zdGFydCwgdGhpcy5zY3JvbGxiYXIub25EcmFnU3RhcnQsIG8pLCBsLnJlbW92ZUV2ZW50TGlzdGVuZXIoaS5tb3ZlLCB0aGlzLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBvKSwgbC5yZW1vdmVFdmVudExpc3RlbmVyKGkuZW5kLCB0aGlzLnNjcm9sbGJhci5vbkRyYWdFbmQsIGQpKSA6IChsLnJlbW92ZUV2ZW50TGlzdGVuZXIocy5zdGFydCwgdGhpcy5zY3JvbGxiYXIub25EcmFnU3RhcnQsIG8pLCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIocy5tb3ZlLCB0aGlzLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBvKSwgZS5yZW1vdmVFdmVudExpc3RlbmVyKHMuZW5kLCB0aGlzLnNjcm9sbGJhci5vbkRyYWdFbmQsIGQpKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJhbXMuc2Nyb2xsYmFyLmVsKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzLnNjcm9sbGJhcixcbiAgICAgICAgICAgIHQgPSB0aGlzLiRlbCxcbiAgICAgICAgICAgIGkgPSB0aGlzLnBhcmFtcy5zY3JvbGxiYXIsXG4gICAgICAgICAgICBzID0gbShpLmVsKTtcbiAgICAgICAgICB0aGlzLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBpLmVsICYmIHMubGVuZ3RoID4gMSAmJiAxID09PSB0LmZpbmQoaS5lbCkubGVuZ3RoICYmIChzID0gdC5maW5kKGkuZWwpKTtcbiAgICAgICAgICB2YXIgYSA9IHMuZmluZChcIi5cIiArIHRoaXMucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpO1xuICAgICAgICAgIDAgPT09IGEubGVuZ3RoICYmIChhID0gbSgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzICsgJ1wiPjwvZGl2PicpLCBzLmFwcGVuZChhKSksIFMoZSwge1xuICAgICAgICAgICAgJGVsOiBzLFxuICAgICAgICAgICAgZWw6IHNbMF0sXG4gICAgICAgICAgICAkZHJhZ0VsOiBhLFxuICAgICAgICAgICAgZHJhZ0VsOiBhWzBdXG4gICAgICAgICAgfSksIGkuZHJhZ2dhYmxlICYmIGUuZW5hYmxlRHJhZ2dhYmxlKClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBRID0ge1xuICAgICAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgaSA9IHRoaXMucnRsLFxuICAgICAgICAgIHMgPSBtKGUpLFxuICAgICAgICAgIGEgPSBpID8gLTEgOiAxLFxuICAgICAgICAgIHIgPSBzLmF0dHIoXCJkYXRhLXN3aXBlci1wYXJhbGxheFwiKSB8fCBcIjBcIixcbiAgICAgICAgICBuID0gcy5hdHRyKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgteFwiKSxcbiAgICAgICAgICBsID0gcy5hdHRyKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgteVwiKSxcbiAgICAgICAgICBvID0gcy5hdHRyKFwiZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVcIiksXG4gICAgICAgICAgZCA9IHMuYXR0cihcImRhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHlcIik7XG4gICAgICAgIGlmIChuIHx8IGwgPyAobiA9IG4gfHwgXCIwXCIsIGwgPSBsIHx8IFwiMFwiKSA6IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAobiA9IHIsIGwgPSBcIjBcIikgOiAobCA9IHIsIG4gPSBcIjBcIiksIG4gPSBuLmluZGV4T2YoXCIlXCIpID49IDAgPyBwYXJzZUludChuLCAxMCkgKiB0ICogYSArIFwiJVwiIDogbiAqIHQgKiBhICsgXCJweFwiLCBsID0gbC5pbmRleE9mKFwiJVwiKSA+PSAwID8gcGFyc2VJbnQobCwgMTApICogdCArIFwiJVwiIDogbCAqIHQgKyBcInB4XCIsIG51bGwgIT0gZCkge1xuICAgICAgICAgIHZhciBoID0gZCAtIChkIC0gMSkgKiAoMSAtIE1hdGguYWJzKHQpKTtcbiAgICAgICAgICBzWzBdLnN0eWxlLm9wYWNpdHkgPSBoXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgPT0gbykgcy50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIG4gKyBcIiwgXCIgKyBsICsgXCIsIDBweClcIik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwID0gbyAtIChvIC0gMSkgKiAoMSAtIE1hdGguYWJzKHQpKTtcbiAgICAgICAgICBzLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgbiArIFwiLCBcIiArIGwgKyBcIiwgMHB4KSBzY2FsZShcIiArIHAgKyBcIilcIilcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgdCA9IGUuJGVsLFxuICAgICAgICAgIGkgPSBlLnNsaWRlcyxcbiAgICAgICAgICBzID0gZS5wcm9ncmVzcyxcbiAgICAgICAgICBhID0gZS5zbmFwR3JpZDtcbiAgICAgICAgdC5jaGlsZHJlbihcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV1cIikuZWFjaCgoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBlLnBhcmFsbGF4LnNldFRyYW5zZm9ybSh0LCBzKVxuICAgICAgICB9KSksIGkuZWFjaCgoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICB2YXIgciA9IHQucHJvZ3Jlc3M7XG4gICAgICAgICAgZS5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIFwiYXV0b1wiICE9PSBlLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIChyICs9IE1hdGguY2VpbChpIC8gMikgLSBzICogKGEubGVuZ3RoIC0gMSkpLCByID0gTWF0aC5taW4oTWF0aC5tYXgociwgLTEpLCAxKSwgbSh0KS5maW5kKFwiW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXVwiKS5lYWNoKChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZS5wYXJhbGxheC5zZXRUcmFuc2Zvcm0odCwgcilcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdGhpcy5wYXJhbXMuc3BlZWQpO1xuICAgICAgICB0aGlzLiRlbC5maW5kKFwiW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXVwiKS5lYWNoKChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBpID0gbSh0KSxcbiAgICAgICAgICAgIHMgPSBwYXJzZUludChpLmF0dHIoXCJkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvblwiKSwgMTApIHx8IGU7XG4gICAgICAgICAgMCA9PT0gZSAmJiAocyA9IDApLCBpLnRyYW5zaXRpb24ocylcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfSxcbiAgICBlZSA9IHtcbiAgICAgIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgICAgIHZhciB0ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYLFxuICAgICAgICAgIGkgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVksXG4gICAgICAgICAgcyA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWCxcbiAgICAgICAgICBhID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHMgLSB0LCAyKSArIE1hdGgucG93KGEgLSBpLCAyKSlcbiAgICAgIH0sXG4gICAgICBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnN1cHBvcnQsXG4gICAgICAgICAgaSA9IHRoaXMucGFyYW1zLnpvb20sXG4gICAgICAgICAgcyA9IHRoaXMuem9vbSxcbiAgICAgICAgICBhID0gcy5nZXN0dXJlO1xuICAgICAgICBpZiAocy5mYWtlR2VzdHVyZVRvdWNoZWQgPSAhMSwgcy5mYWtlR2VzdHVyZU1vdmVkID0gITEsICF0Lmdlc3R1cmVzKSB7XG4gICAgICAgICAgaWYgKFwidG91Y2hzdGFydFwiICE9PSBlLnR5cGUgfHwgXCJ0b3VjaHN0YXJ0XCIgPT09IGUudHlwZSAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuO1xuICAgICAgICAgIHMuZmFrZUdlc3R1cmVUb3VjaGVkID0gITAsIGEuc2NhbGVTdGFydCA9IGVlLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSlcbiAgICAgICAgfVxuICAgICAgICBhLiRzbGlkZUVsICYmIGEuJHNsaWRlRWwubGVuZ3RoIHx8IChhLiRzbGlkZUVsID0gbShlLnRhcmdldCkuY2xvc2VzdChcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3MpLCAwID09PSBhLiRzbGlkZUVsLmxlbmd0aCAmJiAoYS4kc2xpZGVFbCA9IHRoaXMuc2xpZGVzLmVxKHRoaXMuYWN0aXZlSW5kZXgpKSwgYS4kaW1hZ2VFbCA9IGEuJHNsaWRlRWwuZmluZChcImltZywgc3ZnLCBjYW52YXMsIHBpY3R1cmUsIC5zd2lwZXItem9vbS10YXJnZXRcIiksIGEuJGltYWdlV3JhcEVsID0gYS4kaW1hZ2VFbC5wYXJlbnQoXCIuXCIgKyBpLmNvbnRhaW5lckNsYXNzKSwgYS5tYXhSYXRpbyA9IGEuJGltYWdlV3JhcEVsLmF0dHIoXCJkYXRhLXN3aXBlci16b29tXCIpIHx8IGkubWF4UmF0aW8sIDAgIT09IGEuJGltYWdlV3JhcEVsLmxlbmd0aCkgPyAoYS4kaW1hZ2VFbCAmJiBhLiRpbWFnZUVsLnRyYW5zaXRpb24oMCksIHRoaXMuem9vbS5pc1NjYWxpbmcgPSAhMCkgOiBhLiRpbWFnZUVsID0gdm9pZCAwXG4gICAgICB9LFxuICAgICAgb25HZXN0dXJlQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuc3VwcG9ydCxcbiAgICAgICAgICBpID0gdGhpcy5wYXJhbXMuem9vbSxcbiAgICAgICAgICBzID0gdGhpcy56b29tLFxuICAgICAgICAgIGEgPSBzLmdlc3R1cmU7XG4gICAgICAgIGlmICghdC5nZXN0dXJlcykge1xuICAgICAgICAgIGlmIChcInRvdWNobW92ZVwiICE9PSBlLnR5cGUgfHwgXCJ0b3VjaG1vdmVcIiA9PT0gZS50eXBlICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm47XG4gICAgICAgICAgcy5mYWtlR2VzdHVyZU1vdmVkID0gITAsIGEuc2NhbGVNb3ZlID0gZWUuZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKVxuICAgICAgICB9XG4gICAgICAgIGEuJGltYWdlRWwgJiYgMCAhPT0gYS4kaW1hZ2VFbC5sZW5ndGggPyAodC5nZXN0dXJlcyA/IHMuc2NhbGUgPSBlLnNjYWxlICogcy5jdXJyZW50U2NhbGUgOiBzLnNjYWxlID0gYS5zY2FsZU1vdmUgLyBhLnNjYWxlU3RhcnQgKiBzLmN1cnJlbnRTY2FsZSwgcy5zY2FsZSA+IGEubWF4UmF0aW8gJiYgKHMuc2NhbGUgPSBhLm1heFJhdGlvIC0gMSArIE1hdGgucG93KHMuc2NhbGUgLSBhLm1heFJhdGlvICsgMSwgLjUpKSwgcy5zY2FsZSA8IGkubWluUmF0aW8gJiYgKHMuc2NhbGUgPSBpLm1pblJhdGlvICsgMSAtIE1hdGgucG93KGkubWluUmF0aW8gLSBzLnNjYWxlICsgMSwgLjUpKSwgYS4kaW1hZ2VFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyBzLnNjYWxlICsgXCIpXCIpKSA6IFwiZ2VzdHVyZWNoYW5nZVwiID09PSBlLnR5cGUgJiYgcy5vbkdlc3R1cmVTdGFydChlKVxuICAgICAgfSxcbiAgICAgIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmRldmljZSxcbiAgICAgICAgICBpID0gdGhpcy5zdXBwb3J0LFxuICAgICAgICAgIHMgPSB0aGlzLnBhcmFtcy56b29tLFxuICAgICAgICAgIGEgPSB0aGlzLnpvb20sXG4gICAgICAgICAgciA9IGEuZ2VzdHVyZTtcbiAgICAgICAgaWYgKCFpLmdlc3R1cmVzKSB7XG4gICAgICAgICAgaWYgKCFhLmZha2VHZXN0dXJlVG91Y2hlZCB8fCAhYS5mYWtlR2VzdHVyZU1vdmVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKFwidG91Y2hlbmRcIiAhPT0gZS50eXBlIHx8IFwidG91Y2hlbmRcIiA9PT0gZS50eXBlICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhdC5hbmRyb2lkKSByZXR1cm47XG4gICAgICAgICAgYS5mYWtlR2VzdHVyZVRvdWNoZWQgPSAhMSwgYS5mYWtlR2VzdHVyZU1vdmVkID0gITFcbiAgICAgICAgfVxuICAgICAgICByLiRpbWFnZUVsICYmIDAgIT09IHIuJGltYWdlRWwubGVuZ3RoICYmIChhLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oYS5zY2FsZSwgci5tYXhSYXRpbyksIHMubWluUmF0aW8pLCByLiRpbWFnZUVsLnRyYW5zaXRpb24odGhpcy5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZShcIiArIGEuc2NhbGUgKyBcIilcIiksIGEuY3VycmVudFNjYWxlID0gYS5zY2FsZSwgYS5pc1NjYWxpbmcgPSAhMSwgMSA9PT0gYS5zY2FsZSAmJiAoci4kc2xpZGVFbCA9IHZvaWQgMCkpXG4gICAgICB9LFxuICAgICAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuZGV2aWNlLFxuICAgICAgICAgIGkgPSB0aGlzLnpvb20sXG4gICAgICAgICAgcyA9IGkuZ2VzdHVyZSxcbiAgICAgICAgICBhID0gaS5pbWFnZTtcbiAgICAgICAgcy4kaW1hZ2VFbCAmJiAwICE9PSBzLiRpbWFnZUVsLmxlbmd0aCAmJiAoYS5pc1RvdWNoZWQgfHwgKHQuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBhLmlzVG91Y2hlZCA9ICEwLCBhLnRvdWNoZXNTdGFydC54ID0gXCJ0b3VjaHN0YXJ0XCIgPT09IGUudHlwZSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsIGEudG91Y2hlc1N0YXJ0LnkgPSBcInRvdWNoc3RhcnRcIiA9PT0gZS50eXBlID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSkpXG4gICAgICB9LFxuICAgICAgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy56b29tLFxuICAgICAgICAgIGkgPSB0Lmdlc3R1cmUsXG4gICAgICAgICAgcyA9IHQuaW1hZ2UsXG4gICAgICAgICAgYSA9IHQudmVsb2NpdHk7XG4gICAgICAgIGlmIChpLiRpbWFnZUVsICYmIDAgIT09IGkuJGltYWdlRWwubGVuZ3RoICYmICh0aGlzLmFsbG93Q2xpY2sgPSAhMSwgcy5pc1RvdWNoZWQgJiYgaS4kc2xpZGVFbCkpIHtcbiAgICAgICAgICBzLmlzTW92ZWQgfHwgKHMud2lkdGggPSBpLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoLCBzLmhlaWdodCA9IGkuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0LCBzLnN0YXJ0WCA9IFQoaS4kaW1hZ2VXcmFwRWxbMF0sIFwieFwiKSB8fCAwLCBzLnN0YXJ0WSA9IFQoaS4kaW1hZ2VXcmFwRWxbMF0sIFwieVwiKSB8fCAwLCBpLnNsaWRlV2lkdGggPSBpLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoLCBpLnNsaWRlSGVpZ2h0ID0gaS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQsIGkuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCksIHRoaXMucnRsICYmIChzLnN0YXJ0WCA9IC1zLnN0YXJ0WCwgcy5zdGFydFkgPSAtcy5zdGFydFkpKTtcbiAgICAgICAgICB2YXIgciA9IHMud2lkdGggKiB0LnNjYWxlLFxuICAgICAgICAgICAgbiA9IHMuaGVpZ2h0ICogdC5zY2FsZTtcbiAgICAgICAgICBpZiAoIShyIDwgaS5zbGlkZVdpZHRoICYmIG4gPCBpLnNsaWRlSGVpZ2h0KSkge1xuICAgICAgICAgICAgaWYgKHMubWluWCA9IE1hdGgubWluKGkuc2xpZGVXaWR0aCAvIDIgLSByIC8gMiwgMCksIHMubWF4WCA9IC1zLm1pblgsIHMubWluWSA9IE1hdGgubWluKGkuc2xpZGVIZWlnaHQgLyAyIC0gbiAvIDIsIDApLCBzLm1heFkgPSAtcy5taW5ZLCBzLnRvdWNoZXNDdXJyZW50LnggPSBcInRvdWNobW92ZVwiID09PSBlLnR5cGUgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLCBzLnRvdWNoZXNDdXJyZW50LnkgPSBcInRvdWNobW92ZVwiID09PSBlLnR5cGUgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZLCAhcy5pc01vdmVkICYmICF0LmlzU2NhbGluZykge1xuICAgICAgICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihzLm1pblgpID09PSBNYXRoLmZsb29yKHMuc3RhcnRYKSAmJiBzLnRvdWNoZXNDdXJyZW50LnggPCBzLnRvdWNoZXNTdGFydC54IHx8IE1hdGguZmxvb3Iocy5tYXhYKSA9PT0gTWF0aC5mbG9vcihzLnN0YXJ0WCkgJiYgcy50b3VjaGVzQ3VycmVudC54ID4gcy50b3VjaGVzU3RhcnQueCkpIHJldHVybiB2b2lkKHMuaXNUb3VjaGVkID0gITEpO1xuICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3Iocy5taW5ZKSA9PT0gTWF0aC5mbG9vcihzLnN0YXJ0WSkgJiYgcy50b3VjaGVzQ3VycmVudC55IDwgcy50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKHMubWF4WSkgPT09IE1hdGguZmxvb3Iocy5zdGFydFkpICYmIHMudG91Y2hlc0N1cnJlbnQueSA+IHMudG91Y2hlc1N0YXJ0LnkpKSByZXR1cm4gdm9pZChzLmlzVG91Y2hlZCA9ICExKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgcy5pc01vdmVkID0gITAsIHMuY3VycmVudFggPSBzLnRvdWNoZXNDdXJyZW50LnggLSBzLnRvdWNoZXNTdGFydC54ICsgcy5zdGFydFgsIHMuY3VycmVudFkgPSBzLnRvdWNoZXNDdXJyZW50LnkgLSBzLnRvdWNoZXNTdGFydC55ICsgcy5zdGFydFksIHMuY3VycmVudFggPCBzLm1pblggJiYgKHMuY3VycmVudFggPSBzLm1pblggKyAxIC0gTWF0aC5wb3cocy5taW5YIC0gcy5jdXJyZW50WCArIDEsIC44KSksIHMuY3VycmVudFggPiBzLm1heFggJiYgKHMuY3VycmVudFggPSBzLm1heFggLSAxICsgTWF0aC5wb3cocy5jdXJyZW50WCAtIHMubWF4WCArIDEsIC44KSksIHMuY3VycmVudFkgPCBzLm1pblkgJiYgKHMuY3VycmVudFkgPSBzLm1pblkgKyAxIC0gTWF0aC5wb3cocy5taW5ZIC0gcy5jdXJyZW50WSArIDEsIC44KSksIHMuY3VycmVudFkgPiBzLm1heFkgJiYgKHMuY3VycmVudFkgPSBzLm1heFkgLSAxICsgTWF0aC5wb3cocy5jdXJyZW50WSAtIHMubWF4WSArIDEsIC44KSksIGEucHJldlBvc2l0aW9uWCB8fCAoYS5wcmV2UG9zaXRpb25YID0gcy50b3VjaGVzQ3VycmVudC54KSwgYS5wcmV2UG9zaXRpb25ZIHx8IChhLnByZXZQb3NpdGlvblkgPSBzLnRvdWNoZXNDdXJyZW50LnkpLCBhLnByZXZUaW1lIHx8IChhLnByZXZUaW1lID0gRGF0ZS5ub3coKSksIGEueCA9IChzLnRvdWNoZXNDdXJyZW50LnggLSBhLnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSBhLnByZXZUaW1lKSAvIDIsIGEueSA9IChzLnRvdWNoZXNDdXJyZW50LnkgLSBhLnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSBhLnByZXZUaW1lKSAvIDIsIE1hdGguYWJzKHMudG91Y2hlc0N1cnJlbnQueCAtIGEucHJldlBvc2l0aW9uWCkgPCAyICYmIChhLnggPSAwKSwgTWF0aC5hYnMocy50b3VjaGVzQ3VycmVudC55IC0gYS5wcmV2UG9zaXRpb25ZKSA8IDIgJiYgKGEueSA9IDApLCBhLnByZXZQb3NpdGlvblggPSBzLnRvdWNoZXNDdXJyZW50LngsIGEucHJldlBvc2l0aW9uWSA9IHMudG91Y2hlc0N1cnJlbnQueSwgYS5wcmV2VGltZSA9IERhdGUubm93KCksIGkuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgcy5jdXJyZW50WCArIFwicHgsIFwiICsgcy5jdXJyZW50WSArIFwicHgsMClcIilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy56b29tLFxuICAgICAgICAgIHQgPSBlLmdlc3R1cmUsXG4gICAgICAgICAgaSA9IGUuaW1hZ2UsXG4gICAgICAgICAgcyA9IGUudmVsb2NpdHk7XG4gICAgICAgIGlmICh0LiRpbWFnZUVsICYmIDAgIT09IHQuJGltYWdlRWwubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCFpLmlzVG91Y2hlZCB8fCAhaS5pc01vdmVkKSByZXR1cm4gaS5pc1RvdWNoZWQgPSAhMSwgdm9pZChpLmlzTW92ZWQgPSAhMSk7XG4gICAgICAgICAgaS5pc1RvdWNoZWQgPSAhMSwgaS5pc01vdmVkID0gITE7XG4gICAgICAgICAgdmFyIGEgPSAzMDAsXG4gICAgICAgICAgICByID0gMzAwLFxuICAgICAgICAgICAgbiA9IHMueCAqIGEsXG4gICAgICAgICAgICBsID0gaS5jdXJyZW50WCArIG4sXG4gICAgICAgICAgICBvID0gcy55ICogcixcbiAgICAgICAgICAgIGQgPSBpLmN1cnJlbnRZICsgbztcbiAgICAgICAgICAwICE9PSBzLnggJiYgKGEgPSBNYXRoLmFicygobCAtIGkuY3VycmVudFgpIC8gcy54KSksIDAgIT09IHMueSAmJiAociA9IE1hdGguYWJzKChkIC0gaS5jdXJyZW50WSkgLyBzLnkpKTtcbiAgICAgICAgICB2YXIgaCA9IE1hdGgubWF4KGEsIHIpO1xuICAgICAgICAgIGkuY3VycmVudFggPSBsLCBpLmN1cnJlbnRZID0gZDtcbiAgICAgICAgICB2YXIgcCA9IGkud2lkdGggKiBlLnNjYWxlLFxuICAgICAgICAgICAgdSA9IGkuaGVpZ2h0ICogZS5zY2FsZTtcbiAgICAgICAgICBpLm1pblggPSBNYXRoLm1pbih0LnNsaWRlV2lkdGggLyAyIC0gcCAvIDIsIDApLCBpLm1heFggPSAtaS5taW5YLCBpLm1pblkgPSBNYXRoLm1pbih0LnNsaWRlSGVpZ2h0IC8gMiAtIHUgLyAyLCAwKSwgaS5tYXhZID0gLWkubWluWSwgaS5jdXJyZW50WCA9IE1hdGgubWF4KE1hdGgubWluKGkuY3VycmVudFgsIGkubWF4WCksIGkubWluWCksIGkuY3VycmVudFkgPSBNYXRoLm1heChNYXRoLm1pbihpLmN1cnJlbnRZLCBpLm1heFkpLCBpLm1pblkpLCB0LiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKGgpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaS5jdXJyZW50WCArIFwicHgsIFwiICsgaS5jdXJyZW50WSArIFwicHgsMClcIilcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuem9vbSxcbiAgICAgICAgICB0ID0gZS5nZXN0dXJlO1xuICAgICAgICB0LiRzbGlkZUVsICYmIHRoaXMucHJldmlvdXNJbmRleCAhPT0gdGhpcy5hY3RpdmVJbmRleCAmJiAodC4kaW1hZ2VFbCAmJiB0LiRpbWFnZUVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKVwiKSwgdC4kaW1hZ2VXcmFwRWwgJiYgdC4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLCBlLnNjYWxlID0gMSwgZS5jdXJyZW50U2NhbGUgPSAxLCB0LiRzbGlkZUVsID0gdm9pZCAwLCB0LiRpbWFnZUVsID0gdm9pZCAwLCB0LiRpbWFnZVdyYXBFbCA9IHZvaWQgMClcbiAgICAgIH0sXG4gICAgICB0b2dnbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy56b29tO1xuICAgICAgICB0LnNjYWxlICYmIDEgIT09IHQuc2NhbGUgPyB0Lm91dCgpIDogdC5pbihlKVxuICAgICAgfSxcbiAgICAgIGluOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCwgaSwgcywgYSwgciwgbiwgbCwgbywgZCwgaCwgcCwgdSwgYywgdiwgZiwgbSwgZyA9IHRoaXMuem9vbSxcbiAgICAgICAgICB3ID0gdGhpcy5wYXJhbXMuem9vbSxcbiAgICAgICAgICBiID0gZy5nZXN0dXJlLFxuICAgICAgICAgIHkgPSBnLmltYWdlO1xuICAgICAgICAoYi4kc2xpZGVFbCB8fCAodGhpcy5wYXJhbXMudmlydHVhbCAmJiB0aGlzLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgdGhpcy52aXJ0dWFsID8gYi4kc2xpZGVFbCA9IHRoaXMuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpIDogYi4kc2xpZGVFbCA9IHRoaXMuc2xpZGVzLmVxKHRoaXMuYWN0aXZlSW5kZXgpLCBiLiRpbWFnZUVsID0gYi4kc2xpZGVFbC5maW5kKFwiaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldFwiKSwgYi4kaW1hZ2VXcmFwRWwgPSBiLiRpbWFnZUVsLnBhcmVudChcIi5cIiArIHcuY29udGFpbmVyQ2xhc3MpKSwgYi4kaW1hZ2VFbCAmJiAwICE9PSBiLiRpbWFnZUVsLmxlbmd0aCkgJiYgKGIuJHNsaWRlRWwuYWRkQ2xhc3MoXCJcIiArIHcuem9vbWVkU2xpZGVDbGFzcyksIHZvaWQgMCA9PT0geS50b3VjaGVzU3RhcnQueCAmJiBlID8gKHQgPSBcInRvdWNoZW5kXCIgPT09IGUudHlwZSA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLCBpID0gXCJ0b3VjaGVuZFwiID09PSBlLnR5cGUgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSkgOiAodCA9IHkudG91Y2hlc1N0YXJ0LngsIGkgPSB5LnRvdWNoZXNTdGFydC55KSwgZy5zY2FsZSA9IGIuJGltYWdlV3JhcEVsLmF0dHIoXCJkYXRhLXN3aXBlci16b29tXCIpIHx8IHcubWF4UmF0aW8sIGcuY3VycmVudFNjYWxlID0gYi4kaW1hZ2VXcmFwRWwuYXR0cihcImRhdGEtc3dpcGVyLXpvb21cIikgfHwgdy5tYXhSYXRpbywgZSA/IChmID0gYi4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aCwgbSA9IGIuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0LCBzID0gYi4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0ICsgZiAvIDIgLSB0LCBhID0gYi4kc2xpZGVFbC5vZmZzZXQoKS50b3AgKyBtIC8gMiAtIGksIGwgPSBiLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoLCBvID0gYi4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQsIGQgPSBsICogZy5zY2FsZSwgaCA9IG8gKiBnLnNjYWxlLCBjID0gLShwID0gTWF0aC5taW4oZiAvIDIgLSBkIC8gMiwgMCkpLCB2ID0gLSh1ID0gTWF0aC5taW4obSAvIDIgLSBoIC8gMiwgMCkpLCAociA9IHMgKiBnLnNjYWxlKSA8IHAgJiYgKHIgPSBwKSwgciA+IGMgJiYgKHIgPSBjKSwgKG4gPSBhICogZy5zY2FsZSkgPCB1ICYmIChuID0gdSksIG4gPiB2ICYmIChuID0gdikpIDogKHIgPSAwLCBuID0gMCksIGIuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHIgKyBcInB4LCBcIiArIG4gKyBcInB4LDApXCIpLCBiLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyBnLnNjYWxlICsgXCIpXCIpKVxuICAgICAgfSxcbiAgICAgIG91dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuem9vbSxcbiAgICAgICAgICB0ID0gdGhpcy5wYXJhbXMuem9vbSxcbiAgICAgICAgICBpID0gZS5nZXN0dXJlO1xuICAgICAgICBpLiRzbGlkZUVsIHx8ICh0aGlzLnBhcmFtcy52aXJ0dWFsICYmIHRoaXMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiB0aGlzLnZpcnR1YWwgPyBpLiRzbGlkZUVsID0gdGhpcy4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgdGhpcy5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykgOiBpLiRzbGlkZUVsID0gdGhpcy5zbGlkZXMuZXEodGhpcy5hY3RpdmVJbmRleCksIGkuJGltYWdlRWwgPSBpLiRzbGlkZUVsLmZpbmQoXCJpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpLCBpLiRpbWFnZVdyYXBFbCA9IGkuJGltYWdlRWwucGFyZW50KFwiLlwiICsgdC5jb250YWluZXJDbGFzcykpLCBpLiRpbWFnZUVsICYmIDAgIT09IGkuJGltYWdlRWwubGVuZ3RoICYmIChlLnNjYWxlID0gMSwgZS5jdXJyZW50U2NhbGUgPSAxLCBpLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLCBpLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSlcIiksIGkuJHNsaWRlRWwucmVtb3ZlQ2xhc3MoXCJcIiArIHQuem9vbWVkU2xpZGVDbGFzcyksIGkuJHNsaWRlRWwgPSB2b2lkIDApXG4gICAgICB9LFxuICAgICAgdG9nZ2xlR2VzdHVyZXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy56b29tLFxuICAgICAgICAgIGkgPSB0LnNsaWRlU2VsZWN0b3IsXG4gICAgICAgICAgcyA9IHQucGFzc2l2ZUxpc3RlbmVyO1xuICAgICAgICB0aGlzLiR3cmFwcGVyRWxbZV0oXCJnZXN0dXJlc3RhcnRcIiwgaSwgdC5vbkdlc3R1cmVTdGFydCwgcyksIHRoaXMuJHdyYXBwZXJFbFtlXShcImdlc3R1cmVjaGFuZ2VcIiwgaSwgdC5vbkdlc3R1cmVDaGFuZ2UsIHMpLCB0aGlzLiR3cmFwcGVyRWxbZV0oXCJnZXN0dXJlZW5kXCIsIGksIHQub25HZXN0dXJlRW5kLCBzKVxuICAgICAgfSxcbiAgICAgIGVuYWJsZUdlc3R1cmVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgfHwgKHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSAhMCwgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKFwib25cIikpXG4gICAgICB9LFxuICAgICAgZGlzYWJsZUdlc3R1cmVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgJiYgKHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSAhMSwgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKFwib2ZmXCIpKVxuICAgICAgfSxcbiAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuc3VwcG9ydCxcbiAgICAgICAgICB0ID0gdGhpcy56b29tO1xuICAgICAgICBpZiAoIXQuZW5hYmxlZCkge1xuICAgICAgICAgIHQuZW5hYmxlZCA9ICEwO1xuICAgICAgICAgIHZhciBpID0gIShcInRvdWNoc3RhcnRcIiAhPT0gdGhpcy50b3VjaEV2ZW50cy5zdGFydCB8fCAhZS5wYXNzaXZlTGlzdGVuZXIgfHwgIXRoaXMucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMpICYmIHtcbiAgICAgICAgICAgICAgcGFzc2l2ZTogITAsXG4gICAgICAgICAgICAgIGNhcHR1cmU6ICExXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcyA9ICFlLnBhc3NpdmVMaXN0ZW5lciB8fCB7XG4gICAgICAgICAgICAgIHBhc3NpdmU6ICExLFxuICAgICAgICAgICAgICBjYXB0dXJlOiAhMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGEgPSBcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3M7XG4gICAgICAgICAgdGhpcy56b29tLnBhc3NpdmVMaXN0ZW5lciA9IGksIHRoaXMuem9vbS5zbGlkZVNlbGVjdG9yID0gYSwgZS5nZXN0dXJlcyA/ICh0aGlzLiR3cmFwcGVyRWwub24odGhpcy50b3VjaEV2ZW50cy5zdGFydCwgdGhpcy56b29tLmVuYWJsZUdlc3R1cmVzLCBpKSwgdGhpcy4kd3JhcHBlckVsLm9uKHRoaXMudG91Y2hFdmVudHMuZW5kLCB0aGlzLnpvb20uZGlzYWJsZUdlc3R1cmVzLCBpKSkgOiBcInRvdWNoc3RhcnRcIiA9PT0gdGhpcy50b3VjaEV2ZW50cy5zdGFydCAmJiAodGhpcy4kd3JhcHBlckVsLm9uKHRoaXMudG91Y2hFdmVudHMuc3RhcnQsIGEsIHQub25HZXN0dXJlU3RhcnQsIGkpLCB0aGlzLiR3cmFwcGVyRWwub24odGhpcy50b3VjaEV2ZW50cy5tb3ZlLCBhLCB0Lm9uR2VzdHVyZUNoYW5nZSwgcyksIHRoaXMuJHdyYXBwZXJFbC5vbih0aGlzLnRvdWNoRXZlbnRzLmVuZCwgYSwgdC5vbkdlc3R1cmVFbmQsIGkpLCB0aGlzLnRvdWNoRXZlbnRzLmNhbmNlbCAmJiB0aGlzLiR3cmFwcGVyRWwub24odGhpcy50b3VjaEV2ZW50cy5jYW5jZWwsIGEsIHQub25HZXN0dXJlRW5kLCBpKSksIHRoaXMuJHdyYXBwZXJFbC5vbih0aGlzLnRvdWNoRXZlbnRzLm1vdmUsIFwiLlwiICsgdGhpcy5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcywgdC5vblRvdWNoTW92ZSwgcylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnpvb207XG4gICAgICAgIGlmIChlLmVuYWJsZWQpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuc3VwcG9ydDtcbiAgICAgICAgICB0aGlzLnpvb20uZW5hYmxlZCA9ICExO1xuICAgICAgICAgIHZhciBpID0gIShcInRvdWNoc3RhcnRcIiAhPT0gdGhpcy50b3VjaEV2ZW50cy5zdGFydCB8fCAhdC5wYXNzaXZlTGlzdGVuZXIgfHwgIXRoaXMucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMpICYmIHtcbiAgICAgICAgICAgICAgcGFzc2l2ZTogITAsXG4gICAgICAgICAgICAgIGNhcHR1cmU6ICExXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcyA9ICF0LnBhc3NpdmVMaXN0ZW5lciB8fCB7XG4gICAgICAgICAgICAgIHBhc3NpdmU6ICExLFxuICAgICAgICAgICAgICBjYXB0dXJlOiAhMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGEgPSBcIi5cIiArIHRoaXMucGFyYW1zLnNsaWRlQ2xhc3M7XG4gICAgICAgICAgdC5nZXN0dXJlcyA/ICh0aGlzLiR3cmFwcGVyRWwub2ZmKHRoaXMudG91Y2hFdmVudHMuc3RhcnQsIHRoaXMuem9vbS5lbmFibGVHZXN0dXJlcywgaSksIHRoaXMuJHdyYXBwZXJFbC5vZmYodGhpcy50b3VjaEV2ZW50cy5lbmQsIHRoaXMuem9vbS5kaXNhYmxlR2VzdHVyZXMsIGkpKSA6IFwidG91Y2hzdGFydFwiID09PSB0aGlzLnRvdWNoRXZlbnRzLnN0YXJ0ICYmICh0aGlzLiR3cmFwcGVyRWwub2ZmKHRoaXMudG91Y2hFdmVudHMuc3RhcnQsIGEsIGUub25HZXN0dXJlU3RhcnQsIGkpLCB0aGlzLiR3cmFwcGVyRWwub2ZmKHRoaXMudG91Y2hFdmVudHMubW92ZSwgYSwgZS5vbkdlc3R1cmVDaGFuZ2UsIHMpLCB0aGlzLiR3cmFwcGVyRWwub2ZmKHRoaXMudG91Y2hFdmVudHMuZW5kLCBhLCBlLm9uR2VzdHVyZUVuZCwgaSksIHRoaXMudG91Y2hFdmVudHMuY2FuY2VsICYmIHRoaXMuJHdyYXBwZXJFbC5vZmYodGhpcy50b3VjaEV2ZW50cy5jYW5jZWwsIGEsIGUub25HZXN0dXJlRW5kLCBpKSksIHRoaXMuJHdyYXBwZXJFbC5vZmYodGhpcy50b3VjaEV2ZW50cy5tb3ZlLCBcIi5cIiArIHRoaXMucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MsIGUub25Ub3VjaE1vdmUsIHMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRlID0ge1xuICAgICAgbG9hZEluU2xpZGU6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKTtcbiAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgIHMgPSBpLnBhcmFtcy5sYXp5O1xuICAgICAgICBpZiAodm9pZCAwICE9PSBlICYmIDAgIT09IGkuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBhID0gaS52aXJ0dWFsICYmIGkucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IGkuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIGkucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIGUgKyAnXCJdJykgOiBpLnNsaWRlcy5lcShlKSxcbiAgICAgICAgICAgIHIgPSBhLmZpbmQoXCIuXCIgKyBzLmVsZW1lbnRDbGFzcyArIFwiOm5vdCguXCIgKyBzLmxvYWRlZENsYXNzICsgXCIpOm5vdCguXCIgKyBzLmxvYWRpbmdDbGFzcyArIFwiKVwiKTtcbiAgICAgICAgICAhYS5oYXNDbGFzcyhzLmVsZW1lbnRDbGFzcykgfHwgYS5oYXNDbGFzcyhzLmxvYWRlZENsYXNzKSB8fCBhLmhhc0NsYXNzKHMubG9hZGluZ0NsYXNzKSB8fCByLnB1c2goYVswXSksIDAgIT09IHIubGVuZ3RoICYmIHIuZWFjaCgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciByID0gbShlKTtcbiAgICAgICAgICAgIHIuYWRkQ2xhc3Mocy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAgICAgdmFyIG4gPSByLmF0dHIoXCJkYXRhLWJhY2tncm91bmRcIiksXG4gICAgICAgICAgICAgIGwgPSByLmF0dHIoXCJkYXRhLXNyY1wiKSxcbiAgICAgICAgICAgICAgbyA9IHIuYXR0cihcImRhdGEtc3Jjc2V0XCIpLFxuICAgICAgICAgICAgICBkID0gci5hdHRyKFwiZGF0YS1zaXplc1wiKSxcbiAgICAgICAgICAgICAgaCA9IHIucGFyZW50KFwicGljdHVyZVwiKTtcbiAgICAgICAgICAgIGkubG9hZEltYWdlKHJbMF0sIGwgfHwgbiwgbywgZCwgITEsIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IGkgJiYgaSAmJiAoIWkgfHwgaS5wYXJhbXMpICYmICFpLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIGlmIChuID8gKHIuY3NzKFwiYmFja2dyb3VuZC1pbWFnZVwiLCAndXJsKFwiJyArIG4gKyAnXCIpJyksIHIucmVtb3ZlQXR0cihcImRhdGEtYmFja2dyb3VuZFwiKSkgOiAobyAmJiAoci5hdHRyKFwic3Jjc2V0XCIsIG8pLCByLnJlbW92ZUF0dHIoXCJkYXRhLXNyY3NldFwiKSksIGQgJiYgKHIuYXR0cihcInNpemVzXCIsIGQpLCByLnJlbW92ZUF0dHIoXCJkYXRhLXNpemVzXCIpKSwgaC5sZW5ndGggJiYgaC5jaGlsZHJlbihcInNvdXJjZVwiKS5lYWNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG0oZSk7XG4gICAgICAgICAgICAgICAgICAgIHQuYXR0cihcImRhdGEtc3Jjc2V0XCIpICYmICh0LmF0dHIoXCJzcmNzZXRcIiwgdC5hdHRyKFwiZGF0YS1zcmNzZXRcIikpLCB0LnJlbW92ZUF0dHIoXCJkYXRhLXNyY3NldFwiKSlcbiAgICAgICAgICAgICAgICAgIH0pKSwgbCAmJiAoci5hdHRyKFwic3JjXCIsIGwpLCByLnJlbW92ZUF0dHIoXCJkYXRhLXNyY1wiKSkpLCByLmFkZENsYXNzKHMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHMubG9hZGluZ0NsYXNzKSwgYS5maW5kKFwiLlwiICsgcy5wcmVsb2FkZXJDbGFzcykucmVtb3ZlKCksIGkucGFyYW1zLmxvb3AgJiYgdCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGUgPSBhLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChhLmhhc0NsYXNzKGkucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwID0gaS4kd3JhcHBlckVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgZSArICdcIl06bm90KC4nICsgaS5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaS5sYXp5LmxvYWRJblNsaWRlKHAuaW5kZXgoKSwgITEpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGkuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIGkucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIGUgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgIGkubGF6eS5sb2FkSW5TbGlkZSh1LmluZGV4KCksICExKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpLmVtaXQoXCJsYXp5SW1hZ2VSZWFkeVwiLCBhWzBdLCByWzBdKSwgaS5wYXJhbXMuYXV0b0hlaWdodCAmJiBpLnVwZGF0ZUF1dG9IZWlnaHQoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSksIGkuZW1pdChcImxhenlJbWFnZUxvYWRcIiwgYVswXSwgclswXSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgIHQgPSBlLiR3cmFwcGVyRWwsXG4gICAgICAgICAgaSA9IGUucGFyYW1zLFxuICAgICAgICAgIHMgPSBlLnNsaWRlcyxcbiAgICAgICAgICBhID0gZS5hY3RpdmVJbmRleCxcbiAgICAgICAgICByID0gZS52aXJ0dWFsICYmIGkudmlydHVhbC5lbmFibGVkLFxuICAgICAgICAgIG4gPSBpLmxhenksXG4gICAgICAgICAgbCA9IGkuc2xpZGVzUGVyVmlldztcblxuICAgICAgICBmdW5jdGlvbiBvKGUpIHtcbiAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgaWYgKHQuY2hpbGRyZW4oXCIuXCIgKyBpLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIGUgKyAnXCJdJykubGVuZ3RoKSByZXR1cm4gITBcbiAgICAgICAgICB9IGVsc2UgaWYgKHNbZV0pIHJldHVybiAhMDtcbiAgICAgICAgICByZXR1cm4gITFcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGQoZSkge1xuICAgICAgICAgIHJldHVybiByID8gbShlKS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgOiBtKGUpLmluZGV4KClcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJhdXRvXCIgPT09IGwgJiYgKGwgPSAwKSwgZS5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCB8fCAoZS5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9ICEwKSwgZS5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB0LmNoaWxkcmVuKFwiLlwiICsgaS5zbGlkZVZpc2libGVDbGFzcykuZWFjaCgoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgaSA9IHIgPyBtKHQpLmF0dHIoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSA6IG0odCkuaW5kZXgoKTtcbiAgICAgICAgICBlLmxhenkubG9hZEluU2xpZGUoaSlcbiAgICAgICAgfSkpO1xuICAgICAgICBlbHNlIGlmIChsID4gMSlcbiAgICAgICAgICBmb3IgKHZhciBoID0gYTsgaCA8IGEgKyBsOyBoICs9IDEpIG8oaCkgJiYgZS5sYXp5LmxvYWRJblNsaWRlKGgpO1xuICAgICAgICBlbHNlIGUubGF6eS5sb2FkSW5TbGlkZShhKTtcbiAgICAgICAgaWYgKG4ubG9hZFByZXZOZXh0KVxuICAgICAgICAgIGlmIChsID4gMSB8fCBuLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBuLmxvYWRQcmV2TmV4dEFtb3VudCA+IDEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHAgPSBuLmxvYWRQcmV2TmV4dEFtb3VudCwgdSA9IGwsIGMgPSBNYXRoLm1pbihhICsgdSArIE1hdGgubWF4KHAsIHUpLCBzLmxlbmd0aCksIHYgPSBNYXRoLm1heChhIC0gTWF0aC5tYXgodSwgcCksIDApLCBmID0gYSArIGw7IGYgPCBjOyBmICs9IDEpIG8oZikgJiYgZS5sYXp5LmxvYWRJblNsaWRlKGYpO1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IHY7IGcgPCBhOyBnICs9IDEpIG8oZykgJiYgZS5sYXp5LmxvYWRJblNsaWRlKGcpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB3ID0gdC5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgICAgICAgdy5sZW5ndGggPiAwICYmIGUubGF6eS5sb2FkSW5TbGlkZShkKHcpKTtcbiAgICAgICAgICAgIHZhciBiID0gdC5jaGlsZHJlbihcIi5cIiArIGkuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgYi5sZW5ndGggPiAwICYmIGUubGF6eS5sb2FkSW5TbGlkZShkKGIpKVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGllID0ge1xuICAgICAgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgaSwgcywgYSwgciwgbiwgbCA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgZm9yIChzID0gLTEsIGkgPSBlLmxlbmd0aDsgaSAtIHMgPiAxOykgZVthID0gaSArIHMgPj4gMV0gPD0gdCA/IHMgPSBhIDogaSA9IGE7XG4gICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9IGUsIHRoaXMueSA9IHQsIHRoaXMubGFzdEluZGV4ID0gZS5sZW5ndGggLSAxLCB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gZSA/IChuID0gbCh0aGlzLngsIGUpLCByID0gbiAtIDEsIChlIC0gdGhpcy54W3JdKSAqICh0aGlzLnlbbl0gLSB0aGlzLnlbcl0pIC8gKHRoaXMueFtuXSAtIHRoaXMueFtyXSkgKyB0aGlzLnlbcl0pIDogMFxuICAgICAgICB9LCB0aGlzXG4gICAgICB9LFxuICAgICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnNwbGluZSB8fCAodGhpcy5jb250cm9sbGVyLnNwbGluZSA9IHRoaXMucGFyYW1zLmxvb3AgPyBuZXcgaWUuTGluZWFyU3BsaW5lKHRoaXMuc2xpZGVzR3JpZCwgZS5zbGlkZXNHcmlkKSA6IG5ldyBpZS5MaW5lYXJTcGxpbmUodGhpcy5zbmFwR3JpZCwgZS5zbmFwR3JpZCkpXG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgaSwgcywgYSA9IHRoaXMsXG4gICAgICAgICAgciA9IGEuY29udHJvbGxlci5jb250cm9sLFxuICAgICAgICAgIG4gPSBhLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIGZ1bmN0aW9uIGwoZSkge1xuICAgICAgICAgIHZhciB0ID0gYS5ydGxUcmFuc2xhdGUgPyAtYS50cmFuc2xhdGUgOiBhLnRyYW5zbGF0ZTtcbiAgICAgICAgICBcInNsaWRlXCIgPT09IGEucGFyYW1zLmNvbnRyb2xsZXIuYnkgJiYgKGEuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGUpLCBzID0gLWEuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXQpKSwgcyAmJiBcImNvbnRhaW5lclwiICE9PSBhLnBhcmFtcy5jb250cm9sbGVyLmJ5IHx8IChpID0gKGUubWF4VHJhbnNsYXRlKCkgLSBlLm1pblRyYW5zbGF0ZSgpKSAvIChhLm1heFRyYW5zbGF0ZSgpIC0gYS5taW5UcmFuc2xhdGUoKSksIHMgPSAodCAtIGEubWluVHJhbnNsYXRlKCkpICogaSArIGUubWluVHJhbnNsYXRlKCkpLCBhLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UgJiYgKHMgPSBlLm1heFRyYW5zbGF0ZSgpIC0gcyksIGUudXBkYXRlUHJvZ3Jlc3MocyksIGUuc2V0VHJhbnNsYXRlKHMsIGEpLCBlLnVwZGF0ZUFjdGl2ZUluZGV4KCksIGUudXBkYXRlU2xpZGVzQ2xhc3NlcygpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocikpXG4gICAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbyArPSAxKSByW29dICE9PSB0ICYmIHJbb10gaW5zdGFuY2VvZiBuICYmIGwocltvXSk7XG4gICAgICAgIGVsc2UgciBpbnN0YW5jZW9mIG4gJiYgdCAhPT0gciAmJiBsKHIpXG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdmFyIGksIHMgPSB0aGlzLFxuICAgICAgICAgIGEgPSBzLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHIgPSBzLmNvbnRyb2xsZXIuY29udHJvbDtcblxuICAgICAgICBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICB0LnNldFRyYW5zaXRpb24oZSwgcyksIDAgIT09IGUgJiYgKHQudHJhbnNpdGlvblN0YXJ0KCksIHQucGFyYW1zLmF1dG9IZWlnaHQgJiYgRSgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdC51cGRhdGVBdXRvSGVpZ2h0KClcbiAgICAgICAgICB9KSksIHQuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByICYmICh0LnBhcmFtcy5sb29wICYmIFwic2xpZGVcIiA9PT0gcy5wYXJhbXMuY29udHJvbGxlci5ieSAmJiB0Lmxvb3BGaXgoKSwgdC50cmFuc2l0aW9uRW5kKCkpXG4gICAgICAgICAgfSkpKVxuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHIpKVxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByLmxlbmd0aDsgaSArPSAxKSByW2ldICE9PSB0ICYmIHJbaV0gaW5zdGFuY2VvZiBhICYmIG4ocltpXSk7XG4gICAgICAgIGVsc2UgciBpbnN0YW5jZW9mIGEgJiYgdCAhPT0gciAmJiBuKHIpXG4gICAgICB9XG4gICAgfSxcbiAgICBzZSA9IHtcbiAgICAgIG1ha2VFbEZvY3VzYWJsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUuYXR0cihcInRhYkluZGV4XCIsIFwiMFwiKSwgZVxuICAgICAgfSxcbiAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUuYXR0cihcInRhYkluZGV4XCIsIFwiLTFcIiksIGVcbiAgICAgIH0sXG4gICAgICBhZGRFbFJvbGU6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHJldHVybiBlLmF0dHIoXCJyb2xlXCIsIHQpLCBlXG4gICAgICB9LFxuICAgICAgYWRkRWxMYWJlbDogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIGUuYXR0cihcImFyaWEtbGFiZWxcIiwgdCksIGVcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlRWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsICEwKSwgZVxuICAgICAgfSxcbiAgICAgIGVuYWJsZUVsOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLCAhMSksIGVcbiAgICAgIH0sXG4gICAgICBvbkVudGVyS2V5OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IHRoaXMucGFyYW1zLmExMXk7XG4gICAgICAgIGlmICgxMyA9PT0gZS5rZXlDb2RlKSB7XG4gICAgICAgICAgdmFyIGkgPSBtKGUudGFyZ2V0KTtcbiAgICAgICAgICB0aGlzLm5hdmlnYXRpb24gJiYgdGhpcy5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgaS5pcyh0aGlzLm5hdmlnYXRpb24uJG5leHRFbCkgJiYgKHRoaXMuaXNFbmQgJiYgIXRoaXMucGFyYW1zLmxvb3AgfHwgdGhpcy5zbGlkZU5leHQoKSwgdGhpcy5pc0VuZCA/IHRoaXMuYTExeS5ub3RpZnkodC5sYXN0U2xpZGVNZXNzYWdlKSA6IHRoaXMuYTExeS5ub3RpZnkodC5uZXh0U2xpZGVNZXNzYWdlKSksIHRoaXMubmF2aWdhdGlvbiAmJiB0aGlzLm5hdmlnYXRpb24uJHByZXZFbCAmJiBpLmlzKHRoaXMubmF2aWdhdGlvbi4kcHJldkVsKSAmJiAodGhpcy5pc0JlZ2lubmluZyAmJiAhdGhpcy5wYXJhbXMubG9vcCB8fCB0aGlzLnNsaWRlUHJldigpLCB0aGlzLmlzQmVnaW5uaW5nID8gdGhpcy5hMTF5Lm5vdGlmeSh0LmZpcnN0U2xpZGVNZXNzYWdlKSA6IHRoaXMuYTExeS5ub3RpZnkodC5wcmV2U2xpZGVNZXNzYWdlKSksIHRoaXMucGFnaW5hdGlvbiAmJiBpLmlzKFwiLlwiICsgdGhpcy5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykgJiYgaVswXS5jbGljaygpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBub3RpZnk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5hMTF5LmxpdmVSZWdpb247XG4gICAgICAgIDAgIT09IHQubGVuZ3RoICYmICh0Lmh0bWwoXCJcIiksIHQuaHRtbChlKSlcbiAgICAgIH0sXG4gICAgICB1cGRhdGVOYXZpZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXJhbXMubG9vcCAmJiB0aGlzLm5hdmlnYXRpb24pIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMubmF2aWdhdGlvbixcbiAgICAgICAgICAgIHQgPSBlLiRuZXh0RWwsXG4gICAgICAgICAgICBpID0gZS4kcHJldkVsO1xuICAgICAgICAgIGkgJiYgaS5sZW5ndGggPiAwICYmICh0aGlzLmlzQmVnaW5uaW5nID8gKHRoaXMuYTExeS5kaXNhYmxlRWwoaSksIHRoaXMuYTExeS5tYWtlRWxOb3RGb2N1c2FibGUoaSkpIDogKHRoaXMuYTExeS5lbmFibGVFbChpKSwgdGhpcy5hMTF5Lm1ha2VFbEZvY3VzYWJsZShpKSkpLCB0ICYmIHQubGVuZ3RoID4gMCAmJiAodGhpcy5pc0VuZCA/ICh0aGlzLmExMXkuZGlzYWJsZUVsKHQpLCB0aGlzLmExMXkubWFrZUVsTm90Rm9jdXNhYmxlKHQpKSA6ICh0aGlzLmExMXkuZW5hYmxlRWwodCksIHRoaXMuYTExeS5tYWtlRWxGb2N1c2FibGUodCkpKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlUGFnaW5hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgdCA9IGUucGFyYW1zLmExMXk7XG4gICAgICAgIGUucGFnaW5hdGlvbiAmJiBlLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBlLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBlLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggJiYgZS5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaCgoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICB2YXIgcyA9IG0oaSk7XG4gICAgICAgICAgZS5hMTF5Lm1ha2VFbEZvY3VzYWJsZShzKSwgZS5hMTF5LmFkZEVsUm9sZShzLCBcImJ1dHRvblwiKSwgZS5hMTF5LmFkZEVsTGFiZWwocywgdC5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIHMuaW5kZXgoKSArIDEpKVxuICAgICAgICB9KSlcbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuJGVsLmFwcGVuZCh0aGlzLmExMXkubGl2ZVJlZ2lvbik7XG4gICAgICAgIHZhciBlLCB0LCBpID0gdGhpcy5wYXJhbXMuYTExeTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uICYmIHRoaXMubmF2aWdhdGlvbi4kbmV4dEVsICYmIChlID0gdGhpcy5uYXZpZ2F0aW9uLiRuZXh0RWwpLCB0aGlzLm5hdmlnYXRpb24gJiYgdGhpcy5uYXZpZ2F0aW9uLiRwcmV2RWwgJiYgKHQgPSB0aGlzLm5hdmlnYXRpb24uJHByZXZFbCksIGUgJiYgKHRoaXMuYTExeS5tYWtlRWxGb2N1c2FibGUoZSksIHRoaXMuYTExeS5hZGRFbFJvbGUoZSwgXCJidXR0b25cIiksIHRoaXMuYTExeS5hZGRFbExhYmVsKGUsIGkubmV4dFNsaWRlTWVzc2FnZSksIGUub24oXCJrZXlkb3duXCIsIHRoaXMuYTExeS5vbkVudGVyS2V5KSksIHQgJiYgKHRoaXMuYTExeS5tYWtlRWxGb2N1c2FibGUodCksIHRoaXMuYTExeS5hZGRFbFJvbGUodCwgXCJidXR0b25cIiksIHRoaXMuYTExeS5hZGRFbExhYmVsKHQsIGkucHJldlNsaWRlTWVzc2FnZSksIHQub24oXCJrZXlkb3duXCIsIHRoaXMuYTExeS5vbkVudGVyS2V5KSksIHRoaXMucGFnaW5hdGlvbiAmJiB0aGlzLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cyAmJiB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggJiYgdGhpcy5wYWdpbmF0aW9uLiRlbC5vbihcImtleWRvd25cIiwgXCIuXCIgKyB0aGlzLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzLCB0aGlzLmExMXkub25FbnRlcktleSlcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlLCB0O1xuICAgICAgICB0aGlzLmExMXkubGl2ZVJlZ2lvbiAmJiB0aGlzLmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwICYmIHRoaXMuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpLCB0aGlzLm5hdmlnYXRpb24gJiYgdGhpcy5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgKGUgPSB0aGlzLm5hdmlnYXRpb24uJG5leHRFbCksIHRoaXMubmF2aWdhdGlvbiAmJiB0aGlzLm5hdmlnYXRpb24uJHByZXZFbCAmJiAodCA9IHRoaXMubmF2aWdhdGlvbi4kcHJldkVsKSwgZSAmJiBlLm9mZihcImtleWRvd25cIiwgdGhpcy5hMTF5Lm9uRW50ZXJLZXkpLCB0ICYmIHQub2ZmKFwia2V5ZG93blwiLCB0aGlzLmExMXkub25FbnRlcktleSksIHRoaXMucGFnaW5hdGlvbiAmJiB0aGlzLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cyAmJiB0aGlzLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggJiYgdGhpcy5wYWdpbmF0aW9uLiRlbC5vZmYoXCJrZXlkb3duXCIsIFwiLlwiICsgdGhpcy5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcywgdGhpcy5hMTF5Lm9uRW50ZXJLZXkpXG4gICAgICB9XG4gICAgfSxcbiAgICBhZSA9IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSBsKCk7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5oaXN0b3J5KSB7XG4gICAgICAgICAgaWYgKCFlLmhpc3RvcnkgfHwgIWUuaGlzdG9yeS5wdXNoU3RhdGUpIHJldHVybiB0aGlzLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSAhMSwgdm9pZCh0aGlzLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gITApO1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5oaXN0b3J5O1xuICAgICAgICAgIHQuaW5pdGlhbGl6ZWQgPSAhMCwgdC5wYXRocyA9IGFlLmdldFBhdGhWYWx1ZXModGhpcy5wYXJhbXMudXJsKSwgKHQucGF0aHMua2V5IHx8IHQucGF0aHMudmFsdWUpICYmICh0LnNjcm9sbFRvU2xpZGUoMCwgdC5wYXRocy52YWx1ZSwgdGhpcy5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSwgdGhpcy5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUgfHwgZS5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgdGhpcy5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSkpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gbCgpO1xuICAgICAgICB0aGlzLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSB8fCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCB0aGlzLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKVxuICAgICAgfSxcbiAgICAgIHNldEhpc3RvcnlQb3BTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpc3RvcnkucGF0aHMgPSBhZS5nZXRQYXRoVmFsdWVzKHRoaXMucGFyYW1zLnVybCksIHRoaXMuaGlzdG9yeS5zY3JvbGxUb1NsaWRlKHRoaXMucGFyYW1zLnNwZWVkLCB0aGlzLmhpc3RvcnkucGF0aHMudmFsdWUsICExKVxuICAgICAgfSxcbiAgICAgIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gbCgpLFxuICAgICAgICAgIGkgPSAoZSA/IG5ldyBVUkwoZSkgOiB0LmxvY2F0aW9uKS5wYXRobmFtZS5zbGljZSgxKS5zcGxpdChcIi9cIikuZmlsdGVyKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgIT09IGVcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgcyA9IGkubGVuZ3RoO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogaVtzIC0gMl0sXG4gICAgICAgICAgdmFsdWU6IGlbcyAtIDFdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRIaXN0b3J5OiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgaSA9IGwoKTtcbiAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5pbml0aWFsaXplZCAmJiB0aGlzLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgICB2YXIgcztcbiAgICAgICAgICBzID0gdGhpcy5wYXJhbXMudXJsID8gbmV3IFVSTCh0aGlzLnBhcmFtcy51cmwpIDogaS5sb2NhdGlvbjtcbiAgICAgICAgICB2YXIgYSA9IHRoaXMuc2xpZGVzLmVxKHQpLFxuICAgICAgICAgICAgciA9IGFlLnNsdWdpZnkoYS5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpKTtcbiAgICAgICAgICBzLnBhdGhuYW1lLmluY2x1ZGVzKGUpIHx8IChyID0gZSArIFwiL1wiICsgcik7XG4gICAgICAgICAgdmFyIG4gPSBpLmhpc3Rvcnkuc3RhdGU7XG4gICAgICAgICAgbiAmJiBuLnZhbHVlID09PSByIHx8ICh0aGlzLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSA/IGkuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IHJcbiAgICAgICAgICB9LCBudWxsLCByKSA6IGkuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IHJcbiAgICAgICAgICB9LCBudWxsLCByKSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNsdWdpZnk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCBcIi1cIikucmVwbGFjZSgvW15cXHctXSsvZywgXCJcIikucmVwbGFjZSgvLS0rL2csIFwiLVwiKS5yZXBsYWNlKC9eLSsvLCBcIlwiKS5yZXBsYWNlKC8tKyQvLCBcIlwiKVxuICAgICAgfSxcbiAgICAgIHNjcm9sbFRvU2xpZGU6IGZ1bmN0aW9uIChlLCB0LCBpKSB7XG4gICAgICAgIGlmICh0KVxuICAgICAgICAgIGZvciAodmFyIHMgPSAwLCBhID0gdGhpcy5zbGlkZXMubGVuZ3RoOyBzIDwgYTsgcyArPSAxKSB7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMuc2xpZGVzLmVxKHMpO1xuICAgICAgICAgICAgaWYgKGFlLnNsdWdpZnkoci5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpKSA9PT0gdCAmJiAhci5oYXNDbGFzcyh0aGlzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB2YXIgbiA9IHIuaW5kZXgoKTtcbiAgICAgICAgICAgICAgdGhpcy5zbGlkZVRvKG4sIGUsIGkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHRoaXMuc2xpZGVUbygwLCBlLCBpKVxuICAgICAgfVxuICAgIH0sXG4gICAgcmUgPSB7XG4gICAgICBvbkhhc2hDYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHIoKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiaGFzaENoYW5nZVwiKTtcbiAgICAgICAgdmFyIHQgPSBlLmxvY2F0aW9uLmhhc2gucmVwbGFjZShcIiNcIiwgXCJcIik7XG4gICAgICAgIGlmICh0ICE9PSB0aGlzLnNsaWRlcy5lcSh0aGlzLmFjdGl2ZUluZGV4KS5hdHRyKFwiZGF0YS1oYXNoXCIpKSB7XG4gICAgICAgICAgdmFyIGkgPSB0aGlzLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyB0aGlzLnBhcmFtcy5zbGlkZUNsYXNzICsgJ1tkYXRhLWhhc2g9XCInICsgdCArICdcIl0nKS5pbmRleCgpO1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGkpIHJldHVybjtcbiAgICAgICAgICB0aGlzLnNsaWRlVG8oaSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldEhhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSBsKCksXG4gICAgICAgICAgdCA9IHIoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgdGhpcy5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZClcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIGUuaGlzdG9yeSAmJiBlLmhpc3RvcnkucmVwbGFjZVN0YXRlKSBlLmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIFwiI1wiICsgdGhpcy5zbGlkZXMuZXEodGhpcy5hY3RpdmVJbmRleCkuYXR0cihcImRhdGEtaGFzaFwiKSB8fCBcIlwiKSwgdGhpcy5lbWl0KFwiaGFzaFNldFwiKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5zbGlkZXMuZXEodGhpcy5hY3RpdmVJbmRleCksXG4gICAgICAgICAgICAgIHMgPSBpLmF0dHIoXCJkYXRhLWhhc2hcIikgfHwgaS5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpO1xuICAgICAgICAgICAgdC5sb2NhdGlvbi5oYXNoID0gcyB8fCBcIlwiLCB0aGlzLmVtaXQoXCJoYXNoU2V0XCIpXG4gICAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSByKCksXG4gICAgICAgICAgdCA9IGwoKTtcbiAgICAgICAgaWYgKCEoIXRoaXMucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgdGhpcy5wYXJhbXMuaGlzdG9yeSAmJiB0aGlzLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpKSB7XG4gICAgICAgICAgdGhpcy5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9ICEwO1xuICAgICAgICAgIHZhciBpID0gZS5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgZm9yICh2YXIgcyA9IDAsIGEgPSB0aGlzLnNsaWRlcy5sZW5ndGg7IHMgPCBhOyBzICs9IDEpIHtcbiAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLnNsaWRlcy5lcShzKTtcbiAgICAgICAgICAgICAgaWYgKChuLmF0dHIoXCJkYXRhLWhhc2hcIikgfHwgbi5hdHRyKFwiZGF0YS1oaXN0b3J5XCIpKSA9PT0gaSAmJiAhbi5oYXNDbGFzcyh0aGlzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICAgIHZhciBvID0gbi5pbmRleCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVUbyhvLCAwLCB0aGlzLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsICEwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSAmJiBtKHQpLm9uKFwiaGFzaGNoYW5nZVwiLCB0aGlzLmhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IGwoKTtcbiAgICAgICAgdGhpcy5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSAmJiBtKGUpLm9mZihcImhhc2hjaGFuZ2VcIiwgdGhpcy5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSlcbiAgICAgIH1cbiAgICB9LFxuICAgIG5lID0ge1xuICAgICAgcnVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICB0ID0gZS5zbGlkZXMuZXEoZS5hY3RpdmVJbmRleCksXG4gICAgICAgICAgaSA9IGUucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgICB0LmF0dHIoXCJkYXRhLXN3aXBlci1hdXRvcGxheVwiKSAmJiAoaSA9IHQuYXR0cihcImRhdGEtc3dpcGVyLWF1dG9wbGF5XCIpIHx8IGUucGFyYW1zLmF1dG9wbGF5LmRlbGF5KSwgY2xlYXJUaW1lb3V0KGUuYXV0b3BsYXkudGltZW91dCksIGUuYXV0b3BsYXkudGltZW91dCA9IEUoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uID8gZS5wYXJhbXMubG9vcCA/IChlLmxvb3BGaXgoKSwgZS5zbGlkZVByZXYoZS5wYXJhbXMuc3BlZWQsICEwLCAhMCksIGUuZW1pdChcImF1dG9wbGF5XCIpKSA6IGUuaXNCZWdpbm5pbmcgPyBlLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUgPyBlLmF1dG9wbGF5LnN0b3AoKSA6IChlLnNsaWRlVG8oZS5zbGlkZXMubGVuZ3RoIC0gMSwgZS5wYXJhbXMuc3BlZWQsICEwLCAhMCksIGUuZW1pdChcImF1dG9wbGF5XCIpKSA6IChlLnNsaWRlUHJldihlLnBhcmFtcy5zcGVlZCwgITAsICEwKSwgZS5lbWl0KFwiYXV0b3BsYXlcIikpIDogZS5wYXJhbXMubG9vcCA/IChlLmxvb3BGaXgoKSwgZS5zbGlkZU5leHQoZS5wYXJhbXMuc3BlZWQsICEwLCAhMCksIGUuZW1pdChcImF1dG9wbGF5XCIpKSA6IGUuaXNFbmQgPyBlLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUgPyBlLmF1dG9wbGF5LnN0b3AoKSA6IChlLnNsaWRlVG8oMCwgZS5wYXJhbXMuc3BlZWQsICEwLCAhMCksIGUuZW1pdChcImF1dG9wbGF5XCIpKSA6IChlLnNsaWRlTmV4dChlLnBhcmFtcy5zcGVlZCwgITAsICEwKSwgZS5lbWl0KFwiYXV0b3BsYXlcIikpLCBlLnBhcmFtcy5jc3NNb2RlICYmIGUuYXV0b3BsYXkucnVubmluZyAmJiBlLmF1dG9wbGF5LnJ1bigpXG4gICAgICAgIH0pLCBpKVxuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgPT09IHRoaXMuYXV0b3BsYXkudGltZW91dCAmJiAoIXRoaXMuYXV0b3BsYXkucnVubmluZyAmJiAodGhpcy5hdXRvcGxheS5ydW5uaW5nID0gITAsIHRoaXMuZW1pdChcImF1dG9wbGF5U3RhcnRcIiksIHRoaXMuYXV0b3BsYXkucnVuKCksICEwKSlcbiAgICAgIH0sXG4gICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYXV0b3BsYXkucnVubmluZyAmJiAodm9pZCAwICE9PSB0aGlzLmF1dG9wbGF5LnRpbWVvdXQgJiYgKHRoaXMuYXV0b3BsYXkudGltZW91dCAmJiAoY2xlYXJUaW1lb3V0KHRoaXMuYXV0b3BsYXkudGltZW91dCksIHRoaXMuYXV0b3BsYXkudGltZW91dCA9IHZvaWQgMCksIHRoaXMuYXV0b3BsYXkucnVubmluZyA9ICExLCB0aGlzLmVtaXQoXCJhdXRvcGxheVN0b3BcIiksICEwKSlcbiAgICAgIH0sXG4gICAgICBwYXVzZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5hdXRvcGxheS5ydW5uaW5nICYmICh0aGlzLmF1dG9wbGF5LnBhdXNlZCB8fCAodGhpcy5hdXRvcGxheS50aW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmF1dG9wbGF5LnRpbWVvdXQpLCB0aGlzLmF1dG9wbGF5LnBhdXNlZCA9ICEwLCAwICE9PSBlICYmIHRoaXMucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uID8gKHRoaXMuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB0aGlzLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCksIHRoaXMuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0VHJhbnNpdGlvbkVuZFwiLCB0aGlzLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCkpIDogKHRoaXMuYXV0b3BsYXkucGF1c2VkID0gITEsIHRoaXMuYXV0b3BsYXkucnVuKCkpKSlcbiAgICAgIH0sXG4gICAgICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSByKCk7XG4gICAgICAgIFwiaGlkZGVuXCIgPT09IGUudmlzaWJpbGl0eVN0YXRlICYmIHRoaXMuYXV0b3BsYXkucnVubmluZyAmJiB0aGlzLmF1dG9wbGF5LnBhdXNlKCksIFwidmlzaWJsZVwiID09PSBlLnZpc2liaWxpdHlTdGF0ZSAmJiB0aGlzLmF1dG9wbGF5LnBhdXNlZCAmJiAodGhpcy5hdXRvcGxheS5ydW4oKSwgdGhpcy5hdXRvcGxheS5wYXVzZWQgPSAhMSlcbiAgICAgIH0sXG4gICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMgJiYgIXRoaXMuZGVzdHJveWVkICYmIHRoaXMuJHdyYXBwZXJFbCAmJiBlLnRhcmdldCA9PT0gdGhpcy4kd3JhcHBlckVsWzBdICYmICh0aGlzLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgdGhpcy5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpLCB0aGlzLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmtpdFRyYW5zaXRpb25FbmRcIiwgdGhpcy5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpLCB0aGlzLmF1dG9wbGF5LnBhdXNlZCA9ICExLCB0aGlzLmF1dG9wbGF5LnJ1bm5pbmcgPyB0aGlzLmF1dG9wbGF5LnJ1bigpIDogdGhpcy5hdXRvcGxheS5zdG9wKCkpXG4gICAgICB9XG4gICAgfSxcbiAgICBsZSA9IHtcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBlID0gdGhpcy5zbGlkZXMsIHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQgKz0gMSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5zbGlkZXMuZXEodCksXG4gICAgICAgICAgICBzID0gLWlbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgICAgdGhpcy5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSB8fCAocyAtPSB0aGlzLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgdmFyIGEgPSAwO1xuICAgICAgICAgIHRoaXMuaXNIb3Jpem9udGFsKCkgfHwgKGEgPSBzLCBzID0gMCk7XG4gICAgICAgICAgdmFyIHIgPSB0aGlzLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicyhpWzBdLnByb2dyZXNzKSwgMCkgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoaVswXS5wcm9ncmVzcywgLTEpLCAwKTtcbiAgICAgICAgICBpLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiByXG4gICAgICAgICAgfSkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyBzICsgXCJweCwgXCIgKyBhICsgXCJweCwgMHB4KVwiKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgIGkgPSB0LnNsaWRlcyxcbiAgICAgICAgICBzID0gdC4kd3JhcHBlckVsO1xuICAgICAgICBpZiAoaS50cmFuc2l0aW9uKGUpLCB0LnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIDAgIT09IGUpIHtcbiAgICAgICAgICB2YXIgYSA9ICExO1xuICAgICAgICAgIGkudHJhbnNpdGlvbkVuZCgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFhICYmIHQgJiYgIXQuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIGEgPSAhMCwgdC5hbmltYXRpbmcgPSAhMTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IFtcIndlYmtpdFRyYW5zaXRpb25FbmRcIiwgXCJ0cmFuc2l0aW9uZW5kXCJdLCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpICs9IDEpIHMudHJpZ2dlcihlW2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvZSA9IHtcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSwgdCA9IHRoaXMuJGVsLFxuICAgICAgICAgIGkgPSB0aGlzLiR3cmFwcGVyRWwsXG4gICAgICAgICAgcyA9IHRoaXMuc2xpZGVzLFxuICAgICAgICAgIGEgPSB0aGlzLndpZHRoLFxuICAgICAgICAgIHIgPSB0aGlzLmhlaWdodCxcbiAgICAgICAgICBuID0gdGhpcy5ydGxUcmFuc2xhdGUsXG4gICAgICAgICAgbCA9IHRoaXMuc2l6ZSxcbiAgICAgICAgICBvID0gdGhpcy5icm93c2VyLFxuICAgICAgICAgIGQgPSB0aGlzLnBhcmFtcy5jdWJlRWZmZWN0LFxuICAgICAgICAgIGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgIHAgPSB0aGlzLnZpcnR1YWwgJiYgdGhpcy5wYXJhbXMudmlydHVhbC5lbmFibGVkLFxuICAgICAgICAgIHUgPSAwO1xuICAgICAgICBkLnNoYWRvdyAmJiAoaCA/ICgwID09PSAoZSA9IGkuZmluZChcIi5zd2lwZXItY3ViZS1zaGFkb3dcIikpLmxlbmd0aCAmJiAoZSA9IG0oJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKSwgaS5hcHBlbmQoZSkpLCBlLmNzcyh7XG4gICAgICAgICAgaGVpZ2h0OiBhICsgXCJweFwiXG4gICAgICAgIH0pKSA6IDAgPT09IChlID0gdC5maW5kKFwiLnN3aXBlci1jdWJlLXNoYWRvd1wiKSkubGVuZ3RoICYmIChlID0gbSgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpLCB0LmFwcGVuZChlKSkpO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHMubGVuZ3RoOyBjICs9IDEpIHtcbiAgICAgICAgICB2YXIgdiA9IHMuZXEoYyksXG4gICAgICAgICAgICBmID0gYztcbiAgICAgICAgICBwICYmIChmID0gcGFyc2VJbnQodi5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksIDEwKSk7XG4gICAgICAgICAgdmFyIGcgPSA5MCAqIGYsXG4gICAgICAgICAgICB3ID0gTWF0aC5mbG9vcihnIC8gMzYwKTtcbiAgICAgICAgICBuICYmIChnID0gLWcsIHcgPSBNYXRoLmZsb29yKC1nIC8gMzYwKSk7XG4gICAgICAgICAgdmFyIGIgPSBNYXRoLm1heChNYXRoLm1pbih2WzBdLnByb2dyZXNzLCAxKSwgLTEpLFxuICAgICAgICAgICAgeSA9IDAsXG4gICAgICAgICAgICBFID0gMCxcbiAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgIGYgJSA0ID09IDAgPyAoeSA9IDQgKiAtdyAqIGwsIHggPSAwKSA6IChmIC0gMSkgJSA0ID09IDAgPyAoeSA9IDAsIHggPSA0ICogLXcgKiBsKSA6IChmIC0gMikgJSA0ID09IDAgPyAoeSA9IGwgKyA0ICogdyAqIGwsIHggPSBsKSA6IChmIC0gMykgJSA0ID09IDAgJiYgKHkgPSAtbCwgeCA9IDMgKiBsICsgNCAqIGwgKiB3KSwgbiAmJiAoeSA9IC15KSwgaCB8fCAoRSA9IHksIHkgPSAwKTtcbiAgICAgICAgICB2YXIgVCA9IFwicm90YXRlWChcIiArIChoID8gMCA6IC1nKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKGggPyBnIDogMCkgKyBcImRlZykgdHJhbnNsYXRlM2QoXCIgKyB5ICsgXCJweCwgXCIgKyBFICsgXCJweCwgXCIgKyB4ICsgXCJweClcIjtcbiAgICAgICAgICBpZiAoYiA8PSAxICYmIGIgPiAtMSAmJiAodSA9IDkwICogZiArIDkwICogYiwgbiAmJiAodSA9IDkwICogLWYgLSA5MCAqIGIpKSwgdi50cmFuc2Zvcm0oVCksIGQuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgICB2YXIgQyA9IGggPyB2LmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpIDogdi5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLFxuICAgICAgICAgICAgICBTID0gaCA/IHYuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpIDogdi5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXCIpO1xuICAgICAgICAgICAgMCA9PT0gQy5sZW5ndGggJiYgKEMgPSBtKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKGggPyBcImxlZnRcIiA6IFwidG9wXCIpICsgJ1wiPjwvZGl2PicpLCB2LmFwcGVuZChDKSksIDAgPT09IFMubGVuZ3RoICYmIChTID0gbSgnPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChoID8gXCJyaWdodFwiIDogXCJib3R0b21cIikgKyAnXCI+PC9kaXY+JyksIHYuYXBwZW5kKFMpKSwgQy5sZW5ndGggJiYgKENbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1iLCAwKSksIFMubGVuZ3RoICYmIChTWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChiLCAwKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkuY3NzKHtcbiAgICAgICAgICAgIFwiLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luXCI6IFwiNTAlIDUwJSAtXCIgKyBsIC8gMiArIFwicHhcIixcbiAgICAgICAgICAgIFwiLW1vei10cmFuc2Zvcm0tb3JpZ2luXCI6IFwiNTAlIDUwJSAtXCIgKyBsIC8gMiArIFwicHhcIixcbiAgICAgICAgICAgIFwiLW1zLXRyYW5zZm9ybS1vcmlnaW5cIjogXCI1MCUgNTAlIC1cIiArIGwgLyAyICsgXCJweFwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm0tb3JpZ2luXCI6IFwiNTAlIDUwJSAtXCIgKyBsIC8gMiArIFwicHhcIlxuICAgICAgICAgIH0pLCBkLnNoYWRvdylcbiAgICAgICAgICBpZiAoaCkgZS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgKGEgLyAyICsgZC5zaGFkb3dPZmZzZXQpICsgXCJweCwgXCIgKyAtYSAvIDIgKyBcInB4KSByb3RhdGVYKDkwZGVnKSByb3RhdGVaKDBkZWcpIHNjYWxlKFwiICsgZC5zaGFkb3dTY2FsZSArIFwiKVwiKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBNID0gTWF0aC5hYnModSkgLSA5MCAqIE1hdGguZmxvb3IoTWF0aC5hYnModSkgLyA5MCksXG4gICAgICAgICAgICAgIHogPSAxLjUgLSAoTWF0aC5zaW4oMiAqIE0gKiBNYXRoLlBJIC8gMzYwKSAvIDIgKyBNYXRoLmNvcygyICogTSAqIE1hdGguUEkgLyAzNjApIC8gMiksXG4gICAgICAgICAgICAgIFAgPSBkLnNoYWRvd1NjYWxlLFxuICAgICAgICAgICAgICBrID0gZC5zaGFkb3dTY2FsZSAvIHosXG4gICAgICAgICAgICAgICQgPSBkLnNoYWRvd09mZnNldDtcbiAgICAgICAgICAgIGUudHJhbnNmb3JtKFwic2NhbGUzZChcIiArIFAgKyBcIiwgMSwgXCIgKyBrICsgXCIpIHRyYW5zbGF0ZTNkKDBweCwgXCIgKyAociAvIDIgKyAkKSArIFwicHgsIFwiICsgLXIgLyAyIC8gayArIFwicHgpIHJvdGF0ZVgoLTkwZGVnKVwiKVxuICAgICAgICAgIH0gdmFyIEwgPSBvLmlzU2FmYXJpIHx8IG8uaXNXZWJWaWV3ID8gLWwgLyAyIDogMDtcbiAgICAgICAgaS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsMCxcIiArIEwgKyBcInB4KSByb3RhdGVYKFwiICsgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyAwIDogdSkgKyBcImRlZykgcm90YXRlWShcIiArICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gLXUgOiAwKSArIFwiZGVnKVwiKVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy4kZWw7XG4gICAgICAgIHRoaXMuc2xpZGVzLnRyYW5zaXRpb24oZSkuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS50cmFuc2l0aW9uKGUpLCB0aGlzLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhdGhpcy5pc0hvcml6b250YWwoKSAmJiB0LmZpbmQoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpLnRyYW5zaXRpb24oZSlcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlID0ge1xuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGUgPSB0aGlzLnNsaWRlcywgdCA9IHRoaXMucnRsVHJhbnNsYXRlLCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgcyA9IGUuZXEoaSksXG4gICAgICAgICAgICBhID0gc1swXS5wcm9ncmVzcztcbiAgICAgICAgICB0aGlzLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24gJiYgKGEgPSBNYXRoLm1heChNYXRoLm1pbihzWzBdLnByb2dyZXNzLCAxKSwgLTEpKTtcbiAgICAgICAgICB2YXIgciA9IC0xODAgKiBhLFxuICAgICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgICBsID0gLXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQsXG4gICAgICAgICAgICBvID0gMDtcbiAgICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSA/IHQgJiYgKHIgPSAtcikgOiAobyA9IGwsIGwgPSAwLCBuID0gLXIsIHIgPSAwKSwgc1swXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChhKSkgKyBlLmxlbmd0aCwgdGhpcy5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5pc0hvcml6b250YWwoKSA/IHMuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikgOiBzLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3BcIiksXG4gICAgICAgICAgICAgIGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gcy5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHRcIikgOiBzLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b21cIik7XG4gICAgICAgICAgICAwID09PSBkLmxlbmd0aCAmJiAoZCA9IG0oJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScgKyAodGhpcy5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIikgKyAnXCI+PC9kaXY+JyksIHMuYXBwZW5kKGQpKSwgMCA9PT0gaC5sZW5ndGggJiYgKGggPSBtKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBcInJpZ2h0XCIgOiBcImJvdHRvbVwiKSArICdcIj48L2Rpdj4nKSwgcy5hcHBlbmQoaCkpLCBkLmxlbmd0aCAmJiAoZFswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLWEsIDApKSwgaC5sZW5ndGggJiYgKGhbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KGEsIDApKVxuICAgICAgICAgIH1cbiAgICAgICAgICBzLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgbCArIFwicHgsIFwiICsgbyArIFwicHgsIDBweCkgcm90YXRlWChcIiArIG4gKyBcImRlZykgcm90YXRlWShcIiArIHIgKyBcImRlZylcIilcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICBpID0gdC5zbGlkZXMsXG4gICAgICAgICAgcyA9IHQuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgYSA9IHQuJHdyYXBwZXJFbDtcbiAgICAgICAgaWYgKGkudHJhbnNpdGlvbihlKS5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpLnRyYW5zaXRpb24oZSksIHQucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgMCAhPT0gZSkge1xuICAgICAgICAgIHZhciByID0gITE7XG4gICAgICAgICAgaS5lcShzKS50cmFuc2l0aW9uRW5kKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXIgJiYgdCAmJiAhdC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgciA9ICEwLCB0LmFuaW1hdGluZyA9ICExO1xuICAgICAgICAgICAgICBmb3IgKHZhciBlID0gW1wid2Via2l0VHJhbnNpdGlvbkVuZFwiLCBcInRyYW5zaXRpb25lbmRcIl0sIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkgKz0gMSkgYS50cmlnZ2VyKGVbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGhlID0ge1xuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGUgPSB0aGlzLndpZHRoLCB0ID0gdGhpcy5oZWlnaHQsIGkgPSB0aGlzLnNsaWRlcywgcyA9IHRoaXMuc2xpZGVzU2l6ZXNHcmlkLCBhID0gdGhpcy5wYXJhbXMuY292ZXJmbG93RWZmZWN0LCByID0gdGhpcy5pc0hvcml6b250YWwoKSwgbiA9IHRoaXMudHJhbnNsYXRlLCBsID0gciA/IGUgLyAyIC0gbiA6IHQgLyAyIC0gbiwgbyA9IHIgPyBhLnJvdGF0ZSA6IC1hLnJvdGF0ZSwgZCA9IGEuZGVwdGgsIGggPSAwLCBwID0gaS5sZW5ndGg7IGggPCBwOyBoICs9IDEpIHtcbiAgICAgICAgICB2YXIgdSA9IGkuZXEoaCksXG4gICAgICAgICAgICBjID0gc1toXSxcbiAgICAgICAgICAgIHYgPSAobCAtIHVbMF0uc3dpcGVyU2xpZGVPZmZzZXQgLSBjIC8gMikgLyBjICogYS5tb2RpZmllcixcbiAgICAgICAgICAgIGYgPSByID8gbyAqIHYgOiAwLFxuICAgICAgICAgICAgZyA9IHIgPyAwIDogbyAqIHYsXG4gICAgICAgICAgICB3ID0gLWQgKiBNYXRoLmFicyh2KSxcbiAgICAgICAgICAgIGIgPSBhLnN0cmV0Y2g7XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYiAmJiAtMSAhPT0gYi5pbmRleE9mKFwiJVwiKSAmJiAoYiA9IHBhcnNlRmxvYXQoYS5zdHJldGNoKSAvIDEwMCAqIGMpO1xuICAgICAgICAgIHZhciB5ID0gciA/IDAgOiBiICogdixcbiAgICAgICAgICAgIEUgPSByID8gYiAqIHYgOiAwLFxuICAgICAgICAgICAgeCA9IDEgLSAoMSAtIGEuc2NhbGUpICogTWF0aC5hYnModik7XG4gICAgICAgICAgTWF0aC5hYnMoRSkgPCAuMDAxICYmIChFID0gMCksIE1hdGguYWJzKHkpIDwgLjAwMSAmJiAoeSA9IDApLCBNYXRoLmFicyh3KSA8IC4wMDEgJiYgKHcgPSAwKSwgTWF0aC5hYnMoZikgPCAuMDAxICYmIChmID0gMCksIE1hdGguYWJzKGcpIDwgLjAwMSAmJiAoZyA9IDApLCBNYXRoLmFicyh4KSA8IC4wMDEgJiYgKHggPSAwKTtcbiAgICAgICAgICB2YXIgVCA9IFwidHJhbnNsYXRlM2QoXCIgKyBFICsgXCJweCxcIiArIHkgKyBcInB4LFwiICsgdyArIFwicHgpICByb3RhdGVYKFwiICsgZyArIFwiZGVnKSByb3RhdGVZKFwiICsgZiArIFwiZGVnKSBzY2FsZShcIiArIHggKyBcIilcIjtcbiAgICAgICAgICBpZiAodS50cmFuc2Zvcm0oVCksIHVbMF0uc3R5bGUuekluZGV4ID0gMSAtIE1hdGguYWJzKE1hdGgucm91bmQodikpLCBhLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgICAgdmFyIEMgPSByID8gdS5maW5kKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKSA6IHUuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcFwiKSxcbiAgICAgICAgICAgICAgUyA9IHIgPyB1LmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodFwiKSA6IHUuZmluZChcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVwiKTtcbiAgICAgICAgICAgIDAgPT09IEMubGVuZ3RoICYmIChDID0gbSgnPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChyID8gXCJsZWZ0XCIgOiBcInRvcFwiKSArICdcIj48L2Rpdj4nKSwgdS5hcHBlbmQoQykpLCAwID09PSBTLmxlbmd0aCAmJiAoUyA9IG0oJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScgKyAociA/IFwicmlnaHRcIiA6IFwiYm90dG9tXCIpICsgJ1wiPjwvZGl2PicpLCB1LmFwcGVuZChTKSksIEMubGVuZ3RoICYmIChDWzBdLnN0eWxlLm9wYWNpdHkgPSB2ID4gMCA/IHYgOiAwKSwgUy5sZW5ndGggJiYgKFNbMF0uc3R5bGUub3BhY2l0eSA9IC12ID4gMCA/IC12IDogMClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLnNsaWRlcy50cmFuc2l0aW9uKGUpLmZpbmQoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnRcIikudHJhbnNpdGlvbihlKVxuICAgICAgfVxuICAgIH0sXG4gICAgcGUgPSB7XG4gICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wYXJhbXMudGh1bWJzO1xuICAgICAgICBpZiAodGhpcy50aHVtYnMuaW5pdGlhbGl6ZWQpIHJldHVybiAhMTtcbiAgICAgICAgdGhpcy50aHVtYnMuaW5pdGlhbGl6ZWQgPSAhMDtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gZS5zd2lwZXIgaW5zdGFuY2VvZiB0ID8gKHRoaXMudGh1bWJzLnN3aXBlciA9IGUuc3dpcGVyLCBTKHRoaXMudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExXG4gICAgICAgIH0pLCBTKHRoaXMudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiAhMVxuICAgICAgICB9KSkgOiBDKGUuc3dpcGVyKSAmJiAodGhpcy50aHVtYnMuc3dpcGVyID0gbmV3IHQoUyh7fSwgZS5zd2lwZXIsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6ICEwLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExXG4gICAgICAgIH0pKSwgdGhpcy50aHVtYnMuc3dpcGVyQ3JlYXRlZCA9ICEwKSwgdGhpcy50aHVtYnMuc3dpcGVyLiRlbC5hZGRDbGFzcyh0aGlzLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpLCB0aGlzLnRodW1icy5zd2lwZXIub24oXCJ0YXBcIiwgdGhpcy50aHVtYnMub25UaHVtYkNsaWNrKSwgITBcbiAgICAgIH0sXG4gICAgICBvblRodW1iQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLmNsaWNrZWRJbmRleCxcbiAgICAgICAgICAgIGkgPSBlLmNsaWNrZWRTbGlkZTtcbiAgICAgICAgICBpZiAoIShpICYmIG0oaSkuaGFzQ2xhc3ModGhpcy5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykgfHwgbnVsbCA9PSB0KSkge1xuICAgICAgICAgICAgdmFyIHM7XG4gICAgICAgICAgICBpZiAocyA9IGUucGFyYW1zLmxvb3AgPyBwYXJzZUludChtKGUuY2xpY2tlZFNsaWRlKS5hdHRyKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksIDEwKSA6IHQsIHRoaXMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmFjdGl2ZUluZGV4O1xuICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5lcShhKS5oYXNDbGFzcyh0aGlzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSAmJiAodGhpcy5sb29wRml4KCksIHRoaXMuX2NsaWVudExlZnQgPSB0aGlzLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdCwgYSA9IHRoaXMuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuc2xpZGVzLmVxKGEpLnByZXZBbGwoJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBzICsgJ1wiXScpLmVxKDApLmluZGV4KCksXG4gICAgICAgICAgICAgICAgbiA9IHRoaXMuc2xpZGVzLmVxKGEpLm5leHRBbGwoJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBzICsgJ1wiXScpLmVxKDApLmluZGV4KCk7XG4gICAgICAgICAgICAgIHMgPSB2b2lkIDAgPT09IHIgPyBuIDogdm9pZCAwID09PSBuID8gciA6IG4gLSBhIDwgYSAtIHIgPyBuIDogclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zbGlkZVRvKHMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IHRoaXMudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICB2YXIgaSA9IFwiYXV0b1wiID09PSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gdC5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdC5wYXJhbXMuc2xpZGVzUGVyVmlldyxcbiAgICAgICAgICAgIHMgPSB0aGlzLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldCxcbiAgICAgICAgICAgIGEgPSBzICYmICF0LnBhcmFtcy5sb29wO1xuICAgICAgICAgIGlmICh0aGlzLnJlYWxJbmRleCAhPT0gdC5yZWFsSW5kZXggfHwgYSkge1xuICAgICAgICAgICAgdmFyIHIsIG4sIGwgPSB0LmFjdGl2ZUluZGV4O1xuICAgICAgICAgICAgaWYgKHQucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgdC5zbGlkZXMuZXEobCkuaGFzQ2xhc3ModC5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgJiYgKHQubG9vcEZpeCgpLCB0Ll9jbGllbnRMZWZ0ID0gdC4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQsIGwgPSB0LmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICAgICAgdmFyIG8gPSB0LnNsaWRlcy5lcShsKS5wcmV2QWxsKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgdGhpcy5yZWFsSW5kZXggKyAnXCJdJykuZXEoMCkuaW5kZXgoKSxcbiAgICAgICAgICAgICAgICBkID0gdC5zbGlkZXMuZXEobCkubmV4dEFsbCgnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHRoaXMucmVhbEluZGV4ICsgJ1wiXScpLmVxKDApLmluZGV4KCk7XG4gICAgICAgICAgICAgIHIgPSB2b2lkIDAgPT09IG8gPyBkIDogdm9pZCAwID09PSBkID8gbyA6IGQgLSBsID09IGwgLSBvID8gbCA6IGQgLSBsIDwgbCAtIG8gPyBkIDogbywgbiA9IHRoaXMuYWN0aXZlSW5kZXggPiB0aGlzLnByZXZpb3VzSW5kZXggPyBcIm5leHRcIiA6IFwicHJldlwiXG4gICAgICAgICAgICB9IGVsc2UgbiA9IChyID0gdGhpcy5yZWFsSW5kZXgpID4gdGhpcy5wcmV2aW91c0luZGV4ID8gXCJuZXh0XCIgOiBcInByZXZcIjtcbiAgICAgICAgICAgIGEgJiYgKHIgKz0gXCJuZXh0XCIgPT09IG4gPyBzIDogLTEgKiBzKSwgdC52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0LnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YocikgPCAwICYmICh0LnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHIgPSByID4gbCA/IHIgLSBNYXRoLmZsb29yKGkgLyAyKSArIDEgOiByICsgTWF0aC5mbG9vcihpIC8gMikgLSAxIDogciA+IGwgJiYgKHIgPSByIC0gaSArIDEpLCB0LnNsaWRlVG8ociwgZSA/IDAgOiB2b2lkIDApKVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaCA9IDEsXG4gICAgICAgICAgICBwID0gdGhpcy5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXRoaXMucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIChoID0gdGhpcy5wYXJhbXMuc2xpZGVzUGVyVmlldyksIHRoaXMucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icyB8fCAoaCA9IDEpLCBoID0gTWF0aC5mbG9vcihoKSwgdC5zbGlkZXMucmVtb3ZlQ2xhc3MocCksIHQucGFyYW1zLmxvb3AgfHwgdC5wYXJhbXMudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpXG4gICAgICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGg7IHUgKz0gMSkgdC4kd3JhcHBlckVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgKHRoaXMucmVhbEluZGV4ICsgdSkgKyAnXCJdJykuYWRkQ2xhc3MocCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBoOyBjICs9IDEpIHQuc2xpZGVzLmVxKHRoaXMucmVhbEluZGV4ICsgYykuYWRkQ2xhc3MocClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdWUgPSBbcSwgXywge1xuICAgICAgbmFtZTogXCJtb3VzZXdoZWVsXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICAgIHJlbGVhc2VPbkVkZ2VzOiAhMSxcbiAgICAgICAgICBpbnZlcnQ6ICExLFxuICAgICAgICAgIGZvcmNlVG9BeGlzOiAhMSxcbiAgICAgICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgICAgICBldmVudHNUYXJnZXQ6IFwiY29udGFpbmVyXCIsXG4gICAgICAgICAgdGhyZXNob2xkRGVsdGE6IG51bGwsXG4gICAgICAgICAgdGhyZXNob2xkVGltZTogbnVsbFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICAgICAgbGFzdFNjcm9sbFRpbWU6IHgoKSxcbiAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHZvaWQgMCxcbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgICAgICAgIGVuYWJsZTogVS5lbmFibGUsXG4gICAgICAgICAgICBkaXNhYmxlOiBVLmRpc2FibGUsXG4gICAgICAgICAgICBoYW5kbGU6IFUuaGFuZGxlLFxuICAgICAgICAgICAgaGFuZGxlTW91c2VFbnRlcjogVS5oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICAgICAgaGFuZGxlTW91c2VMZWF2ZTogVS5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgICAgYW5pbWF0ZVNsaWRlcjogVS5hbmltYXRlU2xpZGVyLFxuICAgICAgICAgICAgcmVsZWFzZVNjcm9sbDogVS5yZWxlYXNlU2Nyb2xsXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgIWUucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBlLnBhcmFtcy5jc3NNb2RlICYmIGUubW91c2V3aGVlbC5kaXNhYmxlKCksIGUucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBlLm1vdXNld2hlZWwuZW5hYmxlKClcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5jc3NNb2RlICYmIGUubW91c2V3aGVlbC5lbmFibGUoKSwgZS5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgZS5tb3VzZXdoZWVsLmRpc2FibGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJuYXZpZ2F0aW9uXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgICAgICBwcmV2RWw6IG51bGwsXG4gICAgICAgICAgaGlkZU9uQ2xpY2s6ICExLFxuICAgICAgICAgIGRpc2FibGVkQ2xhc3M6IFwic3dpcGVyLWJ1dHRvbi1kaXNhYmxlZFwiLFxuICAgICAgICAgIGhpZGRlbkNsYXNzOiBcInN3aXBlci1idXR0b24taGlkZGVuXCIsXG4gICAgICAgICAgbG9ja0NsYXNzOiBcInN3aXBlci1idXR0b24tbG9ja1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTSh0aGlzLCB7XG4gICAgICAgICAgbmF2aWdhdGlvbjogdCh7fSwgSylcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUubmF2aWdhdGlvbi5pbml0KCksIGUubmF2aWdhdGlvbi51cGRhdGUoKVxuICAgICAgICB9LFxuICAgICAgICB0b0VkZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5uYXZpZ2F0aW9uLnVwZGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGZyb21FZGdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUubmF2aWdhdGlvbi51cGRhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUubmF2aWdhdGlvbi5kZXN0cm95KClcbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgdmFyIGksIHMgPSBlLm5hdmlnYXRpb24sXG4gICAgICAgICAgICBhID0gcy4kbmV4dEVsLFxuICAgICAgICAgICAgciA9IHMuJHByZXZFbDtcbiAgICAgICAgICAhZS5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayB8fCBtKHQudGFyZ2V0KS5pcyhyKSB8fCBtKHQudGFyZ2V0KS5pcyhhKSB8fCAoYSA/IGkgPSBhLmhhc0NsYXNzKGUucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpIDogciAmJiAoaSA9IHIuaGFzQ2xhc3MoZS5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpLCAhMCA9PT0gaSA/IGUuZW1pdChcIm5hdmlnYXRpb25TaG93XCIpIDogZS5lbWl0KFwibmF2aWdhdGlvbkhpZGVcIiksIGEgJiYgYS50b2dnbGVDbGFzcyhlLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSwgciAmJiByLnRvZ2dsZUNsYXNzKGUucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJwYWdpbmF0aW9uXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIGVsOiBudWxsLFxuICAgICAgICAgIGJ1bGxldEVsZW1lbnQ6IFwic3BhblwiLFxuICAgICAgICAgIGNsaWNrYWJsZTogITEsXG4gICAgICAgICAgaGlkZU9uQ2xpY2s6ICExLFxuICAgICAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogITEsXG4gICAgICAgICAgdHlwZTogXCJidWxsZXRzXCIsXG4gICAgICAgICAgZHluYW1pY0J1bGxldHM6ICExLFxuICAgICAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBidWxsZXRDbGFzczogXCJzd2lwZXItcGFnaW5hdGlvbi1idWxsZXRcIixcbiAgICAgICAgICBidWxsZXRBY3RpdmVDbGFzczogXCJzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlXCIsXG4gICAgICAgICAgbW9kaWZpZXJDbGFzczogXCJzd2lwZXItcGFnaW5hdGlvbi1cIixcbiAgICAgICAgICBjdXJyZW50Q2xhc3M6IFwic3dpcGVyLXBhZ2luYXRpb24tY3VycmVudFwiLFxuICAgICAgICAgIHRvdGFsQ2xhc3M6IFwic3dpcGVyLXBhZ2luYXRpb24tdG90YWxcIixcbiAgICAgICAgICBoaWRkZW5DbGFzczogXCJzd2lwZXItcGFnaW5hdGlvbi1oaWRkZW5cIixcbiAgICAgICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogXCJzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsXCIsXG4gICAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBcInN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlXCIsXG4gICAgICAgICAgY2xpY2thYmxlQ2xhc3M6IFwic3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlXCIsXG4gICAgICAgICAgbG9ja0NsYXNzOiBcInN3aXBlci1wYWdpbmF0aW9uLWxvY2tcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIHBhZ2luYXRpb246IHQoe1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwXG4gICAgICAgICAgfSwgWilcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFnaW5hdGlvbi5pbml0KCksIGUucGFnaW5hdGlvbi5yZW5kZXIoKSwgZS5wYWdpbmF0aW9uLnVwZGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZUluZGV4Q2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIChlLnBhcmFtcy5sb29wIHx8IHZvaWQgMCA9PT0gZS5zbmFwSW5kZXgpICYmIGUucGFnaW5hdGlvbi51cGRhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBzbmFwSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMubG9vcCB8fCBlLnBhZ2luYXRpb24udXBkYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVzTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmxvb3AgJiYgKGUucGFnaW5hdGlvbi5yZW5kZXIoKSwgZS5wYWdpbmF0aW9uLnVwZGF0ZSgpKVxuICAgICAgICB9LFxuICAgICAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5sb29wIHx8IChlLnBhZ2luYXRpb24ucmVuZGVyKCksIGUucGFnaW5hdGlvbi51cGRhdGUoKSlcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhZ2luYXRpb24uZGVzdHJveSgpXG4gICAgICAgIH0sXG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGUucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgZS5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDAgJiYgIW0odC50YXJnZXQpLmhhc0NsYXNzKGUucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpICYmICghMCA9PT0gZS5wYWdpbmF0aW9uLiRlbC5oYXNDbGFzcyhlLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSA/IGUuZW1pdChcInBhZ2luYXRpb25TaG93XCIpIDogZS5lbWl0KFwicGFnaW5hdGlvbkhpZGVcIiksIGUucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3MoZS5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcykpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcInNjcm9sbGJhclwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICAgIGVsOiBudWxsLFxuICAgICAgICAgIGRyYWdTaXplOiBcImF1dG9cIixcbiAgICAgICAgICBoaWRlOiAhMSxcbiAgICAgICAgICBkcmFnZ2FibGU6ICExLFxuICAgICAgICAgIHNuYXBPblJlbGVhc2U6ICEwLFxuICAgICAgICAgIGxvY2tDbGFzczogXCJzd2lwZXItc2Nyb2xsYmFyLWxvY2tcIixcbiAgICAgICAgICBkcmFnQ2xhc3M6IFwic3dpcGVyLXNjcm9sbGJhci1kcmFnXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBzY3JvbGxiYXI6IHQoe1xuICAgICAgICAgICAgaXNUb3VjaGVkOiAhMSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICAgICAgICBkcmFnVGltZW91dDogbnVsbFxuICAgICAgICAgIH0sIEopXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnNjcm9sbGJhci5pbml0KCksIGUuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKSwgZS5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICBlLnNjcm9sbGJhci5zZXRUcmFuc2l0aW9uKHQpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zY3JvbGxiYXIuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcInBhcmFsbGF4XCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgICBlbmFibGVkOiAhMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIHBhcmFsbGF4OiB0KHt9LCBRKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCAmJiAoZS5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9ICEwLCBlLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSAhMClcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkICYmIGUucGFyYWxsYXguc2V0VHJhbnNsYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgZS5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGUucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgZS5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcInpvb21cIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICAgICAgbWluUmF0aW86IDEsXG4gICAgICAgICAgdG9nZ2xlOiAhMCxcbiAgICAgICAgICBjb250YWluZXJDbGFzczogXCJzd2lwZXItem9vbS1jb250YWluZXJcIixcbiAgICAgICAgICB6b29tZWRTbGlkZUNsYXNzOiBcInN3aXBlci1zbGlkZS16b29tZWRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgTShlLCB7XG4gICAgICAgICAgem9vbTogdCh7XG4gICAgICAgICAgICBlbmFibGVkOiAhMSxcbiAgICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgICAgICAgaXNTY2FsaW5nOiAhMSxcbiAgICAgICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAgICAgJHNsaWRlRWw6IHZvaWQgMCxcbiAgICAgICAgICAgICAgc2xpZGVXaWR0aDogdm9pZCAwLFxuICAgICAgICAgICAgICBzbGlkZUhlaWdodDogdm9pZCAwLFxuICAgICAgICAgICAgICAkaW1hZ2VFbDogdm9pZCAwLFxuICAgICAgICAgICAgICAkaW1hZ2VXcmFwRWw6IHZvaWQgMCxcbiAgICAgICAgICAgICAgbWF4UmF0aW86IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICBpc1RvdWNoZWQ6IHZvaWQgMCxcbiAgICAgICAgICAgICAgaXNNb3ZlZDogdm9pZCAwLFxuICAgICAgICAgICAgICBjdXJyZW50WDogdm9pZCAwLFxuICAgICAgICAgICAgICBjdXJyZW50WTogdm9pZCAwLFxuICAgICAgICAgICAgICBtaW5YOiB2b2lkIDAsXG4gICAgICAgICAgICAgIG1pblk6IHZvaWQgMCxcbiAgICAgICAgICAgICAgbWF4WDogdm9pZCAwLFxuICAgICAgICAgICAgICBtYXhZOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHdpZHRoOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGhlaWdodDogdm9pZCAwLFxuICAgICAgICAgICAgICBzdGFydFg6IHZvaWQgMCxcbiAgICAgICAgICAgICAgc3RhcnRZOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHRvdWNoZXNTdGFydDoge30sXG4gICAgICAgICAgICAgIHRvdWNoZXNDdXJyZW50OiB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgICAgICAgIHg6IHZvaWQgMCxcbiAgICAgICAgICAgICAgeTogdm9pZCAwLFxuICAgICAgICAgICAgICBwcmV2UG9zaXRpb25YOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHByZXZQb3NpdGlvblk6IHZvaWQgMCxcbiAgICAgICAgICAgICAgcHJldlRpbWU6IHZvaWQgMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGVlKVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGkgPSAxO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS56b29tLCBcInNjYWxlXCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gdCkge1xuICAgICAgICAgICAgICB2YXIgcyA9IGUuem9vbS5nZXN0dXJlLiRpbWFnZUVsID8gZS56b29tLmdlc3R1cmUuJGltYWdlRWxbMF0gOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgYSA9IGUuem9vbS5nZXN0dXJlLiRzbGlkZUVsID8gZS56b29tLmdlc3R1cmUuJHNsaWRlRWxbMF0gOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGUuZW1pdChcInpvb21DaGFuZ2VcIiwgdCwgcywgYSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSB0XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuem9vbS5lbmFibGVkICYmIGUuem9vbS5lbmFibGUoKVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuem9vbS5kaXNhYmxlKClcbiAgICAgICAgfSxcbiAgICAgICAgdG91Y2hTdGFydDogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICBlLnpvb20uZW5hYmxlZCAmJiBlLnpvb20ub25Ub3VjaFN0YXJ0KHQpXG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGUuem9vbS5lbmFibGVkICYmIGUuem9vbS5vblRvdWNoRW5kKHQpXG4gICAgICAgIH0sXG4gICAgICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICBlLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgZS56b29tLmVuYWJsZWQgJiYgZS5wYXJhbXMuem9vbS50b2dnbGUgJiYgZS56b29tLnRvZ2dsZSh0KVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuem9vbS5lbmFibGVkICYmIGUucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBlLnpvb20ub25UcmFuc2l0aW9uRW5kKClcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS56b29tLmVuYWJsZWQgJiYgZS5wYXJhbXMuem9vbS5lbmFibGVkICYmIGUucGFyYW1zLmNzc01vZGUgJiYgZS56b29tLm9uVHJhbnNpdGlvbkVuZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImxhenlcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBsYXp5OiB7XG4gICAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgICAgbG9hZFByZXZOZXh0OiAhMSxcbiAgICAgICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICAgICAgbG9hZE9uVHJhbnNpdGlvblN0YXJ0OiAhMSxcbiAgICAgICAgICBlbGVtZW50Q2xhc3M6IFwic3dpcGVyLWxhenlcIixcbiAgICAgICAgICBsb2FkaW5nQ2xhc3M6IFwic3dpcGVyLWxhenktbG9hZGluZ1wiLFxuICAgICAgICAgIGxvYWRlZENsYXNzOiBcInN3aXBlci1sYXp5LWxvYWRlZFwiLFxuICAgICAgICAgIHByZWxvYWRlckNsYXNzOiBcInN3aXBlci1sYXp5LXByZWxvYWRlclwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTSh0aGlzLCB7XG4gICAgICAgICAgbGF6eTogdCh7XG4gICAgICAgICAgICBpbml0aWFsSW1hZ2VMb2FkZWQ6ICExXG4gICAgICAgICAgfSwgdGUpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgZS5wYXJhbXMucHJlbG9hZEltYWdlcyAmJiAoZS5wYXJhbXMucHJlbG9hZEltYWdlcyA9ICExKVxuICAgICAgICB9LFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhZS5wYXJhbXMubG9vcCAmJiAwID09PSBlLnBhcmFtcy5pbml0aWFsU2xpZGUgJiYgZS5sYXp5LmxvYWQoKVxuICAgICAgICB9LFxuICAgICAgICBzY3JvbGw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuZnJlZU1vZGUgJiYgIWUucGFyYW1zLmZyZWVNb2RlU3RpY2t5ICYmIGUubGF6eS5sb2FkKClcbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBlLmxhenkubG9hZCgpXG4gICAgICAgIH0sXG4gICAgICAgIHNjcm9sbGJhckRyYWdNb3ZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBlLmxhenkubG9hZCgpXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgKGUucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0IHx8ICFlLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCAmJiAhZS5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgJiYgZS5sYXp5LmxvYWQoKVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhZS5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgZS5sYXp5LmxvYWQoKVxuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgZS5wYXJhbXMuY3NzTW9kZSAmJiBlLmxhenkubG9hZCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImNvbnRyb2xsZXJcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgICAgY29udHJvbDogdm9pZCAwLFxuICAgICAgICAgIGludmVyc2U6ICExLFxuICAgICAgICAgIGJ5OiBcInNsaWRlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBjb250cm9sbGVyOiB0KHtcbiAgICAgICAgICAgIGNvbnRyb2w6IHRoaXMucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbFxuICAgICAgICAgIH0sIGllKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmNvbnRyb2xsZXIuY29udHJvbCAmJiBlLmNvbnRyb2xsZXIuc3BsaW5lICYmIChlLmNvbnRyb2xsZXIuc3BsaW5lID0gdm9pZCAwLCBkZWxldGUgZS5jb250cm9sbGVyLnNwbGluZSlcbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuY29udHJvbGxlci5jb250cm9sICYmIGUuY29udHJvbGxlci5zcGxpbmUgJiYgKGUuY29udHJvbGxlci5zcGxpbmUgPSB2b2lkIDAsIGRlbGV0ZSBlLmNvbnRyb2xsZXIuc3BsaW5lKVxuICAgICAgICB9LFxuICAgICAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmNvbnRyb2xsZXIuY29udHJvbCAmJiBlLmNvbnRyb2xsZXIuc3BsaW5lICYmIChlLmNvbnRyb2xsZXIuc3BsaW5lID0gdm9pZCAwLCBkZWxldGUgZS5jb250cm9sbGVyLnNwbGluZSlcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSwgdCwgaSkge1xuICAgICAgICAgIGUuY29udHJvbGxlci5jb250cm9sICYmIGUuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodCwgaSlcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUsIHQsIGkpIHtcbiAgICAgICAgICBlLmNvbnRyb2xsZXIuY29udHJvbCAmJiBlLmNvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbih0LCBpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJhMTF5XCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgYTExeToge1xuICAgICAgICAgIGVuYWJsZWQ6ICEwLFxuICAgICAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiBcInN3aXBlci1ub3RpZmljYXRpb25cIixcbiAgICAgICAgICBwcmV2U2xpZGVNZXNzYWdlOiBcIlByZXZpb3VzIHNsaWRlXCIsXG4gICAgICAgICAgbmV4dFNsaWRlTWVzc2FnZTogXCJOZXh0IHNsaWRlXCIsXG4gICAgICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6IFwiVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGVcIixcbiAgICAgICAgICBsYXN0U2xpZGVNZXNzYWdlOiBcIlRoaXMgaXMgdGhlIGxhc3Qgc2xpZGVcIixcbiAgICAgICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogXCJHbyB0byBzbGlkZSB7e2luZGV4fX1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIGExMXk6IHQodCh7fSwgc2UpLCB7fSwge1xuICAgICAgICAgICAgbGl2ZVJlZ2lvbjogbSgnPHNwYW4gY2xhc3M9XCInICsgdGhpcy5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzcyArICdcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIj48L3NwYW4+JylcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuYTExeS5lbmFibGVkICYmIChlLmExMXkuaW5pdCgpLCBlLmExMXkudXBkYXRlTmF2aWdhdGlvbigpKVxuICAgICAgICB9LFxuICAgICAgICB0b0VkZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuYTExeS5lbmFibGVkICYmIGUuYTExeS51cGRhdGVOYXZpZ2F0aW9uKClcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuYTExeS5lbmFibGVkICYmIGUuYTExeS51cGRhdGVOYXZpZ2F0aW9uKClcbiAgICAgICAgfSxcbiAgICAgICAgcGFnaW5hdGlvblVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5hMTF5LmVuYWJsZWQgJiYgZS5hMTF5LnVwZGF0ZVBhZ2luYXRpb24oKVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmExMXkuZW5hYmxlZCAmJiBlLmExMXkuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImhpc3RvcnlcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBoaXN0b3J5OiB7XG4gICAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgICAgcmVwbGFjZVN0YXRlOiAhMSxcbiAgICAgICAgICBrZXk6IFwic2xpZGVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBoaXN0b3J5OiB0KHt9LCBhZSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCAmJiBlLmhpc3RvcnkuaW5pdCgpXG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5wYXJhbXMuaGlzdG9yeS5lbmFibGVkICYmIGUuaGlzdG9yeS5kZXN0cm95KClcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmhpc3RvcnkuaW5pdGlhbGl6ZWQgJiYgZS5oaXN0b3J5LnNldEhpc3RvcnkoZS5wYXJhbXMuaGlzdG9yeS5rZXksIGUuYWN0aXZlSW5kZXgpXG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuaGlzdG9yeS5pbml0aWFsaXplZCAmJiBlLnBhcmFtcy5jc3NNb2RlICYmIGUuaGlzdG9yeS5zZXRIaXN0b3J5KGUucGFyYW1zLmhpc3Rvcnkua2V5LCBlLmFjdGl2ZUluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJoYXNoLW5hdmlnYXRpb25cIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICAgIHJlcGxhY2VTdGF0ZTogITEsXG4gICAgICAgICAgd2F0Y2hTdGF0ZTogITFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBoYXNoTmF2aWdhdGlvbjogdCh7XG4gICAgICAgICAgICBpbml0aWFsaXplZDogITFcbiAgICAgICAgICB9LCByZSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgJiYgZS5oYXNoTmF2aWdhdGlvbi5pbml0KClcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkICYmIGUuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpXG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCAmJiBlLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKVxuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkICYmIGUucGFyYW1zLmNzc01vZGUgJiYgZS5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiYXV0b3BsYXlcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBhdXRvcGxheToge1xuICAgICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICAgIGRlbGF5OiAzZTMsXG4gICAgICAgICAgd2FpdEZvclRyYW5zaXRpb246ICEwLFxuICAgICAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiAhMCxcbiAgICAgICAgICBzdG9wT25MYXN0U2xpZGU6ICExLFxuICAgICAgICAgIHJldmVyc2VEaXJlY3Rpb246ICExXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTSh0aGlzLCB7XG4gICAgICAgICAgYXV0b3BsYXk6IHQodCh7fSwgbmUpLCB7fSwge1xuICAgICAgICAgICAgcnVubmluZzogITEsXG4gICAgICAgICAgICBwYXVzZWQ6ICExXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQgJiYgKGUuYXV0b3BsYXkuc3RhcnQoKSwgcigpLmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGUuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKSlcbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiAoZSwgdCwgaSkge1xuICAgICAgICAgIGUuYXV0b3BsYXkucnVubmluZyAmJiAoaSB8fCAhZS5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24gPyBlLmF1dG9wbGF5LnBhdXNlKHQpIDogZS5hdXRvcGxheS5zdG9wKCkpXG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlckZpcnN0TW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmF1dG9wbGF5LnJ1bm5pbmcgJiYgKGUucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uID8gZS5hdXRvcGxheS5zdG9wKCkgOiBlLmF1dG9wbGF5LnBhdXNlKCkpXG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucGFyYW1zLmNzc01vZGUgJiYgZS5hdXRvcGxheS5wYXVzZWQgJiYgIWUucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uICYmIGUuYXV0b3BsYXkucnVuKClcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmF1dG9wbGF5LnJ1bm5pbmcgJiYgZS5hdXRvcGxheS5zdG9wKCksIHIoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBlLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiZWZmZWN0LWZhZGVcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBmYWRlRWZmZWN0OiB7XG4gICAgICAgICAgY3Jvc3NGYWRlOiAhMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIGZhZGVFZmZlY3Q6IHQoe30sIGxlKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKFwiZmFkZVwiID09PSBlLnBhcmFtcy5lZmZlY3QpIHtcbiAgICAgICAgICAgIGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZhZGVcIik7XG4gICAgICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogITBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBTKGUucGFyYW1zLCB0KSwgUyhlLm9yaWdpbmFsUGFyYW1zLCB0KVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIFwiZmFkZVwiID09PSBlLnBhcmFtcy5lZmZlY3QgJiYgZS5mYWRlRWZmZWN0LnNldFRyYW5zbGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgXCJmYWRlXCIgPT09IGUucGFyYW1zLmVmZmVjdCAmJiBlLmZhZGVFZmZlY3Quc2V0VHJhbnNpdGlvbih0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJlZmZlY3QtY3ViZVwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgICAgICBzbGlkZVNoYWRvd3M6ICEwLFxuICAgICAgICAgIHNoYWRvdzogITAsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgICAgICBzaGFkb3dTY2FsZTogLjk0XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTSh0aGlzLCB7XG4gICAgICAgICAgY3ViZUVmZmVjdDogdCh7fSwgb2UpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoXCJjdWJlXCIgPT09IGUucGFyYW1zLmVmZmVjdCkge1xuICAgICAgICAgICAgZS5jbGFzc05hbWVzLnB1c2goZS5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiY3ViZVwiKSwgZS5jbGFzc05hbWVzLnB1c2goZS5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiM2RcIik7XG4gICAgICAgICAgICB2YXIgdCA9IHtcbiAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogITEsXG4gICAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICEwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUyhlLnBhcmFtcywgdCksIFMoZS5vcmlnaW5hbFBhcmFtcywgdClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBcImN1YmVcIiA9PT0gZS5wYXJhbXMuZWZmZWN0ICYmIGUuY3ViZUVmZmVjdC5zZXRUcmFuc2xhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIFwiY3ViZVwiID09PSBlLnBhcmFtcy5lZmZlY3QgJiYgZS5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24odClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiZWZmZWN0LWZsaXBcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBmbGlwRWZmZWN0OiB7XG4gICAgICAgICAgc2xpZGVTaGFkb3dzOiAhMCxcbiAgICAgICAgICBsaW1pdFJvdGF0aW9uOiAhMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIGZsaXBFZmZlY3Q6IHQoe30sIGRlKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKFwiZmxpcFwiID09PSBlLnBhcmFtcy5lZmZlY3QpIHtcbiAgICAgICAgICAgIGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZsaXBcIiksIGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgICAgICAgdmFyIHQgPSB7XG4gICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwLFxuICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICEwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgUyhlLnBhcmFtcywgdCksIFMoZS5vcmlnaW5hbFBhcmFtcywgdClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBcImZsaXBcIiA9PT0gZS5wYXJhbXMuZWZmZWN0ICYmIGUuZmxpcEVmZmVjdC5zZXRUcmFuc2xhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIFwiZmxpcFwiID09PSBlLnBhcmFtcy5lZmZlY3QgJiYgZS5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24odClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiZWZmZWN0LWNvdmVyZmxvd1wiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICAgIHJvdGF0ZTogNTAsXG4gICAgICAgICAgc3RyZXRjaDogMCxcbiAgICAgICAgICBkZXB0aDogMTAwLFxuICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgICAgIHNsaWRlU2hhZG93czogITBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBNKHRoaXMsIHtcbiAgICAgICAgICBjb3ZlcmZsb3dFZmZlY3Q6IHQoe30sIGhlKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgXCJjb3ZlcmZsb3dcIiA9PT0gZS5wYXJhbXMuZWZmZWN0ICYmIChlLmNsYXNzTmFtZXMucHVzaChlLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJjb3ZlcmZsb3dcIiksIGUuY2xhc3NOYW1lcy5wdXNoKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpLCBlLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITAsIGUub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9ICEwKVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgXCJjb3ZlcmZsb3dcIiA9PT0gZS5wYXJhbXMuZWZmZWN0ICYmIGUuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zbGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgXCJjb3ZlcmZsb3dcIiA9PT0gZS5wYXJhbXMuZWZmZWN0ICYmIGUuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24odClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwidGh1bWJzXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgdGh1bWJzOiB7XG4gICAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiAhMCxcbiAgICAgICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogXCJzd2lwZXItc2xpZGUtdGh1bWItYWN0aXZlXCIsXG4gICAgICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6IFwic3dpcGVyLWNvbnRhaW5lci10aHVtYnNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE0odGhpcywge1xuICAgICAgICAgIHRodW1iczogdCh7XG4gICAgICAgICAgICBzd2lwZXI6IG51bGwsXG4gICAgICAgICAgICBpbml0aWFsaXplZDogITFcbiAgICAgICAgICB9LCBwZSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gZS5wYXJhbXMudGh1bWJzO1xuICAgICAgICAgIHQgJiYgdC5zd2lwZXIgJiYgKGUudGh1bWJzLmluaXQoKSwgZS50aHVtYnMudXBkYXRlKCEwKSlcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS50aHVtYnMuc3dpcGVyICYmIGUudGh1bWJzLnVwZGF0ZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnRodW1icy5zd2lwZXIgJiYgZS50aHVtYnMudXBkYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUudGh1bWJzLnN3aXBlciAmJiBlLnRodW1icy51cGRhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnRodW1icy5zd2lwZXIgJiYgZS50aHVtYnMudXBkYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICB2YXIgaSA9IGUudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgICBpICYmIGkuc2V0VHJhbnNpdGlvbih0KVxuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciB0ID0gZS50aHVtYnMuc3dpcGVyO1xuICAgICAgICAgIHQgJiYgZS50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0ICYmIHQuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XTtcbiAgcmV0dXJuIFcudXNlKHVlKSwgV1xufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpcGVyLWJ1bmRsZS5taW4uanMubWFwXG4iXX0=
